/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

// $Id: CaloCellPackerUtils.icc,v 1.1 2007-11-08 18:14:20 ssnyder Exp $
/**
 * @file CaloTools/CaloCellPackerUtils.icc
 * @author scott snyder
 * @date Nov 2007
 * @brief Utilities for compacting calorimeter cells.
 */


namespace CaloCellPackerUtils {


/**
 * @brief Shift and mask a value into the bitfield.
 * @param x The input value.
 * @return The value shifted and masked to go into the bitfield.
 */
inline
unsigned int Bitfield::in (unsigned int x) const
{
  return (x&m_mask)<<m_shift;
}


/**
 * @brief Extract a value from the bitfield.
 * @param x The input bitfield.
 * @return The value extracted from the bitfield.
 */
inline
unsigned int Bitfield::out (unsigned int x) const
{
  return (x>>m_shift)&m_mask;
}


/**
 * @brief Shift and mask a value into the bitfield.
 * @param x The input value.
 * @return The converted value shifted and masked to go into the bitfield.
 */
inline
unsigned int Floatfield::in (double x) const
{
  // Handle over/underflow.
  if (UNLIKELY(x >= m_xmax))
    return Bitfield::in (m_mask);
  else if (UNLIKELY(x <= m_xmin))
    return 0;

  // Convert to an int, and pack.
  return Bitfield::in (static_cast<unsigned int> ((x - m_xmin) * m_ifact));
}


/**
 * @brief Extract a value from the bitfield.
 * @param x The input bitfield.
 * @param underflag[out] Set to 1 if the value was the lowest possible.
 * @return The value extracted from the bitfield.
 */
inline
double Floatfield::out (unsigned int x, int& underflow) const
{
  // Unpack the value.
  unsigned int xx = Bitfield::out(x);

  // Did we underflow?
  if (UNLIKELY(!xx)) {
    underflow = 1;
    return m_xmin;
  }

  // Convert back to a float.
  // Note: the cast to int here is important for performance: converting
  // an unsigned to a double takes much longer than converting an int.
  underflow = 0;
  return m_xmin + ((int)xx+0.5) * m_fact;
}


/**
 * @brief Shift and mask a value into the bitfield.
 * @param x The input value.
 * @return The converted value shifted and masked to go into the bitfield.
 */
inline
unsigned int Floatfield2::in (double x) const
{
  // Handle over/underflow.
  if (UNLIKELY(x >= m_xmax))
    return Bitfield::in (m_mask);
  else if (UNLIKELY(x <= 0))
    return 0;

  // Convert to an int, and pack.
  return Bitfield::in (static_cast<unsigned int> (x * m_ifact));
}


/**
 * @brief Extract a value from the bitfield.
 * @param x The input bitfield.
 * @return The value extracted from the bitfield.
 */
inline
double Floatfield2::out (unsigned int x) const
{
  // Unpack the value.
  unsigned int xx = Bitfield::out(x);

  // Did we underflow?
  // (The branch hint here gives a small but measureable improvement.)
  if (UNLIKELY(xx == 0)) return 0;

  // Convert back to a float.
  // Note: the cast to int here is important for performance: converting
  // an unsigned to a double takes much longer than converting an int.
  return ((int)xx+0.5) * m_fact;
}


} // namespace CaloCellPackerUtils
