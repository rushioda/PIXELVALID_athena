/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

#ifndef JIVEXML_LARDIGITRETRIEVER_H
#define JIVEXML_LARDIGITRETRIEVER_H

#include <string>
#include <vector>
#include <cstddef>
#include <map>

#include "CaloIdentifier/CaloCell_ID.h"
#include "LArCabling/LArCablingService.h"

#include "JiveXML/IDataRetriever.h"
#include "AthenaBaseComps/AthAlgTool.h"
#include "GaudiKernel/ToolHandle.h"

class IToolSvc;

class CaloIdManager;
class Identifier;
class CaloCellContainer;

namespace JiveXML{
  
  /**
   * @class LArDigitRetriever
   * @brief Retrieves all @c Tile Calo Cell @c objects 
   *
   *  - @b Properties
   *    - StoreGateKey: default is 'AllCalo'. Don't change.
   *	- CallThreshold: default is 50 MeV
   *	- RetrieveLAr: activate retriever, default is true
   *	- DoLarDigits: write LAr digits (ADC), default is false
   *	- RetrieveHEC: activate retriever, default is true
   *	- DoHECDigits: write HEC digits (ADC), default is false
   *	- RetrieveFCal: activate retriever, default is true
   *	- DoFCalDigits: write FCal digits (ADC), default is false
   *	- CellEnergyPrec: output precision, default is 3 digits
   *	- CellTimePrec: output precision, default is 3 digits
   *   
   *  - @b Retrieved @b Data
   *    - location in phi and eta
   *    - identifier and adc counts of each cell 
   *    - various pmt details
   */
  class LArDigitRetriever : virtual public IDataRetriever,
                                   public AthAlgTool {
    
    public:
      
      /// Standard Constructor
      LArDigitRetriever(const std::string& type,const std::string& name,const IInterface* parent);
      
      /// Retrieve all the data
      virtual StatusCode retrieve(ToolHandle<IFormatTool> &FormatTool); 
      const DataMap getLArDigitData(const CaloCellContainer* cellContainer, 
								std::string datatype, 
								CaloCell_ID::SUBCALO calotype);

      /// Return the name of the data type
      virtual std::string dataTypeName() const { return m_typeName; };
	
      ///Default AthAlgTool methods
      StatusCode initialize();

    private:
      ///The data type that is generated by this retriever
      const std::string m_typeName;

      void calcEMLayerSub(Identifier&);
      void calcHECLayerSub(Identifier&);

      std::string m_sgKey; 
      std::string m_sgKeyLArDigit[2]; 
      ToolHandle<LArCablingService> m_larCablingSvc;
    
      const CaloIdManager* m_calo_id_man;
      const CaloCell_ID*   m_calocell_id;

      bool m_lar;
      bool m_hec;
      bool m_fcal;
      bool m_doLArDigit;
      bool m_doHECDigit;
      bool m_doFCalDigit;
      bool m_doDigit;
      bool m_cellConditionCut;
      bool m_inputdpd;
      int m_cellEnergyPrec;
      int m_cellTimePrec;
      double m_cellThreshold;
    
      std::vector<Identifier::value_type> m_LArChannelsToIgnoreM5;
      bool m_doMaskLArChannelsM5;

      DataVect m_sub; 
  };
}
#endif
