/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

// $Id$
/**
 * @file CaloTPCnv/test/CaloClusterContainerCnvTest_p7.icc
 * @author scott snyder <snyder@bnl.gov>
 * @date Apr, 2014
 * @brief T->P p7 code, for testing.
 *
 * The p7 T->P code was removed from the library.
 * Restore it here for the benefit of the unit tests.
 */


#include "CaloTPCnv/CaloClusterContainerCnv_p7.h" 
//#include "AthenaPoolCnvSvc/Compressor.h"
#include "CaloEvent/CaloSamplingData.h"
#include "CaloConditions/CaloBadChannel.h"
#include "CaloGeoHelpers/CaloPhiRange.h"
#include "AthenaKernel/errorcheck.h"


#include "testbit.icc"


class CaloClusterContainerCnvTest_p7
  : public CaloClusterContainerCnv_p7
{
public:
  using CaloClusterContainerCnv_p7::transToPers;
  void transToPers (const CaloClusterContainer* trans,
                    CaloClusterContainer_p7* pers,
                    MsgStream& log);
};


void CaloClusterContainerCnvTest_p7::transToPers(const CaloClusterContainer* trans, 
                                                 CaloClusterContainer_p7* pers, MsgStream &log)
{
  if (log.level() <= MSG::DEBUG) log<< MSG::DEBUG << "Writing CaloClusterContainerCnv_p7" << endmsg;


  static CaloPhiRange range;

  pers->m_vec.resize(trans->size()); 
  CaloClusterContainer_p7::iterator itp=pers->m_vec.begin();
  CaloClusterContainer::const_iterator it=trans->begin(); 
  CaloClusterContainer::const_iterator it_e=trans->end();  

  pers->m_badClusIndexList.clear();
  pers->m_badLayerStatusList.clear();
  pers->m_badEtaList.clear();
  pers->m_badPhiList.clear();

  pers->m_rawEtaPhiM.clear();
  pers->m_rawE.clear();

  pers->m_altEtaPhiM.clear();
  pers->m_altE.clear();
 
  // Set varTypePattern to the OR of the patterns of all clusters.
  // (For samplings.)
  // Trigger can make cluster collections with multiple pattern masks!
  //
  // Also pick up moment keys here.  Trigger can make clusters with no
  // stored moments, so we need to look until we find one that isn't empty.
  // Store the moment keys and their number.
  pers->m_varTypePattern=0;
  pers->m_momentContainer.m_Mkey.clear();
  pers->m_momentContainer.m_nMoments = 0;
  for (CaloClusterContainer::const_iterator it2 = it; it2 != it_e; ++it2)
  {
    const CaloCluster& cl = **it2;
    const CaloClusterMomentStore& ms = *cl.getMomentStore(false);
    pers->m_varTypePattern |= cl.m_dataStore.m_varTypePattern;

    if (pers->m_momentContainer.m_nMoments == 0 && ms.size() != 0) {
      CaloClusterMomentStore::moment_iterator mit=ms.begin();
      int nMom=ms.size();
      pers->m_momentContainer.m_nMoments = nMom;
      for (int w=0; w<nMom; w++){  // here stores moment keys per container not cluster
        pers->m_momentContainer.m_Mkey.push_back(mit.getMomentType());  
        ++mit; 
      }
    }
    else if (ms.size() > 0 && pers->m_momentContainer.m_nMoments != ms.size())
    {
      REPORT_MESSAGE_WITH_CONTEXT(MSG::WARNING,
                                  "CaloClusterContainerCnv_p7")
        << "Inconsistent number of cluster moments: cluster "
        << it2 - trans->begin() << " of " << trans->size()
        << " have "  << ms.size()
        << " expect " << pers->m_momentContainer.m_nMoments;
    }
        
  }
	
  std::vector<float> temp_Moments;
  temp_Moments.reserve (trans->size() * pers->m_momentContainer.m_nMoments);
  std::vector<float> tmp_badChannelEta;
  std::vector<float> tmp_badChannelPhi;

  std::vector<float> tmp_rawE;
  std::vector<float> tmp_rawEtaPhiM;
  tmp_rawE.reserve(trans->size());
  tmp_rawEtaPhiM.reserve(3*trans->size());

  std::vector<float> tmp_altE;
  std::vector<float> tmp_altEtaPhiM;
  tmp_altE.reserve(trans->size());
  tmp_altEtaPhiM.reserve(3*trans->size());

  
  
  short index=0;
  for(;it!=it_e;++it,++itp) {  // LOOP over clusters
    const CaloCluster& cl = **it;
    //CaloClusterChangeSignalState statechange (&cl, P4SignalState::CALIBRATED);
    P4SignalState::State oldstate=(*it)->signalState();
    (*it)->setSignalState(P4SignalState::CALIBRATED);
    //CaloClusterChangeVertexState vertexchange(&cl,0);
    index++;
    transToPers(&cl,&(*itp),log); // tP of CaloCluster to CaloCluster_p 
	
    const CaloSamplingData* trDS=&cl.m_dataStore; //transient
    int nVar=trDS->getNumberOfVariableTypes();
    int nSamplings=trDS->getNumberOfSamplings();
//	std::cout<<"vars:"<<nVar<<"\t samplings:"<<nSamplings<<std::endl;
//	std::cout<<"b:"<<(*it)->m_barrel<<"\te:"<<(*it)->m_endcap<<std::endl;
//	std::cout<<"sPattern: "<<(*it)->m_samplingPattern<<"\tgB:"<<(0x001ff00f & (*it)->m_samplingPattern) <<"\tgEC:"<< (0x00e00ff0 & (*it)->m_samplingPattern)  <<std::endl;
	
        typedef CaloSamplingData::variable_key_type vartype;
        typedef CaloSamplingData::sampling_key_type samptype;

	for (int i=0;i<nVar;++i) {
          if (testbit (pers->m_varTypePattern, i)) {
            // We're writing this pattern.  Was it in the cluster?
            if (testbit (trDS->m_varTypePattern, i)) {
              // Yes, store it.
              for (int j=0;j<nSamplings; ++j)
                if ( testbit(cl.m_samplingPattern, j)) {
                  pers->m_dataStore.push_back(trDS->retrieveData
                                              (static_cast<vartype>(i),
                                               static_cast<samptype>(j)));
                }
            }
            else {
              // Not in the cluster.  Store 0's.
              for (int j=0;j<nSamplings; ++j)
                if ( testbit(cl.m_samplingPattern, j))
                  pers->m_dataStore.push_back(0);
            }
          }
          else{
            // We're not writing.  Check that nothing was stored...
            for (int j=0;j<nSamplings; ++j)
              if ( testbit(cl.m_samplingPattern, j))
                if(trDS->retrieveData(static_cast<vartype>(i),
                                      static_cast<samptype>(j)))
                  if (log.level() <= MSG::DEBUG) log<< MSG::DEBUG<<"BIG PROBLEM ! not stored and has value:"
                     <<trDS->retrieveData(static_cast<vartype>(i),
                                          static_cast<samptype>(j))
                     <<"\t var: "<<i
                     <<"\t sampling: "<<j<<endmsg;
          }
        }
			
	
        //CaloClusterMomentStore::moment_iterator itm=cl.m_momentStore.begin(); 
        //CaloClusterMomentStore::moment_iterator itm_e=cl.m_momentStore.end();
	
        std::vector<unsigned short>::const_iterator itk = 
          pers->m_momentContainer.m_Mkey.begin();
        std::vector<unsigned short>::const_iterator itk_e = 
          pers->m_momentContainer.m_Mkey.end();
        CaloClusterMomentStore::moment_iterator itm =
          cl.m_momentStore.begin();
        CaloClusterMomentStore::moment_iterator itm_e =
          cl.m_momentStore.end();
        for (; itk != itk_e; ++itk) {
          float val = 0;
          if (itm != itm_e && itm.getMomentType() == *itk) {
            val = (*itm).getValue();
            ++itm;
          }
          else {
            itm = cl.m_momentStore.find
              (static_cast<CaloClusterMomentStore::moment_type> (*itk));
            if (itm != itm_e) {
              val = (*itm).getValue();
              ++itm;
            }
          }
          temp_Moments.push_back(val);
        }

// bad channel info
       const CaloCluster::badChannelList* badlist = cl.getBadChannel();
       // std::cout << " transtopers: bad channel size " << badlist->size() << std::endl;
       for (unsigned int i=0;i<badlist->size();i++) {
          pers->m_badClusIndexList.push_back(index);
          float etac = (*badlist)[i].getEta()-(cl.eta());
          float phic = range.diff((*badlist)[i].getPhi(),cl.phi());
          CaloSampling::CaloSample sampl = (*badlist)[i].getLayer();
          CaloBadChannel flag = (*badlist)[i].getFlag();
          short status =  ((sampl & 0xff) | ((flag.packedData() & 0xff) << 8));
          tmp_badChannelEta.push_back(etac);
          tmp_badChannelPhi.push_back(phic);
          pers->m_badLayerStatusList.push_back(status);
       }

// raw E-eta-phi-M
       //std::cout << "transtopers: rawE/eta/phi/M " << (*it)->m_rawE << " " << (*it)->m_rawEta << " " << (*it)->m_rawPhi << " " << (*it)->m_rawM << std::endl;
       double e = cl.e();
       if (std::fabs(e)>0.1)  {
         float eratio = cl.m_rawE / e;
         tmp_rawE.push_back( eratio);
       }
       else
         tmp_rawE.push_back( cl.m_rawE);
       tmp_rawEtaPhiM.push_back( cl.m_rawEta-cl.eta());
       float dphi = range.diff ( cl.m_rawPhi, cl.phi());
       tmp_rawEtaPhiM.push_back( dphi);
       tmp_rawEtaPhiM.push_back( cl.m_rawM);

// alt cal E-eta-phi-M
       //std::cout << "transtopers: altE/eta/phi/M " << (*it)->m_altE << " " << (*it)->m_altEta << " " << (*it)->m_altPhi << " " << (*it)->m_altM << std::endl;
       if (std::fabs(e)>0.1)  {
         float eratio = cl.m_altE / e;
         tmp_altE.push_back( eratio);
       }
       else
         tmp_altE.push_back( cl.m_altE);
       tmp_altEtaPhiM.push_back( cl.m_altEta-cl.eta());
       dphi = range.diff ( cl.m_altPhi, cl.phi());
       tmp_altEtaPhiM.push_back( dphi);
       tmp_altEtaPhiM.push_back( cl.m_altM);

       (*it)->setSignalState(oldstate);
   } // end of loop over clusters

   
  Compressor A;
  A.setNrBits(16);
  // A.setIgnoreSign();
  A.reduce(temp_Moments,pers->m_momentContainer.m_Mvalue); // packs moments

  Compressor B;
  B.setNrBits(16);
  B.reduce(tmp_badChannelEta,pers->m_badEtaList);
  B.reduce(tmp_badChannelPhi,pers->m_badPhiList);

  Compressor C;
  C.setNrBits(21);
  C.reduce(tmp_rawE,pers->m_rawE);
  Compressor D;
  D.setNrBits(16);
  D.reduce(tmp_rawEtaPhiM,pers->m_rawEtaPhiM);

  Compressor E;
  E.setNrBits(21);
  E.reduce(tmp_altE,pers->m_altE);
  Compressor F;
  F.setNrBits(16);
  F.reduce(tmp_altEtaPhiM,pers->m_altEtaPhiM);

   
  m_caloTowerSegCnv.transToPers(&trans->getTowerSeg(),&(pers->m_towerSeg));
} 


