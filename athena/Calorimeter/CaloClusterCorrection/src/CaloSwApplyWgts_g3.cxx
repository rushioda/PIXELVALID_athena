/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

/********************************************************************

NAME:     CaloSwApplyWgts_g3.cxx
PACKAGE:  offline/Calorimeter/CaloClusterCorrection

AUTHORS:  J. McDonald 
CREATED:  Feb. 3, 2003

PURPOSE:  Optimization correction for the weights in the
          different layers.  The weights are tuned on 
          photons @ E = 100 GeV with fixed vertex
          base class: CaloClusterCorrection
          Tuned on DC1 data.

Updated:  May 5, 2004    (Sven Menke)
	  base class changed from algo to tool



********************************************************************/
#include "CaloSwApplyWgts_g3.h"


// correction constants Leonardo Carminati
// For  eta  < 1.35 and eta > 1.6, the weights are 
// presampler, strips, middle section and back 
// his global calibration should be applied to CaloSWApplyWgts
// 1.35 < n < 1.6 w_presampler (EC+barrel), Weight for the 
// strips + middle + back barrel, Weight for the scintillator,
// W_ec (strips + middle + back) endcap 

/* This is the table for the different weights....
there are four different bins in the eta region...
----------------------------------------------
Bin# |  Eta < 1.35  | 1.35<eta<1.6 | eta > 1.6
----------------------------------------------
   0 | Presampler   | Presampler   |  Presampler
----------------------------------------------
   1 | Strip        | Strips/Middle|  Strips
     |              | Back Barrel  |
----------------------------------------------
   2 | Middle       | Scintillator |  Middle
----------------------------------------------
   3 | Back         | Strips/Middle|  Back
     |              | Back Endcap  |
----------------------------------------------
*/

using xAOD::CaloCluster;
const float CaloSwApplyWgts_g3::m_table_eta[s_numEtaBins+1] 
= {0.000000, 0.025000, 0.050000, 0.075000, 0.100000, 0.125000, 
   0.150000, 0.175000, 0.200000, 0.225000, 0.250000, 0.275000, 
   0.300000, 0.325000, 0.350000, 0.375000, 0.400000, 0.425000, 
   0.450000, 0.475000, 0.500000, 0.525000, 0.550000, 0.575000, 
   0.600000, 0.625000, 0.650000, 0.675000, 0.700000, 0.725000, 
   0.750000, 0.775000, 0.800000, 0.825000, 0.850000, 0.875000, 
   0.900000, 0.925000, 0.950000, 0.975000, 1.000000, 1.025000, 
   1.050000, 1.075000, 1.100000, 1.125000, 1.150000, 1.175000, 
   1.200000, 1.225000, 1.250000, 1.275000, 1.300000, 1.325000, 
   1.350000, 1.375000, 1.400000, 1.425000, 1.450000, 1.475000, 
   1.500000, 1.525000, 1.550000, 1.575000, 1.600000, 1.625000, 
   1.650000, 1.675000, 1.700000, 1.725000, 1.750000, 1.775000, 
   1.800000, 1.825000, 1.850000, 1.875000, 1.900000, 1.925000, 
   1.950000, 1.975000, 2.000000, 2.025000, 2.050000, 2.075000, 
   2.100000, 2.125000, 2.150000, 2.175000, 2.200000, 2.225000, 
   2.250000, 2.275000, 2.300000, 2.325000, 2.350000, 2.375000, 
   2.400000, 2.425000, 2.450000, 2.475000, 2.500000};
const float CaloSwApplyWgts_g3::m_table_p[4][s_numEtaBins] = {
  {
    2.159336, 2.159365, 2.159426, 2.159524, 2.185450, 1.784150, 
    1.468300, 1.577280, 2.357230, 2.143870, 2.429050, 2.128170, 
    1.711000, 2.063040, 2.188510, 2.285910, 2.375140, 2.358500, 
    1.631560, 2.199280, 1.992240, 2.426500, 2.317250, 2.492310, 
    2.537180, 2.754830, 2.606900, 2.742630, 2.821300, 2.660760, 
    3.231350, 4.261270, 4.440460, 4.739960, 3.802220, 3.971200, 
    3.873020, 3.780380, 3.719170, 3.674910, 3.645370, 3.638160, 
    3.656870, 3.648160, 3.543830, 3.654490, 3.692520, 3.761490, 
    3.697630, 3.649310, 3.771020, 3.640650, 3.558510, 3.404140, 
    3.773840, 3.981200, 3.855140, 3.960490, 3.914110, 3.698370, 
    1.955760, 1.784920, 1.980230, 2.489000, 6.006220, 6.913410, 
    6.518250, 6.634570, 6.406190, 5.479100, 4.903650, 4.953980, 
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 
    0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 0.000000, 
    0.000000, 0.000000, 0.000000, 0.000000
  },
  {
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 
    0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 
    1.088920, 1.090670, 1.080880, 1.058810, 1.041350, 1.040150, 
    1.024850, 1.027870, 1.008870, 1.013690, 1.010470, 0.997779, 
    1.011620, 1.010720, 1.018570, 0.995325, 0.998770, 0.991472, 
    1.012050, 1.022670, 1.047580, 1.033470, 1.009190, 1.030510, 
    1.036582, 1.040966, 1.045282, 1.049457
  },
  {

    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 
    0.300938, 0.295500, 0.257021, 0.285664, 0.279562, 0.243856, 
    0.119355, 0.116621, 0.113299, 0.079486, 1.000000, 1.000000, 
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 
    1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 1.000000, 
    1.000000, 1.000000, 1.000000, 1.000000
  },
  {
    3.293558, 3.287675, 3.281793, 3.275910, 3.122819, 2.996900, 
    2.985870, 2.954540, 3.194080, 3.272640, 3.433830, 3.002840, 
    3.228300, 3.456140, 3.335890, 3.152420, 3.574670, 2.849230, 
    2.002860, 2.182840, 1.954540, 1.986730, 1.908350, 1.657820, 
    1.623290, 1.662690, 1.510320, 1.375820, 1.419890, 1.220120, 
    0.662087, 0.782405, 0.755827, 2.191330, 1.790190, 1.771680, 
    1.814130, 1.391820, 1.303030, 1.242170, 1.168910, 1.255750, 
    1.038260, 1.120300, 1.074110, 0.993337, 1.040780, 0.977912, 
    0.984398, 0.982676, 0.931838, 1.082950, 1.049780, 0.225949, 
    5.383710, 3.584280, 3.070560, 2.479340, 2.305020, 2.148400, 
    1.000000, 1.000000, 1.000000, 1.000000, 1.310010, 1.264220, 
    1.388090, 1.183090, 1.415110, 1.267950, 1.224720, 1.299080, 
    1.433390, 1.361880, 1.460400, 1.464050, 1.275200, 1.449930, 
    1.321960, 1.281420, 1.228370, 1.230360, 1.147990, 1.136030, 
    1.144620, 1.159600, 1.285750, 1.118030, 1.120420, 1.119130, 
    1.091780, 1.247480, 1.327550, 1.106430, 1.099030, 1.150530, 
    1.085429, 1.069589, 1.053206, 1.036276
  }
};

// -------------------------------------------------------------
// Constructor 
// -------------------------------------------------------------
CaloSwApplyWgts_g3::CaloSwApplyWgts_g3(const std::string& type,
                                       const std::string& name,
                                       const IInterface* parent)
  : CaloClusterCorrection(type, name, parent)
{ }

// -------------------------------------------------------------
// Destructor 
// -------------------------------------------------------------
CaloSwApplyWgts_g3::~CaloSwApplyWgts_g3()
{ }

// make correction to one cluster 
void CaloSwApplyWgts_g3::makeCorrection(const EventContext& /*ctx*/,
                                        CaloCluster* cluster) const
{

  

  float eta2 = cluster->etaBE(2); // use second sampling

  float aeta2 = fabs(eta2);
  
  // samplings 0-3 are for the barrel, 4-7 are the endcap

  for (int sampling=0; sampling<8; ++sampling){

    CaloSampling::CaloSample sam = 
      (CaloSampling::CaloSample)(CaloSampling::PreSamplerB+sampling);

    if (cluster->hasSampling (sam)) {

      //    double myene = cluster->energy(sampling);
      // FIXME: Why doesn't passing sam to eSample work here?
      double e = cluster->eSample(sam)*GetWgt(sampling,aeta2);
      cluster->setEnergy(sam,e);
    }
  }

}

float CaloSwApplyWgts_g3::GetWgt(int layer, float aeta) const
{
  if (aeta < m_table_eta[0] || aeta > m_table_eta[s_numEtaBins])
    return m_table_p[layer%4][0];
  else {
    for (int i = 0; i < s_numEtaBins; ++i) 
      {
	//    Check Eta range and do interpolation
	
	if (aeta >= m_table_eta[i] && aeta < m_table_eta[i+1]) 
	  {
	    if ( aeta < 1.35 || aeta > 1.6 ) {
	      return m_table_p[layer%4][i] ;
	    } 
	    else {
	      if ( layer%4 ==0 ) {
		return m_table_p[0][i];  // presampler EC + Barrel
	      } 
	      else {
		if ( layer>0 && layer < 4) {
		  return m_table_p[1][i]; // Weights strips+mid+back barrel
		}
		else 
		  return m_table_p[3][i]; // Weights endcap strips + back +barrel
	      }
	    }
	  }
      }
  }
  
  return m_table_p[0][0] ;
}

    

