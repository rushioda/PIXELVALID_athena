// This file's extension implies that it's C, but it's really -*- C++ -*-.

/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

// $Id: ToolWithConstantsMixin.icc,v 1.6 2009-04-18 02:56:16 ssnyder Exp $
/**
 * @file  ToolWithConstantsMixin.icc
 * @author scott snyder <snyder@bnl.gov>
 * @date March, 2006, updated from June, 2004
 * @brief A mixin class to hold a set of constants for an Algorithm,
 *        Tool, or Service.
 */


#include "AthenaKernel/errorcheck.h"
#include "GaudiKernel/AlgTool.h"
#include "GaudiKernel/Algorithm.h"
#include "GaudiKernel/Service.h"


namespace CaloRec {


namespace TWC { // For internal free functions.


/**
 * @brief Declare a property to the job options service.
 * @param self The object on which the property is to be defined.
 * @param name The property name.
 * @param c The property value.
 *
 * @c self must be dynamically convertible to an @c Algorithm,
 * @c AlgTool, or @c Service.
 */
template <class T>
StatusCode do_declare (ToolWithConstantsMixin* self,
                       const std::string& name,
                       T& c)
{
  if (AlgTool* x = dynamic_cast<AlgTool*> (self)) {
    x->declareProperty (name, c);
    return StatusCode::SUCCESS;
  } else if (Algorithm* x = dynamic_cast<Algorithm*> (self)) {
    x->declareProperty (name, c);
    return StatusCode::SUCCESS;
  } else if (Service* x = dynamic_cast<Service*> (self)) {
    x->declareProperty (name, c);
    return StatusCode::SUCCESS;
  } else {
    REPORT_ERROR_WITH_CONTEXT(StatusCode::FAILURE, self->name())
      << "Not an Algorithm, AlgTool, or Service.";
    return StatusCode::FAILURE;
  }
}


} // namespace TWC


/**
 * @brief Declare a constant.
 * @param name The name of the constant.
 * @param c Variable to receive the constant value.
 * @param deflt If true, then this constant may be defaulted.
 *
 * This should be called from a tool constructor.
 * The @a c variable will be initialized either from the pool
 * database or from job options, as appropriate.  If the initialization
 * is from job options, it won't happen until after the constructor
 * returns.
 *
 * The @a c variable may be a fundamental numeric type, or it may
 * be an instance of one of the @c Array<N> classes.
 */
template <class T>
StatusCode
ToolWithConstantsMixin::declareConstant (const std::string& name,
                                         T& c,
                                         bool deflt /*= false*/)
{
  c = T();
  CHECK( add_constant (makeinfo (name, c, deflt)) );
  return StatusCode (StatusCode::SUCCESS, true);
}


/**
 * @brief Constructor.
 * @param name The name of the constant.
 * @param c Reference to the constant.
 * @param deflt If true, then this constant may be defaulted.
 */
template <class T>
ToolWithConstantsMixin::Propinfo_Val<T>::Propinfo_Val (const std::string& name,
						       T& c,
                                                       bool deflt)
  : Propinfo_Base (name, deflt), m_c(c)
{
}

/**
 * @brief Setting a constant (not an Array) from the DB.
 * @param rep The @c Arrayrep for this constant.
 * @param tool The @c ToolWithConstants instance, for error reporting.
 *
 * The database representation of a constant is Arrayrep event if is a
 * single number. We require that the array size is 1 and take the 
 * element [0]. It is cast from const float to the templated type T.
 */
template <class T>
StatusCode 
ToolWithConstantsMixin::Propinfo_Val<T>::setFromDB (const Arrayrep& rep,
                                                 ToolWithConstantsMixin& tool)
{
  // Check that the dimensions match.
  if (rep.m_data.size()!=1)
    REPORT_ERROR_WITH_CONTEXT (StatusCode::FAILURE, tool.name())
      << "Attempt to initialize a number by an array"; 
  else {
    // Make the assignment. 
    // The element in the array is a float (typedef'd)
    // but T might be any numeric value (e.g. int)
    m_c = static_cast<T>(rep.m_data[0]);
  }
  return StatusCode::SUCCESS;
}


/**
 * @brief Finish up initialization of this constant.
 * @param rep The @c Arrayrep for this constant.
 * @param tool The @c ToolWithConstants instance, for error reporting.
 *
 * This is called from @c setProperty after the property manager
 * has finished its work, and after we've installed the constant
 * in the @c ToolConstants structure.  We get the
 * @c Arrayrep from the @c ToolConstants for this constant.
 *
 * For a simple number, the target will have already been filled
 * in by Gaudi.  However, it turns out that the floating-point
 * parsing done by Gaudi isn't exactly equivalent to that done
 * by C++.  The Array parsing machinery uses the C++ iostream
 * mechanism to do the conversion, and will convert the string
 * `1.525' to the float 1.52499998.  Gaudi, however, uses
 * the Spirit parser, which will convert the same string
 * to the float 1.5250001.  So, reset the target here
 * for consistency.
 */
template <class T>
StatusCode
ToolWithConstantsMixin::Propinfo_Val<T>::set (const Arrayrep& rep,
                                              ToolWithConstantsMixin& /*tool*/)
{
  CxxUtils::Array<0> arr (rep);
  m_c = arr;
  return StatusCode::SUCCESS;
}


/**
 * @brief Constructor.
 * @param name The name of the constant.
 * @param c Reference to the constant.
 * @param deflt If true, then this constant may be defaulted.
 */
template <unsigned int N>
ToolWithConstantsMixin::Propinfo_Array<N>::Propinfo_Array (
  const std::string& name,
  Array<N>& c,
  bool deflt)
  : Propinfo_Base (name, deflt), m_c (c)
{
}


/**
 * @brief Finish up initialization of this constant.
 * @param rep The @c Arrayrep for this constant.
 * @param tool The @c ToolWithConstants instance, for error reporting.
 *
 * This is called from @c setProperty after the property manager
 * has finished its work, and after we've installed the constant
 * in the @c ToolConstants structure.  We get the
 * @c Arrayrep from the @c ToolConstants for this constant.
 *
 * For an @c Array<N>, we need to initialize the actual @c Array<N>
 * instance from the @c Arrayrep we've gotten from the
 * @c ToolConstants structure.
 */
template <unsigned int N>
StatusCode
ToolWithConstantsMixin::Propinfo_Array<N>::set (const Arrayrep& rep,
                                                ToolWithConstantsMixin& tool)
{
  // Check that the dimensions match.
  if (rep.m_shape.size() != N) {
    REPORT_ERROR_WITH_CONTEXT (StatusCode::FAILURE, tool.name())
      << "Dimensionality from job options (" << rep.m_shape.size()
      << ") doesn't match declared dimensionality (" << N
      << ") for constant " << m_name;
    return StatusCode::FAILURE;
  }

  // Make the assignment.
  m_c = CaloRec::Array<N> (rep);
  return StatusCode::SUCCESS;
}


/**
 * @brief Setting an Array-constant from the DB.
 * @param rep The @c Arrayrep for this constant.
 * @param tool The @c ToolWithConstants instance, for error reporting.
 *
 * For arrays, we can simply call the normal set function
 */
template <unsigned int N>
StatusCode
ToolWithConstantsMixin::Propinfo_Array<N>::setFromDB (const Arrayrep& rep,
                                                  ToolWithConstantsMixin& tool)
{
  return set(rep, tool);
} 


/**
 * @brief Construct a new @c Propinfo_* instance for @a c.
 * @param name The name of the constant being declared.
 * @param c The constant being declared.
 * @param deflt If true, then this constant may be defaulted.
 * @return A new instance of a class deriving from @c Propinfo_Base.
 *
 * This family of overloaded functions creates a new instance
 * of a class deriving from @c Propinfo_Base that is appropriate
 * for the type of the constant @c.
 *
 * This one makes a @c Propinfo_Val<T> instance,
 * appropriate for numeric types, and declares it to the property service.
 */
template <class T>
ToolWithConstantsMixin::Propinfo_Base*
ToolWithConstantsMixin::makeinfo (const std::string& name, T& c, bool deflt)
{
  Propinfo_Val<T>* pi = new Propinfo_Val<T> (name, c, deflt);
  StatusCode sc = TWC::do_declare (this, name, c);
  if (sc.isFailure()) {
    REPORT_ERROR (sc) << "Error from property service when declaring " << name;
    delete pi;
    return 0;
  }
  return pi;
}


/**
 * @brief Construct a new @c Propinfo_* instance for @a c.
 * @param name The name of the constant being declared.
 * @param c The constant being declared.
 * @param deflt If true, then this constant may be defaulted.
 * @return A new instance of a class deriving from @c Propinfo_Base.
 *
 * This family of overloaded functions creates a new instance
 * of a class deriving from @c Propinfo_Base that is appropriate
 * for the type of the constant @c.
 *
 * This one makes a @c Propinfo_Array<N> instance,
 * appropriate for multidimensional array types, and declares
 * it to the property service.
 */
template <unsigned int N>
ToolWithConstantsMixin::Propinfo_Base*
ToolWithConstantsMixin::makeinfo (const std::string& name,
                                  Array<N>& c,
                                  bool deflt)
{
  Propinfo_Array<N>* pi =  new Propinfo_Array<N> (name, c, deflt);

  // The property service doesn't know about @c Array<N>, so we can't
  // declare it directly.  Instead, we give it a string buffer; we'll
  // do the conversion later.
  StatusCode sc = TWC::do_declare (this, name, pi->m_buf);
  if (sc.isFailure()) {
    REPORT_ERROR (sc) << "Error from property service when declaring " << name;
    delete pi;
    return 0;
  }

  // We can get rid of the property string at this point.
  // These can potentially be very large!
  pi->m_buf.clear();
  return pi;
}


} // namespace CaloRec
