#include "MyAnalysis/CreateHits.h"
#include "GaudiKernel/Property.h"
#include "GaudiKernel/MsgStream.h"
#include "GaudiKernel/NTuple.h"

#include "LArSimEvent/LArHit.h"
#include "LArSimEvent/LArHitContainer.h"
#include "Identifier/Identifier.h"
#include "CaloIdentifier/CaloIdManager.h"



namespace CreateHits {

  //Constructor
  CreateHits::CreateHits(const std::string& name, ISvcLocator* pSvcLocator):
    Algorithm(name,pSvcLocator){
  }
  
  //__________________________________________________________________________
  //Destructor
  CreateHits::~CreateHits()
  {
    MsgStream log( messageService(), name() ) ;
    log << MSG::DEBUG << "CreateHits destructor called" << endreq;
  }
  //__________________________________________________________________________
  StatusCode CreateHits::initialize()
  {
    
    MsgStream log( messageService(), name() );
    log << MSG::DEBUG <<"CreateHits initialize()" << endreq;
    StatusCode sc;

    // Get the StoreGateSvc
    sc = service("StoreGateSvc", m_sgSvc);
    if (sc.isFailure()) {
      log << MSG::ALWAYS << "No StoreGate!!!!!!!" << endreq;
      return StatusCode::FAILURE;
    }

    sc = service ( "DetectorStore" , detStore ) ;
    if (sc.isFailure()) 
    {
      log    << MSG::ERROR
             << "Unable to access pointer to DetectorStore"
             << endreq;
      return StatusCode::FAILURE;
    }


  //retrieve ID helpers
    const DataHandle<CaloIdManager> caloIdMgr;
    sc = detStore->retrieve(caloIdMgr);
    if (sc.isFailure()) {
       log << MSG::ERROR
           << "Unable to retrieve CaloIdManager from DetectoreStore"
           << endreq; 
      return StatusCode::FAILURE;
    }   
    m_larem_id   = caloIdMgr->getEM_ID();

    m_nevt=0;


    return StatusCode::SUCCESS; 
  }
  //__________________________________________________________________________
  StatusCode CreateHits::finalize()
  {
    MsgStream log( messageService(), name() );
    log << MSG::DEBUG <<"CreateHits finalize()" << endreq;
    return StatusCode::SUCCESS; 
  }
  
  //__________________________________________________________________________
  StatusCode CreateHits::execute()
  {
    //.............................................
    
    MsgStream log( messageService(), name() );
    log << MSG::DEBUG << "CreateHits execute()" << endreq;
    StatusCode sc;

    LArHitContainer * HitContainer = new LArHitContainer();
    if (!HitContainer) {
       log << MSG::ERROR << "cannot crete Hit container " << endreq;
       return StatusCode::FAILURE;
    }
   
    sc = m_sgSvc->record(HitContainer,"LArHitEMB");
    if (sc.isFailure()) {
      log << MSG::ERROR << "cannot record hit container in storegate " << endreq;
      return StatusCode::FAILURE;
    }

// loop over hits to create
    for(int i=0;i<60;i++) {
       int bec=1;
       int sampling=2;
       int region=0;
       int eta=10;
       int phi=i;
       double energy=10000.;
       double time=0.5*(((double)i) - 30.);
       Identifier id = m_larem_id->channel_id(bec,sampling,region,eta,phi);
       LArHit * hit = new LArHit(id,energy,time);
       HitContainer->push_back(hit);
    }

    sc = m_sgSvc->setConst(HitContainer);
    if (sc.isFailure()) {
      log << MSG::ERROR << "cannot lock hit container " << endreq;
      return StatusCode::FAILURE;
    }

    return StatusCode::SUCCESS;
 }
 
} // end of namespace bracket
