#include "MyAnalysis/Analysis.h"
#include "GaudiKernel/MsgStream.h"
#include "GaudiKernel/IHistogramSvc.h"
#include "AIDA/IHistogram1D.h"

#include "AtlasDetDescr/AtlasDetectorID.h"
#include "CaloDetDescr/CaloDetDescrElement.h"
#include "LArIdentifier/LArID.h"
#include "Identifier/Identifier.h"
#include "Identifier/IdentifierHash.h"
#include "Identifier/IdContext.h"
#include "LArDetDescr/LArDetDescriptor.h"
#include "LArDetDescr/LArDetDescrManager.h"

#include "LArSimEvent/LArHit.h"
#include "LArSimEvent/LArHitContainer.h"
#include "LArRecEvent/LArCell.h"
#include "LArRecEvent/LArCellContainer.h"
#include "LArRecEvent/LArCluster.h"
#include "LArRecEvent/LArClusterContainer.h"
#include "LArRawEvent/LArRawChannel.h"
#include "LArRawEvent/LArRawChannelContainer.h"
#include "LArRawUtils/LArRawDetSelector.h"




namespace MyAnalysis {

  //Constructor
  Analysis:: Analysis(const std::string& name, ISvcLocator* pSvcLocator):
    Algorithm(name,pSvcLocator){

  }
  
  //__________________________________________________________________________
  //Destructor
  Analysis::~Analysis()
  {
    MsgStream log( messageService(), name() ) ;
    log << MSG::DEBUG << "Analysis destructor called" << endreq;
  }
  //__________________________________________________________________________
  StatusCode Analysis::initialize()
  {
    
    MsgStream log( messageService(), name() );
    log << MSG::DEBUG <<"Analysis initialize()" << endreq;

    // Get the StoreGateSvc
    if (service("StoreGateSvc", m_sgSvc).isFailure()) {
      log << MSG::ALWAYS << "No StoreGate!!!!!!!" << endreq;
    }

// Book histos
    m_hist_celle = 
     histoSvc()->book("/stat/athena/",2001,"Cell energy",500,0.,2.);
    m_hist_map  =
     histoSvc()->book("/stat/athena/",2003,"phi vs eta cells",10,-2.5,2.5,10,0.,6.283185);
    m_hist_map0  =
     histoSvc()->book("/stat/athena/",2004,"phi vs eta samp0",10,-2.5,2.5,10,0.,6.283185);
    m_hist_map1  =
     histoSvc()->book("/stat/athena/",2005,"phi vs eta samp1",10,-2.5,2.5,10,0.,6.283185);
    m_hist_map2  =
     histoSvc()->book("/stat/athena/",2006,"phi vs eta samp2",10,-2.5,2.5,10,0.,6.283185);
    m_hist_map3  =
     histoSvc()->book("/stat/athena/",2007,"phi vs eta samp3",10,-2.5,2.5,10,0.,6.283185);
    m_hist_map4  =
     histoSvc()->book("/stat/athena/",2008,"phi vs eta samp0 EC",10,-2.5,2.5,10,0.,6.283185);
    m_hist_map5  =
     histoSvc()->book("/stat/athena/",2009,"phi vs eta samp1 EC",10,-2.5,2.5,10,0.,6.283185);
    m_hist_map6  =
     histoSvc()->book("/stat/athena/",2010,"phi vs eta samp2 EC",10,-2.5,2.5,10,0.,6.283185);
    m_hist_map7  =
     histoSvc()->book("/stat/athena/",2011,"phi vs eta samp3 EC",10,-2.5,2.5,10,0.,6.283185);

     m_hist_rawe =
     histoSvc()->book("/stat/athena/",2100,"Raw Channel Energy",500,0.,2.);
 
     m_hist_hit0 =
      histoSvc()->book("/stat/athena/",2900,"Nhits EMB",100,0.,5000.);
     m_hist_hit1 =
      histoSvc()->book("/stat/athena/",2901,"Nhits EMEC",100,0.,5000.);
     m_hist_hit2 =
      histoSvc()->book("/stat/athena/",2902,"Nhits HEC",100,0.,5000.);
     m_hist_hit3 =
      histoSvc()->book("/stat/athena/",2903,"Nhits FCAL",100,0.,5000.);
     m_hist_mbe=
       histoSvc()->book("/stat/athena/",2999,"Hit E",500,0.,2.);
     m_hist_mbe2=
       histoSvc()->book("/stat/athena/",2998,"Hit E cut 0.1",100,0.,2.);
     m_hist_mbe3=
       histoSvc()->book("/stat/athena/",2997,"Hit E cut 0.4",100,0.,2.);

     m_hist_b0=
      histoSvc()->book("/stat/athena/",3000,"Cell/hit b0",10,0.,1.5,100,0.,20.);
     m_hist_b1=
      histoSvc()->book("/stat/athena/",3001,"Cell/hit b1",10,0.,1.5,100,0.,20.);
     m_hist_b2=
      histoSvc()->book("/stat/athena/",3002,"Cell/hit b2",10,0.,1.5,100,0.,20.);
     m_hist_b3=
      histoSvc()->book("/stat/athena/",3003,"Cell/hit b3",10,0.,1.5,100,0.,20.);
     m_hist_e0=
      histoSvc()->book("/stat/athena/",3100,"Cell/hit e0",10,1.2,2.5,100,0.,50.);
     m_hist_e1=
      histoSvc()->book("/stat/athena/",3101,"Cell/hit e1",10,1.2,2.5,100,0.,50.);
     m_hist_e2=
      histoSvc()->book("/stat/athena/",3102,"Cell/hit e2",10,1.2,2.5,100,0.,50.);
     m_hist_e3=
      histoSvc()->book("/stat/athena/",3103,"Cell/hit e3",10,1.2,2.5,100,0.,50.);

     m_hist_noib0 =
      histoSvc()->book("/stat/athena/",4000,"Cell noise b0",100,-0.3,0.3);
     m_hist_noib1 =
      histoSvc()->book("/stat/athena/",4001,"Cell noise b0",100,-0.3,0.3);
     m_hist_noib2 =
      histoSvc()->book("/stat/athena/",4002,"Cell noise b2",100,-0.3,0.3);
     m_hist_noib3 =
      histoSvc()->book("/stat/athena/",4003,"Cell noise b3",100,-0.3,0.3);
     m_hist_noie0 =
      histoSvc()->book("/stat/athena/",4100,"Cell noise b0",100,-0.3,0.3);
     m_hist_noie1 =
      histoSvc()->book("/stat/athena/",4101,"Cell noise b0",100,-0.3,0.3);
     m_hist_noie2 =
      histoSvc()->book("/stat/athena/",4102,"Cell noise b2",100,-0.3,0.3);
     m_hist_noie3 =
      histoSvc()->book("/stat/athena/",4103,"Cell noise b3",100,-0.3,0.3);

     m_lar_dd_man = LArDetDescrManager::instance();
     const AtlasDetectorID* atlasId = m_lar_dd_man->get_em_id();
     m_id = atlasId->lar_em();

// initialize hit list
     std::vector <CaloDetDescrElement*>::const_iterator itrDDE,  itrEndDDE;
     int m_ncellem=m_lar_dd_man->em_element_size();
     CellInfo cell0;
     cell0.bec=0;
     cell0.sampling=0;
     cell0.eta=0.; 
     cell0.phi=0.; 
     cell0.Ehit=-9999.;
     cell0.Eraw=-9999.;
     cell0.Ecell=-9999.;
     CellListEM.resize(m_ncellem,cell0);

     itrDDE    = m_lar_dd_man->em_element_begin();
     itrEndDDE = m_lar_dd_man->em_element_end();
     m_idContext = m_lar_dd_man->get_em_id()->channel_context();
     for (;itrDDE!=itrEndDDE;++itrDDE){
       CaloDetDescrElement* caloDDE = (*itrDDE);
       if (caloDDE==0) {
          std::cout << "hole detected calo num EM " << std::endl;
          continue;
       }
       IdentifierHash idHash=0;
       Identifier id=caloDDE->identify() ;
       int iOK= atlasId->get_hash(id,idHash,&m_idContext);
       if (iOK!=0) {
          std::cout << " calodde: cannot make hash from "
                    << atlasId->show_to_string(id) << std::endl;
       }
       else {
          int BvsEC=abs(m_lar_dd_man->get_em_id()->barrel_ec(id));
          int calotype;
          if (BvsEC == 1) calotype=0;
          else calotype=1;

          CellInfo mycell;
          mycell.bec=calotype;
          mycell.sampling= m_lar_dd_man->get_em_id()->sampling(id);
          mycell.eta=caloDDE->eta();
          mycell.phi=caloDDE->phi();
          mycell.Ehit=-9999.;
          mycell.Eraw=-9999.;
          mycell.Ecell=-9999.;
          CellListEM[idHash]=mycell;
       }
     }        


     m_nevt=0;

    return StatusCode::SUCCESS; 
  }
  //__________________________________________________________________________
  StatusCode Analysis::finalize()
  {
    MsgStream log( messageService(), name() );
    log << MSG::DEBUG <<"Analysis finalize()" << endreq;
    return StatusCode::SUCCESS; 
  }
  
  //__________________________________________________________________________
  StatusCode Analysis::execute()
  {
    //.............................................
    
    MsgStream log( messageService(), name() );
    log << MSG::DEBUG << "Analysis execute()" << endreq;


   m_nevt++;
   const AtlasDetectorID* atlasID = m_lar_dd_man->get_em_id();

   log << MSG::INFO << " ***** Event " << m_nevt << endreq;

// reset E list to 0
   int ncell=CellListEM.size();
   int i;
   for(i=0;i<ncell;i++) {
       CellListEM[i].Ehit=-9999.;
       CellListEM[i].Eraw=-9999.;
       CellListEM[i].Ecell=-9999.;
   }

// Loop over LArCells
  const LArCellContainer* cell_container;
  if(m_sgSvc->retrieve(cell_container,"LArEM").isFailure())
  {
    log << MSG::INFO
        << " Could not get pointer to Cell Container " 
        << endreq;
  } else
  {
   LArCellContainer::const_iterator first_cell = cell_container->begin();
   LArCellContainer::const_iterator end_cell   = cell_container->end();
   log << MSG::INFO << "*** Stat loop over LArCells in Myanalysis" << endreq;
   for (; first_cell != end_cell; ++first_cell)
   {
       Identifier cellID = (*first_cell)->ID();
       double eta = (*first_cell)->eta();
       double phi = (*first_cell)->phi();
       double et  = (*first_cell)->et();
       double energy=  (*first_cell)->energy();
       m_hist_celle->fill(energy);
       m_hist_map->fill(eta,phi,et);
       int isamp=CaloSampling::getSampling(**first_cell);
       if (isamp==0) m_hist_map0->fill(eta,phi,et);
       if (isamp==1) m_hist_map1->fill(eta,phi,et);
       if (isamp==2) m_hist_map2->fill(eta,phi,et);
       if (isamp==3) m_hist_map3->fill(eta,phi,et);
       if (isamp==4) m_hist_map4->fill(eta,phi,et);
       if (isamp==5) m_hist_map5->fill(eta,phi,et);
       if (isamp==6) m_hist_map6->fill(eta,phi,et);
       if (isamp==7) m_hist_map7->fill(eta,phi,et);
// fill list
       if (atlasID->is_lar_em(cellID)) {
        IdentifierHash idHash=0;
        int iOK= atlasID->get_hash(cellID,idHash,&m_idContext);
        if (iOK==0) CellListEM[idHash].Ecell = energy;
       }
   }
  } 
//
// Loop over LArRawChannel
  const LArRawChannelContainer* rawchannel_container;
  if(m_sgSvc->retrieve(rawchannel_container,"LArRawChannels").isFailure())
  {
    log << MSG::INFO
        << " Could not get  LArRawChannel container"
        << endreq;
  } else
  {
   log << MSG::INFO 
       << "*** Stat loop over LArRawChannel in Myanalysis" << endreq;
   LArRawDetSelector  selObj(rawchannel_container) ;
   selObj.setDet(m_id);
   LArRawDetSelector::const_iterator f_cell =
                                 selObj.begin();
   LArRawDetSelector::const_iterator l_cell =
                                 selObj.end();
   for (; f_cell != l_cell; ++f_cell)
   {
     const LArRawChannel* hit = (*f_cell) ;
     double energy=hit->energy();            //  energy in MeV from RawChannem
     m_hist_rawe->fill(energy);

     LArSignalChannelID ch_id = hit->channelID();
     ILArSignalChannelService * cablingService =
        LArCablingService::getInstance();
     Identifier  cellID =
        cablingService->cnvToIdentifier(ch_id);
// fill list
     if (atlasID->is_lar_em(cellID)) {
        IdentifierHash idHash=0;
        int iOK= atlasID->get_hash(cellID,idHash,&m_idContext);
        if (iOK==0) CellListEM[idHash].Eraw = energy;
     }

   }
  }


// Loop over LAr hits

  std::vector <std::string> m_HitContainer;

  m_HitContainer.push_back("LArHitEMB");
  m_HitContainer.push_back("LArHitEMEC");
//  m_HitContainer.push_back("LArHitHEC");
//  m_HitContainer.push_back("LArHitFCAL");
  unsigned int iHitContainer;
  log << MSG::INFO << "m_HitContainer.size " << m_HitContainer.size() << endreq;
  for (iHitContainer=0;iHitContainer<m_HitContainer.size();iHitContainer++)
  {
    const LArHitContainer* hit_container ;
    if(m_sgSvc->retrieve(hit_container,m_HitContainer[iHitContainer])
      .isFailure()) {
      log << MSG::INFO << " cannot retrieve hit container " << endreq;
    }  else
    {
       int ihit = 0;
       LArHitContainer::const_iterator hititer;
       for(hititer=hit_container->begin();
           hititer != hit_container->end();hititer++)
       {
          ihit++;
          LArHit* hit = (*hititer);
          m_hist_mbe->fill(hit->energy());
          if (hit->energy()>0.0001) m_hist_mbe2->fill(hit->energy());
          if (hit->energy()>0.0004) m_hist_mbe3->fill(hit->energy());
// fill list
          Identifier cellID=hit->cellID();
          if (atlasID->is_lar_em(cellID)) {
           IdentifierHash idHash=0;
           int iOK= atlasID->get_hash(cellID,idHash,&m_idContext);
           if (iOK==0) CellListEM[idHash].Ehit = hit->energy();
          }
       }
     log << MSG::INFO << " number of hits found " << ihit << endreq;
     double xhit = (double) ihit;
     if (iHitContainer==0) m_hist_hit0->fill(xhit);
     if (iHitContainer==1) m_hist_hit1->fill(xhit);
     if (iHitContainer==2) m_hist_hit2->fill(xhit);
     if (iHitContainer==3) m_hist_hit3->fill(xhit);
    }
  }

// loop over cell and compare energies

  ncell=CellListEM.size();
  for (i=0;i<ncell;i++) {
    double ehit=CellListEM[i].Ehit; 
    double eraw=CellListEM[i].Eraw; 
    double ecell=CellListEM[i].Ecell; 
    int sampling=CellListEM[i].sampling;
    int calotype=CellListEM[i].bec;
    double eta=fabs(CellListEM[i].eta);
    if (ehit > 100.)  {    // 100 MeV cut
//    if (eraw>-999. || ehit >-999. || ecell > -999. ) {
     std::cout << "calo/samp " << calotype << " " << sampling 
     << " energies " << ehit << " " << eraw << " " << ecell << std::endl;
     if (ehit > 0.001) {
      if(calotype==0) {
       if (sampling==0) m_hist_b0->fill(eta,ecell/ehit);
       if (sampling==1) m_hist_b1->fill(eta,ecell/ehit);
       if (sampling==2) m_hist_b2->fill(eta,ecell/ehit);
       if (sampling==3) m_hist_b3->fill(eta,ecell/ehit);
      }else {
       if (sampling==0) m_hist_e0->fill(eta,ecell/ehit);
       if (sampling==1) m_hist_e1->fill(eta,ecell/ehit);
       if (sampling==2) m_hist_e2->fill(eta,ecell/ehit);
       if (sampling==3) m_hist_e3->fill(eta,ecell/ehit);
      }  // barrel vs EC
     }   // cut on Ehit

     if (ehit < -999.) {    // cell with no hit => only noise
      if(calotype==0) {
       if (sampling==0) m_hist_noib0->fill(ecell);
       if (sampling==1) m_hist_noib1->fill(ecell);
       if (sampling==2) m_hist_noib2->fill(ecell);
       if (sampling==3) m_hist_noib3->fill(ecell);
      }else {
       if (sampling==0) m_hist_noie0->fill(ecell);
       if (sampling==1) m_hist_noie1->fill(ecell);
       if (sampling==2) m_hist_noie2->fill(ecell);
       if (sampling==3) m_hist_noie3->fill(ecell);
      }  // barrel vs EC
     }
    }    // cut on OR of energies
  }      // loop over cells

// check cluster

  const LArClusterContainer* cluster_container;
  if(m_sgSvc->retrieve(cluster_container,"LArClusterEM")
      .isFailure()) {
      log << MSG::INFO << " cannot retrieve cluster container " << endreq;
  }  
  else
  {   
    LArClusterContainer::const_iterator clus_iter;
    for(clus_iter=cluster_container->begin();
        clus_iter != cluster_container->end();clus_iter++)
    {
       LArCluster* clus = (*clus_iter);
       std::cout << " **** Cluster Et " << clus->et() << std::endl;
    }
  }

  return StatusCode::SUCCESS;
 }
 
} // end of namespace bracket
