#include "MyAnalysis/Analysis.h"
#include "GaudiKernel/MsgStream.h"

#include "AtlasDetDescr/AtlasDetectorID.h"
#include "CaloDetDescr/CaloDetDescrElement.h"
#include "LArIdentifier/LArID.h"
#include "Identifier/Identifier.h"
#include "Identifier/IdentifierHash.h"
#include "Identifier/IdContext.h"
#include "LArDetDescr/LArDetDescriptor.h"
#include "LArDetDescr/LArDetDescrManager.h"

#include "LArSimEvent/LArHit.h"
#include "LArSimEvent/LArHitContainer.h"
#include "LArRecEvent/LArCell.h"
#include "LArRecEvent/LArCellContainer.h"
#include "LArRecEvent/LArCluster.h"
#include "LArRecEvent/LArClusterContainer.h"
#include "LArRawEvent/LArRawChannel.h"
#include "LArRawEvent/LArRawChannelContainer.h"
#include "LArRawUtils/LArRawDetSelector.h"




namespace MyAnalysis {

  //Constructor
  Analysis:: Analysis(const std::string& name, ISvcLocator* pSvcLocator):
    Algorithm(name,pSvcLocator){

  }
  
  //__________________________________________________________________________
  //Destructor
  Analysis::~Analysis()
  {
    MsgStream log( messageService(), name() ) ;
    log << MSG::DEBUG << "Analysis destructor called" << endreq;
  }
  //__________________________________________________________________________
  StatusCode Analysis::initialize()
  {
    
    MsgStream log( messageService(), name() );
    log << MSG::INFO <<"Analysis initialize()" << endreq;

    // Get the StoreGateSvc
    if (service("StoreGateSvc", m_sgSvc).isFailure()) {
      log << MSG::ALWAYS << "No StoreGate!!!!!!!" << endreq;
    }

     m_lar_dd_man = LArDetDescrManager::instance();
     const AtlasDetectorID* atlasId = m_lar_dd_man->get_em_id();
     m_id = atlasId->lar_em();

     log << MSG::INFO << " end of initialization" << endreq;

     m_nevt=0;

    return StatusCode::SUCCESS; 
  }
  //__________________________________________________________________________
  StatusCode Analysis::finalize()
  {
    MsgStream log( messageService(), name() );
    log << MSG::DEBUG <<"Analysis finalize()" << endreq;
    return StatusCode::SUCCESS; 
  }
  
  //__________________________________________________________________________
  StatusCode Analysis::execute()
  {
    //.............................................
    
    MsgStream log( messageService(), name() );
    log << MSG::INFO << "Analysis execute()" << endreq;


   m_nevt++;

   log << MSG::INFO << " ***** Event " << m_nevt << endreq;

// Loop over LArCells
  int nc=0;
  const LArCellContainer* cell_container;
  if(m_sgSvc->retrieve(cell_container,"LArEM").isFailure())
  {
    log << MSG::INFO
        << " Could not get pointer to Cell Container " 
        << endreq;
  } else
  {
   LArCellContainer::const_iterator first_cell = cell_container->begin();
   LArCellContainer::const_iterator end_cell   = cell_container->end();
   log << MSG::INFO << "*** Start loop over LArCells in Myanalysis" << endreq;
   for (; first_cell != end_cell; ++first_cell)
   {
       nc++;
       Identifier cellID = (*first_cell)->ID();
       double eta = (*first_cell)->eta();
       double phi = (*first_cell)->phi();
       double et  = (*first_cell)->et();
       double energy=  (*first_cell)->energy();
   }
  } 
  log << MSG::INFO << " === Number of Cells " << nc << endreq;
//
// Loop over LArRawChannel
  int nraw=0;
  const LArRawChannelContainer* rawchannel_container;
  if(m_sgSvc->retrieve(rawchannel_container,"LArRawChannels").isFailure())
  {
    log << MSG::INFO
        << " Could not get  LArRawChannel container"
        << endreq;
  } else
  {
   log << MSG::INFO 
       << "*** Start loop over LArRawChannel in Myanalysis" << endreq;
   LArRawDetSelector  selObj(rawchannel_container) ;
   selObj.setDet(m_id);
   LArRawDetSelector::const_iterator f_cell =
                                 selObj.begin();
   LArRawDetSelector::const_iterator l_cell =
                                 selObj.end();
   for (; f_cell != l_cell; ++f_cell)
   {
     const LArRawChannel* hit = (*f_cell) ;
     double energy=hit->energy();            //  energy in MeV from RawChannem
     nraw++;
   }
  }
  log << MSG::INFO << " == Number Raw Channels " << nraw << endreq;


// Loop over LAr hits
  int nh=0;
  std::vector <std::string> m_HitContainer;
 
  m_HitContainer.push_back("LArHitEMB");
  m_HitContainer.push_back("LArHitEMEC");
  m_HitContainer.push_back("LArHitHEC");
  m_HitContainer.push_back("LArHitFCAL");
  unsigned int iHitContainer;
  log << MSG::INFO << "m_HitContainer.size " << m_HitContainer.size() << endreq;
  for (iHitContainer=0;iHitContainer<m_HitContainer.size();iHitContainer++)
  {
    const LArHitContainer* hit_container ;
    if(m_sgSvc->retrieve(hit_container,m_HitContainer[iHitContainer])
      .isFailure()) {
      log << MSG::INFO << " cannot retrieve hit container " << endreq;
    }  else
    {
       int ihit = 0;
       LArHitContainer::const_iterator hititer;
       for(hititer=hit_container->begin();
           hititer != hit_container->end();hititer++)
       {
          nh++;
          ihit++;
          LArHit* hit = (*hititer);
       }
     log << MSG::INFO << " number of hits found " << ihit << endreq;
     double xhit = (double) ihit;
    }
  }

  log << MSG::INFO << " == Number of hits " << nh << endreq;

// check cluster

  const LArClusterContainer* cluster_container;
  if(m_sgSvc->retrieve(cluster_container,"LArClusterEM")
      .isFailure()) {
      log << MSG::INFO << " cannot retrieve cluster container " << endreq;
  }  
  else
  {   
    LArClusterContainer::const_iterator clus_iter;
    for(clus_iter=cluster_container->begin();
        clus_iter != cluster_container->end();clus_iter++)
    {
       LArCluster* clus = (*clus_iter);
       std::cout << " **** Cluster Et " << clus->et() << std::endl;
    }
  }

  return StatusCode::SUCCESS;
 }
 
} // end of namespace bracket
