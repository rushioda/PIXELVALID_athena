/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

// $Id$
/**
 * @file CaloEvent/test/CaloCellContainerTestCommon.icc
 * @author scott snyder <snyder@bnl.gov>
 * @date Aug, 2014
 * @brief Factor out code common between CaloCellContainer
 *        and ConstCaloCellContainer tests.
 */


// Need to define CellVector and CellContainer.


#include "TestTools/random.h"


//using Athena_test::randi;
Athena_test::RNG stlrand;


CaloCell_ID* make_helper (TileID* tile_id)
{
  LArEM_ID*   em_id   = new LArEM_ID;
  LArHEC_ID*  hec_id  = new LArHEC_ID;
  LArFCAL_ID* fcal_id = new LArFCAL_ID;
  LArMiniFCAL_ID* minifcal_id = new LArMiniFCAL_ID;

  IdDictParser* parser = new IdDictParser;
  parser->register_external_entity ("LArCalorimeter",
                                    "IdDictLArCalorimeter.xml");
  IdDictMgr& idd = parser->parse ("IdDictParser/ATLAS_IDS.xml");
  em_id->set_do_neighbours (false);
  em_id->initialize_from_dictionary (idd);
  hec_id->initialize_from_dictionary (idd);
  fcal_id->set_do_neighbours (false);
  fcal_id->initialize_from_dictionary (idd);
  minifcal_id->set_do_neighbours (false);
  minifcal_id->initialize_from_dictionary (idd);
  tile_id->set_do_neighbours (false);
  tile_id->initialize_from_dictionary (idd);

  CaloCell_ID* calo_helper = new CaloCell_ID (em_id,
                                              hec_id,
                                              fcal_id,
                                              minifcal_id,
                                              tile_id);
  calo_helper->initialize_from_dictionary (idd);
  return calo_helper;
}


std::map<Identifier, CaloDetDescriptor*> ddmap;
CaloDetDescriptor* find_dd (int hashid,
                            const CaloCell_ID* helper,
                            const TileID* tile_helper)
{
  Identifier id = helper->cell_id (hashid);
  Identifier reg_id;
  int subcalo = helper->sub_calo (id);
  if (subcalo == CaloCell_ID::TILE) {
    int section = helper->section (id);
    int side = helper->side (id);
    reg_id = helper->region_id (subcalo, section, side, 0);
  }
  else {
    int sampling = helper->sampling (id);
    int posneg = helper->pos_neg (id);
    int region = helper->region (id);
    reg_id = helper->region_id (subcalo, posneg, sampling, region);
  }
  CaloDetDescriptor* dd = ddmap[reg_id];
  if (!dd) {
    dd = new CaloDetDescriptor (reg_id, tile_helper, helper);
    ddmap[reg_id] = dd;
  }
  return dd;
}


CaloCell* make_cell (int hashid,
                     const CaloCell_ID* helper,
                     const TileID* tile_helper)
{
  CaloDetDescriptor* descr = find_dd (hashid, helper, tile_helper);
  CaloDetDescrElement* dde = new DummyDetDescrElement (hashid -
                                                        descr->caloCellMin(),
                                                       0,
                                                       0,
                                                       descr);
  return new CaloCell (dde, 1, 1, 1, CaloGain::LARHIGHGAIN);
}


CellVector make_cells (CaloCell_ID* helper, TileID* tile_helper)
{
  size_t hashmax = helper->calo_cell_hash_max();
  CellVector v;
  v.reserve (hashmax);
  for (size_t i = 0; i < hashmax; i++)
    v.push_back (make_cell (i, helper, tile_helper));
  return v;
}


//============================================================================


void fill_cells1 (CellVector selected_cells[],
                  CellContainer& cont)
{
  CellVector all_cells;
  for (int i=0; i < CaloCell_ID::NSUBCALO; i++) {
    for (size_t j = 0; j < selected_cells[i].size(); j++)
      all_cells.push_back (selected_cells[i][j]);
  }

  std::random_shuffle (all_cells.begin(), all_cells.end(), stlrand);

  for (size_t i = 0; i < all_cells.size(); i++)
    cont.push_back (all_cells[i]);
}


void fill_cells2 (CellVector selected_cells[],
                  CellContainer& cont)
{
  CellVector all_cells;
  for (int i=0; i < CaloCell_ID::NSUBCALO; i++) {
    CellVector vv = selected_cells[i];
    std::random_shuffle (vv.begin(), vv.end(), stlrand);

    if (vv.size() > 0)
      cont.setHasCalo (static_cast<CaloCell_ID::SUBCALO> (i));

    cont.updateCaloBeginIterators (i, cont.size());
    for (size_t j = 0; j < vv.size(); j++)
      cont.push_back (vv[j]);
    cont.updateCaloEndIterators (i, cont.size());
  }
}


void check_cells (const CaloCell_ID* helper,
                  const CellVector& all_cells,
                  CellVector selected_cells[],
                  CellContainer& cont,
                  bool total = false)
{
  assert (!cont.checkOrderedAndComplete());
  assert (cont.empty() || !cont.checkOrdered());
  assert (!cont.isOrderedAndComplete());
  assert (!cont.isOrdered());
  assert (cont.hasTotalSize() == total);

  cont.order();

  assert (cont.checkOrderedAndComplete() == total);
  assert (cont.checkOrdered());
  cont.setIsOrderedAndComplete (total);
  cont.setIsOrdered (true);

  assert (cont.isOrderedAndComplete() == total);
  assert (cont.isOrdered());
  assert (cont.hasTotalSize() == total);

  cont.updateCaloIterators();

  for (int i=0; i < CaloCell_ID::NSUBCALO; i++) {
    CaloCell_ID::SUBCALO ic = static_cast<CaloCell_ID::SUBCALO> (i);
    std::sort (selected_cells[i].begin(),
               selected_cells[i].end(),
               CaloCellContainer::orderWithCaloHash());
    assert (cont.hasCalo(ic) == !selected_cells[i].empty());
    assert (cont.nCellsCalo(ic) == (int)selected_cells[i].size());
#ifndef CONST_CONTAINER
    {
      CaloCellContainer::iterator beg = cont.beginCalo(ic);
      CaloCellContainer::iterator end = cont.endCalo(ic);
      for (size_t j = 0; j < selected_cells[i].size(); j++) {
        assert (beg != end);
        assert (selected_cells[i][j] == *beg);
        ++beg;
      }
      assert (beg == end);
    }
#endif
    {
      CaloCellContainer::const_iterator beg = cont.beginConstCalo(ic);
      CaloCellContainer::const_iterator end = cont.endConstCalo(ic);
      for (size_t j = 0; j < selected_cells[i].size(); j++) {
        assert (beg != end);
        assert (selected_cells[i][j] == *beg);
        ++beg;
      }
      assert (beg == end);
    }
    {
      int beg = cont.indexFirstCellCalo(ic);
      int end = cont.indexLastCellCalo(ic)+1;
      for (size_t j = 0; j < selected_cells[i].size(); j++) {
        assert (beg != end);
        assert (selected_cells[i][j] == cont[beg]);
        ++beg;
      }
      assert (beg == end);
    }
  }

  const int ntry = 100;
  for (int i = 0; i < ntry; i++) {
    int subcalo = Athena_test::randi (CaloCell_ID::NSUBCALO);
    if (selected_cells[subcalo].size() == 0) continue;
    int ndx = Athena_test::randi (selected_cells[subcalo].size());
    const CaloCell* cell = selected_cells[subcalo][ndx];
    int hashid = cell->caloDDE()->calo_hash();
    assert (cont.findCell (hashid) == cell);
    assert (cont[cont.findIndex (hashid)] == cell);
    CaloCellContainer::size_type index;
    const CaloCell* ccell = cell;
    assert (SG::findInContainer (cont, ccell, index) == true);
    assert (cont[index] == cell);
    {
      int hashid2 = (hashid+1) % helper->calo_cell_hash_max();
      index = 0;
      if (cont.findCell (hashid2) == 0) {
        const CaloCell* cc2 = all_cells[hashid2];
        assert (SG::findInContainer(cont, cc2, index) == false);
        assert (index == 0);
      }
    }

    std::vector<IdentifierHash> vi;
    for (size_t j = 0; j < selected_cells[subcalo].size(); j++) {
      vi.push_back (selected_cells[subcalo][j]->caloDDE()->calo_hash());
    }
    std::vector<const CaloCell*> vc;
    cont.findCellVector (vi, vc);
    std::sort (vc.begin(), vc.end(), CaloCellContainer::orderWithCaloHash());
    assert (selected_cells[subcalo].size() == vc.size());
    for (size_t j = 0; j < vc.size(); j++) {
      assert (selected_cells[subcalo][j] == vc[j]);
    }
  }

  assert (cont.findCell (static_cast<unsigned int>(-1)) == 0);
  assert (cont.findIndex (static_cast<unsigned int>(-1)) == -1);
}



typedef void selfcn_t (const CellVector& cells,
                       CellVector selected_cells[]);



void test_gen (const CaloCell_ID* helper,
               selfcn_t* selfcn,
               const CellVector& cells,
               bool total);


//============================================================================
// Complete test.
//


void select_cells1 (const CellVector& cells,
                    CellVector selected_cells[])
{
  for (size_t i = 0; i < cells.size(); i++) {
    int subcalo = cells[i]->caloDDE()->getSubCalo();
    selected_cells[subcalo].push_back (cells[i]);
  }
}


void test1 (const CaloCell_ID* helper, const CellVector& cells)
{
  std::cout << "test1\n";
  test_gen (helper, select_cells1, cells, true);
}


//============================================================================
// Sparse test.
//


void select_cells2gen (const CellVector& cells,
                       CellVector selected_cells[],
                       int n = 100)
{
  CellVector all_cells;
  for (int i = 0; i < n; i++) {
    int ndx;
    do {
      ndx = Athena_test::randi (cells.size());
    } while (std::find (all_cells.begin(), all_cells.end(), cells[ndx]) != 
             all_cells.end());
    all_cells.push_back (cells[ndx]);
    selected_cells[cells[ndx]->caloDDE()->getSubCalo()].push_back (cells[ndx]);
  }
}
void select_cells2 (const CellVector& cells,
                    CellVector selected_cells[])
{
  select_cells2gen (cells, selected_cells, 100);
}
void select_cells2a (const CellVector& cells,
                     CellVector selected_cells[])
{
  select_cells2gen (cells, selected_cells, 1000);
}
void select_cells2z (const CellVector& cells,
                     CellVector selected_cells[])
{
  select_cells2gen (cells, selected_cells, 0);
}


void test2 (const CaloCell_ID* helper, const CellVector& cells)
{
  std::cout << "test2\n";
  test_gen (helper, select_cells2, cells, false);
  test_gen (helper, select_cells2a, cells, false);
  test_gen (helper, select_cells2z, cells, false);
}


//============================================================================
// One subcal.
//


void select_cells3 (const CellVector& cells,
                    CellVector selected_cells[])
{
  for (size_t i = 0; i < cells.size(); i++) {
    if (cells[i]->caloDDE()->getSubCalo() == CaloCell_ID::LAREM) {
      selected_cells[CaloCell_ID::LAREM].push_back (cells[i]);
    }
  }
}


void test3 (const CaloCell_ID* helper, const CellVector& cells)
{
  std::cout << "test3\n";
  test_gen (helper, select_cells3, cells, false);
}



//============================================================================


void test4 (const CaloCell_ID* /*helper*/, const CellVector& cells)
{
  std::cout << "test4\n";
  CellContainer cont (SG::OWN_ELEMENTS);
  assert (cont.ownPolicy() == SG::OWN_ELEMENTS);
  cont.push_back (cells[0]);
  cont.push_back (cells[1]); 
  cont.push_back_fast (cells[2]);

  assert (cont.size() == 3);
  assert (cont[0] == cells[0]);
  assert (cont[1] == cells[1]);
  assert (cont[2] == cells[2]);

  CellVector::value_type old;
  cont.swapElement(0, 0, old);
  cont.swapElement(1, 0, old);
  cont.swapElement(2, 0, old);
}


