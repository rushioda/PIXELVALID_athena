/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

// Generic overlaying code for Identifiable Containers.
//
// Andrei Gaponenko <agaponenko@lbl.gov>, 2006-2009

#include "Identifier/Identifier.h"
#include "Identifier/IdentifierHash.h"

#include "StoreGate/ReadHandle.h"
#include "StoreGate/WriteHandle.h"
#include "CxxUtils/make_unique.h"
 

#include "AthenaBaseComps/AthMsgStreamMacros.h"

#include "DataModel/DataVector.h"

#include <sstream>

namespace Overlay {
  
  template<class IDC_Container> 
  std::string shortPrint(const IDC_Container *container, unsigned maxprint) {
    std::ostringstream os;
    if(container) {
      for(unsigned i=0; i<maxprint; i++) {
	typename IDC_Container::const_iterator p = container->indexFind(i);
	if(p != container->end()) {
	  os<<" "<< (*p)->size();
	}
	else {
	  os<<" *";
	}
      }
    }
    else {
      os<<"(NULL)";
    }
    return os.str();
  }


  //================================================================
  template<class IDC_Container, class OvlAlg>
  void overlayContainerNew(const IDC_Container *dataContainer,
			const IDC_Container *mcContainer,
                        IDC_Container *outputContainer,       
			OvlAlg *parent)
  {
   typedef typename IDC_Container::base_value_type Collection;
   std::cout<<"start overlayContainer"<<std::endl;
   if(parent->msgLvl(MSG::DEBUG)) { parent->msg(MSG::DEBUG)<<"overlayContainerNew<>() begin"<<endmsg; }

   /** Add data from the data container to the output one */
   typename IDC_Container::const_iterator p_data = dataContainer->begin();
   typename IDC_Container::const_iterator p_data_end = dataContainer->end();

   for(; p_data != p_data_end; ++p_data) {
      IdentifierHash hashId = p_data.hashId();
      auto coll_data = std::make_unique<Collection>(hashId);	
      copyCollection(p_data->cptr(),coll_data.get());

      if ( outputContainer->addCollection(coll_data.release(), p_data.hashId()).isFailure() ) {
      	 parent->msg(MSG::WARNING) <<"add data Collection failed for output "<< p_data.hashId()<<endmsg;  
      }
   }     

   /** Add data from the ovl container to the output one */
   typename IDC_Container::const_iterator p_ovl = mcContainer->begin(); 
   typename IDC_Container::const_iterator p_ovl_end = mcContainer->end();

   for(; p_ovl != p_ovl_end; ++p_ovl) {
      IdentifierHash coll_id = p_ovl.hashId();//(*p_ovl)->identify();
      auto coll_ovl = std::make_unique<Collection>(coll_id);	
      copyCollection(p_ovl->cptr(),coll_ovl.get());

      /** The newly created stuff will go to the output EventStore SG */
      auto coll_out = std::make_unique<Collection>(coll_id);
      coll_out->setIdentifier((*p_ovl)->identify());

      /** Look for the same ID in the main StoreGate EventStore */ 
      typename IDC_Container::const_iterator q = outputContainer->indexFind( coll_id );
      if( q != outputContainer->end() ) {
         /** Need to merge the collections
             Retrieve q */
         std::unique_ptr <Collection> coll_data ((Collection *)q->cptr());
         mergeCollectionsNew(coll_data.get(),coll_ovl.get(),coll_out.get(),parent);

         outputContainer->removeCollection(p_ovl.hashId());
         if (outputContainer->addCollection(coll_out.release(), p_ovl.hashId()).isFailure() ) {
	    parent->msg(MSG::WARNING) << "overlay addCollection failed " << endreq; 
         }
      }
      else {
         /** Copy the complete collection from ovl to output, 
             hopefully preserving the "most derived" type of its raw data */ 
         if ( outputContainer->addCollection(coll_ovl.release(), coll_id).isFailure() ) {
            parent->msg(MSG::WARNING) << "add mc Collection failed " << endreq; 
         }
      }
    }
  }


  //================================================================
  template<class IDC_Container, class OvlAlg>
  void overlayContainer(const IDC_Container *dataContainer,
			const IDC_Container *mcContainer,
			IDC_Container *outputContainer,	      
			OvlAlg *parent)
  {
    typedef typename IDC_Container::base_value_type Collection;
    typedef typename Collection::base_value_type Datum;		
 
    if(parent->msgLvl(MSG::DEBUG)) { parent->msg(MSG::DEBUG)<<"overlayContainer<>() begin"<<endmsg; }
    
    // The  MC signal container should typically be smaller than
    // dataContainer, because the latter contains all the noise,
    // min bias and pile up.   Thus we firstly copy data collection to the 
    // output and then merge with MC inputs.

    /** Add data from the data container to the output one */
    typename IDC_Container::const_iterator p_data = dataContainer->begin();
    typename IDC_Container::const_iterator p_data_end = dataContainer->end();
 
    for(; p_data != p_data_end; ++p_data) {
       IdentifierHash hashId = p_data.hashId();
       Identifier ident = p_data->cptr()->identify();
       auto coll_data = std::make_unique<Collection>(ident, hashId); 

       typename Collection::const_iterator firstData = p_data->cptr()->begin();
       typename Collection::const_iterator lastData = p_data->cptr()->end();    
       for (; firstData != lastData; ++firstData) {		       
          Datum* newData = new Datum (*(dynamic_cast<const Datum*>(*firstData)));
          coll_data->push_back(newData);
       }	
   
       if( outputContainer->addCollection(coll_data.release(), p_data.hashId()).isFailure() ) {
          parent->msg(MSG::WARNING) <<"add data Collection failed for output "<< p_data.hashId()<<endmsg; 
       }
    }     

    /** Add data from the ovl container to the output one */
    typename IDC_Container::const_iterator p_ovl = mcContainer->begin(); 
    typename IDC_Container::const_iterator p_ovl_end = mcContainer->end();

    for(; p_ovl != p_ovl_end; ++p_ovl) {
      IdentifierHash coll_id = p_ovl.hashId();//(*p_ovl)->identify();
      Identifier elemId = p_ovl->cptr()->identify();
      auto coll_ovl = std::make_unique<Collection>(elemId, coll_id);		

      typename Collection::const_iterator firstData = p_ovl->cptr()->begin();
      typename Collection::const_iterator lastData = p_ovl->cptr()->end();    
      for (; firstData != lastData; ++firstData) {		       
         Datum* newData = new Datum (*(dynamic_cast<const Datum*>(*firstData)));
         coll_ovl->push_back(newData);
      }	
   	
      /** The newly created stuff will go to the output EventStore SG */
auto coll_out = std::make_unique<Collection>(elemId, coll_id);	    
     
       /** Look for the same ID in the main StoreGate EventStore */ 
       typename IDC_Container::const_iterator q = outputContainer->indexFind(coll_id);
       if( q != outputContainer->end() ) {
       /** Need to merge the collections
           Retrieve q */

          std::unique_ptr <Collection> coll_data ((Collection *)q->cptr());
          parent->mergeCollections(coll_data.get(),coll_ovl.get(),coll_out.get());

          outputContainer->removeCollection(p_ovl.hashId());
          if (outputContainer->addCollection(coll_out.release(), p_ovl.hashId()).isFailure() ) {
	     parent->msg(MSG::WARNING) << "overlay addCollection failed " << endmsg; 
          }
       }
       else {
       /** Copy the complete collection from ovl to output, 
           hopefully preserving the "most derived" type of its raw data */ 
           if ( outputContainer->addCollection(coll_ovl.release(), coll_id).isFailure() ) {
              parent->msg(MSG::WARNING) << "add mc Collection failed " << endmsg; 
           }  
       }   
    }  
 }
} // namespace Overlay

//================================================================
