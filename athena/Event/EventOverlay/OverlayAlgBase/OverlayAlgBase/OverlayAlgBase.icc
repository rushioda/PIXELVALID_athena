/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

#include "StoreGate/DataHandle.h"
#include "StoreGate/StoreGateSvc.h"
#include "AthenaBaseComps/AthMsgStreamMacros.h"
#include <typeinfo>

//================================================================
template <class TypeToBeRemoved>
void OverlayAlgBase::removeAllObjectsOfType(StoreGateSvc* sg) {
  // could use:  templateClassName = abi::__cxa_demangle(typeid(TypeToBeRemoved).name(), 0, 0, &status);
  // but this would be gcc-specific.  So templateClassName is mangled on the output.
  const std::string templateClassName = typeid(TypeToBeRemoved).name();

  const DataHandle<TypeToBeRemoved> data;
  const DataHandle<TypeToBeRemoved> dataEnd;
  if(sg->retrieve(data, dataEnd).isSuccess()) {
    ATH_MSG_DEBUG("removeAllObjectsOfType<"<<templateClassName<<">(): retrieved data for removal");
    for( ; data != dataEnd; data++ ) {
      ATH_MSG_DEBUG("removeAllObjectsOfType<"<<templateClassName<<">(): Working on p="<<data.cptr()<<", key="<<sg->proxy(data.cptr())->name());
      if(!sg->removeDataAndProxy(data.cptr()).isSuccess()) {
        ATH_MSG_WARNING("removeAllObjectsOfType<"<<templateClassName<<">(): problem removing object p="<<data.cptr()<<", key="<<sg->proxy(data.cptr())->name());
      }
    }
  }
  else {
    ATH_MSG_WARNING("removeAllObjectsOfType<"<<templateClassName<<">(): Problem retrieving data for removal");
  }
}

//================================================================
template <class TypeToBeCopied>
void OverlayAlgBase::copyAllObjectsOfType(StoreGateSvc* to, StoreGateSvc *from) {
  // could use:  templateClassName = abi::__cxa_demangle(typeid(TypeToBeCopied).name(), 0, 0, &status);
  // but this would be gcc-specific.  So templateClassName is mangled on the output.
  const std::string templateClassName = typeid(TypeToBeCopied).name();

  typedef std::vector<std::string> KeyList;
  KeyList keys = from->keys<TypeToBeCopied>();
  if(keys.empty()) {
    ATH_MSG_WARNING("copyAllObjectsOfType<"<<templateClassName<<">(): no keys found");
  }


  for(KeyList::const_iterator k=keys.begin(); k!=keys.end(); ++k) {
    std::auto_ptr<TypeToBeCopied> ap(from->retrievePrivateCopy<TypeToBeCopied>(*k));
    ATH_MSG_DEBUG("copyAllObjectsOfType<"<<templateClassName<<">(): Working on p="<<ap.get()<<", key="<<*k);
    if(!to->record(ap, *k).isSuccess()) {
      ATH_MSG_WARNING("copyAllObjectsOfType<"<<templateClassName<<">(): problem recording object p="<<ap.get()<<", key="<<*k);
    }
  }
}

//================================================================
