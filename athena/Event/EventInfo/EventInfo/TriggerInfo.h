/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

#ifndef EVENTINFO_TRIGGERINFO_H
# define EVENTINFO_TRIGGERINFO_H 1
/**
 * @file TriggerInfo.h
 *
 * @brief This class contains trigger related information.
 *
 * @author RD Schaffer <R.D.Schaffer@cern.ch>
 *
 * $Id: TriggerInfo.h,v 1.11 2008-09-13 21:11:41 efeld Exp $
 */

//<<<<<< INCLUDES                                                       >>>>>>

#include <vector>
#include <set>
#include <string>
#include <iostream>

//<<<<<< PUBLIC DEFINES                                                 >>>>>>
//<<<<<< PUBLIC CONSTANTS                                               >>>>>>
//<<<<<< PUBLIC TYPES                                                   >>>>>>
//<<<<<< PUBLIC VARIABLES                                               >>>>>>
//<<<<<< PUBLIC FUNCTIONS                                               >>>>>>
//<<<<<< CLASS DECLARATIONS                                             >>>>>>

/**
 **  @class TriggerInfo
 **
 **  @brief This class contains trigger related information.
 **
 **  Trigger information:
 **
 **    - statusElement: The values and error conditions indicted by
 **                        the Generic field are the same for all
 **                        fragments, while the values and error
 **                        conditions indicated by the Specific field
 **                        have meanings specific to the fragment. A
 **                        non-zero value of this element indicates
 **                        that the event fragment is corrupted,
 **                        e.g. truncated. The information conveyed by
 **                        the status element only refers to the
 **                        fragment of which it is an element.
 **
 **    - extendedLevel1ID: The extended LVL1 ID [3] formed by the 24-bit
 **                        L1ID generated in the TTCrx and the 8-bit
 **                        ECRID implemented in the ROD.
 **
 **    - level1TriggerType: An 8-bit word as generated by the Central
 **                         Trigger Processor and transmitted by the
 **                         TTC system [4]. The remaining 24-bits
 **                         are un-used.
 **
 **    - level1TriggerInfo: result from the LVL1 CTP in three 
 **                         consecutive blocks of 256 bits (8 ints):
 **                         256 bits for the TBP (trigger before prescale) 
 **                         256 bits for the TAP (trigger after prescale
 **                         256 bits for the TAV (trigger after veto).
 **                         The bits are packed into a vector of 32-bit ints.
 **                         The length of the vector should be 24 (=3x8).
 **
 **    - level2TriggerInfo: status of trigger chains after LVL2.
 **                         Each bit represents the logical status of a chain:
 **                           if not prescaled and passes hypothesis cuts,
 **                           or chosen for random pass-through.
 **                         this is the same as TrigDecisionTool::isPassed().
 **                         The bits are packed into a vector of 32-bit ints.
 **                         The length of the vector is not fixed but by 
 **                         convention is no more than 1024 bits.
 **                         The name of the chain corresponding to each bit is 
 **                         available from the trigger configuration in COOL 
 **                         for the run in question
 **
 **    - eventFilterInfo: status of trigger chains after EF.
 **                         The notes given for level2TriggerInfo apply.
 **  
 **    - StreamTag: This element is a string identifying to which
 **                         data stream or data streams the event has
 **                         been assigned.
 **/
class TriggerInfo {
public:

    /// @name typedef:
    //@{
    typedef unsigned int number_type;
    //@}

    /// @name StreamTag class
    //@{
    class StreamTag 
    {
    public:
        StreamTag();
        StreamTag(const std::string& name,
                  const std::string& type,
                  bool obeysLumiblock,
                  const std::set<number_type>& robs = std::set<number_type>(),
                  const std::set<number_type>& dets = std::set<number_type>());

        const std::string&  name () const;
        const std::string&  type () const;
        bool                obeysLumiblock () const;
        const std::set<number_type>  robs() const; ///< Optional list of ROBIDs for PEB
        const std::set<number_type>  dets() const; ///< Optional list of DETIDs for PEB

    private:
        std::string  m_name;
        std::string  m_type;
        bool         m_obeysLumiblock;
        std::set<number_type> m_robs;
        std::set<number_type> m_dets;

    };
        
    /// \name structors
    //@{
    //! empty default constructor (all zero)
    TriggerInfo();

    //! special constructor for LVL1 part only
    TriggerInfo(number_type statusElement,
                number_type extendedLevel1ID,
		number_type level1TriggerType,
		const std::vector<number_type>& level1TriggerInfo);

    //! constructor without level1TriggerInfo
    TriggerInfo(number_type statusElement,
                number_type extendedLevel1ID,
		number_type level1TriggerType,
		const std::vector<number_type>& level2TriggerInfo,
		const std::vector<number_type>& eventFilterInfo,
                const std::vector<StreamTag>&   streamTags);

    //! Full constructor
    TriggerInfo(number_type statusElement,
                number_type extendedLevel1ID,
		number_type level1TriggerType,
		const std::vector<number_type>& level1TriggerInfo,
		const std::vector<number_type>& level2TriggerInfo,
		const std::vector<number_type>& eventFilterInfo,
                const std::vector<StreamTag>&   streamTags);

    // Default copy constructor.
    virtual ~TriggerInfo();
    //@}


    /// \name Trigger information accessors
    //@{
    /// get status element
    number_type                     statusElement     () const;
    /// get extended level1 ID
    number_type                     extendedLevel1ID  () const;
    /// get level1 trigger type
    number_type                     level1TriggerType () const;
    /// get level1 trigger info
    const std::vector<number_type>& level1TriggerInfo () const;
    /// get level2 trigger info
    const std::vector<number_type>& level2TriggerInfo () const;
    /// get event filter trigger info
    const std::vector<number_type>& eventFilterInfo   () const;
    /// get stream tags
    const std::vector<StreamTag>&   streamTags        () const;
    //@}


    /// \name Trigger information setters

    /// set status element
    void setStatusElement     (const number_type statusElement);
    /// set extended level1 ID
    void setExtendedLevel1ID  (const number_type extendedLevel1ID);
    /// set level1 trigger type
    void setLevel1TriggerType (const number_type level1TriggerType);
    /// set level1 trigger info
    void setLevel1TriggerInfo (const std::vector<number_type>& level1TriggerInfo);
    /// set level2 trigger info
    void setLevel2TriggerInfo (const std::vector<number_type>& level2TriggerInfo);
    /// set event filter trigger info
    void setEventFilterInfo   (const std::vector<number_type>& eventFilterInfo);

    /// \name Special setter for StreamTags - allows changes on const object
    //@{
    void setStreamTags(const std::vector<StreamTag>&   streamTags);
    //@}

    /// extraction operators
    friend std::ostream& operator<<(std::ostream& os, const TriggerInfo& rhs);

private:
    number_type               m_statusElement;
    number_type               m_extendedLevel1ID;
    number_type               m_level1TriggerType;
    std::vector<number_type>  m_level1TriggerInfo;
    std::vector<number_type>  m_level2TriggerInfo;
    std::vector<number_type>  m_eventFilterInfo;
    std::vector<StreamTag>    m_streamTags;
};


//<<<<<< INLINE PUBLIC FUNCTIONS                                        >>>>>>

//<<<<<< INLINE MEMBER FUNCTIONS                                        >>>>>>

#endif // EVENTINFO_TRIGGERINFO_H
