// Dear emacs, this is -*- c++ -*-

/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

// $Id: MuonAccessors_v1.icc 745098 2016-05-05 15:47:04Z wleight $

// System include(s):
#include <iostream>
// #include "MuonAccessors_v1.h"
/// Helper macro for managing cluster moment Accessor objects
#define DEFINE_ACCESSOR(TYPE, NAME )                               \
   case xAOD::Muon_v1::NAME:                                                \
   {                                                               \
      static SG::AuxElement::Accessor< TYPE > a( #NAME );          \
      return &a;                                                   \
   }                                                               \
   break;

namespace xAOD {

  // Generic case. Maybe return warning?
  template<class T>
   SG::AuxElement::Accessor< T >*
   parameterAccessorV1( Muon_v1::ParamDef /*type*/ )
   {}
   
  template<>
   SG::AuxElement::Accessor< float >*
   parameterAccessorV1<float>( Muon_v1::ParamDef type ) {
      switch( type ) {
        DEFINE_ACCESSOR( float, spectrometerFieldIntegral        );
        DEFINE_ACCESSOR( float, scatteringCurvatureSignificance  );
        DEFINE_ACCESSOR( float, scatteringNeighbourSignificance  );
        DEFINE_ACCESSOR( float, momentumBalanceSignificance      );
        DEFINE_ACCESSOR( float, segmentDeltaEta                  );
        DEFINE_ACCESSOR( float, segmentDeltaPhi                  );
        DEFINE_ACCESSOR( float, segmentChi2OverDoF               );
        DEFINE_ACCESSOR( float, t0                               );
        DEFINE_ACCESSOR( float, beta                             );
        DEFINE_ACCESSOR( float, annBarrel                        );
        DEFINE_ACCESSOR( float, annEndCap                        );
        DEFINE_ACCESSOR( float, innAngle                         );
        DEFINE_ACCESSOR( float, midAngle                         );
        DEFINE_ACCESSOR( float, msInnerMatchChi2                 );
        DEFINE_ACCESSOR( float, msOuterMatchChi2                 );
        // DEFINE_ACCESSOR( float, msInnerMatchDOF                  ); These ParamDefs are INT and defined below.
        // DEFINE_ACCESSOR( float, msOuterMatchDOF                  );
        DEFINE_ACCESSOR( float, meanDeltaADCCountsMDT            );		
        DEFINE_ACCESSOR( float, CaloLRLikelihood                 );		
        // DEFINE_ACCESSOR( float, CaloMuonIDTag                    ); INT
        DEFINE_ACCESSOR( float, FSR_CandidateEnergy              );		
        DEFINE_ACCESSOR( float, EnergyLoss                       );		
        DEFINE_ACCESSOR( float, ParamEnergyLoss                  );		
        DEFINE_ACCESSOR( float, MeasEnergyLoss                   );		
        DEFINE_ACCESSOR( float, EnergyLossSigma                  );		
        DEFINE_ACCESSOR( float, ParamEnergyLossSigmaPlus         );		
        DEFINE_ACCESSOR( float, ParamEnergyLossSigmaMinus        );		
        DEFINE_ACCESSOR( float, MeasEnergyLossSigma              );		
	//DEFINE_ACCESSOR( float, d0_sa                            );
	//DEFINE_ACCESSOR( float, z0_sa                            );
	//DEFINE_ACCESSOR( float, phi0_sa                          );
	//DEFINE_ACCESSOR( float, theta_sa                         );
	//DEFINE_ACCESSOR( float, qOverP_sa                        );
	//DEFINE_ACCESSOR( float, Eloss_sa                         );
      default:                  
         std::cerr << "xAOD::Muon::parameterAccessorV1 ERROR Unknown float ParamDef ("
                   << type << ") requested.";
         if (type == Muon_v1::msInnerMatchDOF || type == Muon_v1::msOuterMatchDOF || type == Muon_v1::CaloMuonIDTag) 
           std::cerr << " (This type is actually int)"<<std::endl;
         std::cerr << std::endl;
         return 0;
      }
   }
   
   template<>
    SG::AuxElement::Accessor< int >*
    parameterAccessorV1<int>( Muon_v1::ParamDef type ) {
       switch( type ) {
         DEFINE_ACCESSOR( int,   msInnerMatchDOF                  );
         DEFINE_ACCESSOR( int,   msOuterMatchDOF                  );
         DEFINE_ACCESSOR( int,   CaloMuonIDTag                    );
       default:                  
          std::cerr << "xAOD::Muon::parameterAccessorV1 ERROR Unknown integer ParamDef ("
                    << type << ") requested." << std::endl;
          return 0;
       }
    }

} // namespace xAOD
