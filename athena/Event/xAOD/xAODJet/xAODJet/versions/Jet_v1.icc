// Dear emacs, this is -*- c++ -*-

/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

// $Id: Jet_v1.h 569930 2013-11-12 14:50:19Z delsart $

#include "JetAccessorMap_v1.h"
namespace xAOD {
 
  //////////////////////////////////////////////////
  // Implement getters 

  template<class T>
  bool Jet_v1::getAttribute(const std::string &name, T& value) const{
    // build an accessor. AccessorWrapper is nothing more than a standard SG::AuxElement::Accessor for simpe types
    JetAttributeAccessor::AccessorWrapper<T> a(name);
    if(! a.isAvailable( *this) ) { return  false;}
    a.getAttribute(*this,value);
    return true;
  }

  template<class T>
  T Jet_v1::getAttribute(const std::string &name) const {
    // build an accessor. AccessorWrapper is nothing more than a standard SG::AuxElement::Accessor for simpe types
    JetAttributeAccessor::AccessorWrapper<T> a(name);
    return a.getAttribute(*this);
  }
  
  template<class T>
  bool Jet_v1::getAttribute( AttributeID type, T & value ) const {
    // Get the moment accessor by asking the map :
    JetAttributeAccessor::AccessorWrapper< T >* acc = xAOD::JetAttributeAccessor::AccessorMap_v1<T>::accessor( type );
    if( ! acc ) {  return false ;}
    
    // Check if the moment is available:
    if( ! acc->isAvailable( *this ) ) return false;
       
    // Retrieve the moment:
    acc->getAttribute(*this,value);    
    //value =( *acc )( *this );
    return  true;
  }

  template<class T>
  T Jet_v1::getAttribute(AttributeID  type) const {
    JetAttributeAccessor::AccessorWrapper< T >* acc = xAOD::JetAttributeAccessor::AccessorMap_v1<T>::accessor( type );
    if( ! acc ) {throw std::string("Jet_v1::getAttribute(type) with unknown type");} // need a better exception
    return acc->getAttribute(*this);    
  }
  //////////////////////////////////////////////////




  //////////////////////////////////////////////////
  // implement setters
  template<class T>
  void Jet_v1::setAttribute(const std::string &name, const T& v){
    // build an accessor. AccessorWrapper is nothing more than a standard SG::AuxElement::Accessor for simpe types
    JetAttributeAccessor::AccessorWrapper<T> a(name);
    a.setAttribute(*this,v);
  }

  template<class T>
  void Jet_v1::setAttribute( AttributeID type, const T& value ){
    xAOD::JetAttributeAccessor::AccessorMap_v1<T>::accessor( type )->setAttribute(*this,value);
    return;
  }
  //////////////////////////////////////////////////

  

  
  

  //////////////////////////////////////////////////

  
    template<typename T>
    std::vector<const T*> Jet_v1::getAssociatedObjects( const std::string &name) const {
      JetAttributeAccessor::ObjectAccessorWrapper<std::vector<const T*> > a(name);
      return a.getAttribute(*this);      
    }

    template<typename T>
    std::vector<const T*> Jet_v1::getAssociatedObjects( AssoParticlesID type) const {
      JetAttributeAccessor::ObjectAccessorWrapper<std::vector<const T*> > * acc = JetAttributeAccessor::ObjectAccessorMap_v1< std::vector<const T*> >::accessor(type) ;
      
      if(acc) {
        return acc->getAttribute(*this);
      }
      return  std::vector<const T*>();
    }


    template<typename T>
    bool Jet_v1::getAssociatedObjects( const std::string &name, std::vector<const T*>& vec) const {
      JetAttributeAccessor::ObjectAccessorWrapper<std::vector<const T*> > a(name);
      if(! a.isAvailable(*this) ) return false;
      a.getAttribute(*this, vec );
      return true;
    }

    template<typename T>
    bool Jet_v1::getAssociatedObjects( AssoParticlesID type, std::vector<const T*>& vec) const {
      JetAttributeAccessor::ObjectAccessorWrapper<std::vector<const T*> > * acc = JetAttributeAccessor::ObjectAccessorMap_v1< std::vector<const T*> >::accessor(type) ;
      if(!acc) return false;
      if(! acc->isAvailable(*this) ) return false;      
      acc->getAttribute(*this, vec );
      return true;
    }


    template<typename T>
    void Jet_v1::setAssociatedObjects( const std::string &name, const std::vector<const T*>& vec) {
      JetAttributeAccessor::ObjectAccessorWrapper<std::vector<const T*> > a(name);
      a.setAttribute(*this, vec);
    }

    template<typename T>
    void Jet_v1::setAssociatedObjects( AssoParticlesID type, const std::vector<const T*>& vec)  {
      JetAttributeAccessor::ObjectAccessorWrapper<std::vector<const T*> > * acc = JetAttributeAccessor::ObjectAccessorMap_v1< std::vector<const T*> >::accessor(type) ;
      
      if(acc) acc->setAttribute(*this, vec);

    }







    template<typename T>
    const T* Jet_v1::getAssociatedObject( const std::string &name) const {
      JetAttributeAccessor::ObjectAccessorWrapper< T > a(name);
      return a.getAttribute(*this);            
    }

    template<typename T>
    const T* Jet_v1::getAssociatedObject( AssoParticlesID type) const {
      JetAttributeAccessor::ObjectAccessorWrapper<T > * acc = JetAttributeAccessor::ObjectAccessorMap_v1< T >::accessor(type) ;
      
      if(acc) {
        return acc->getAttribute(*this);
      }
      return  NULL;
    }


    template<typename T>
    bool Jet_v1::getAssociatedObject( const std::string &name, const T*& vec) const {
      JetAttributeAccessor::ObjectAccessorWrapper<T > a(name);
      if(! a.isAvailable(*this) ) return false;
      a.getAttribute(*this, vec );
      return true;
    }

    template<typename T>
    bool Jet_v1::getAssociatedObject( AssoParticlesID type, const T*& vec) const {
      JetAttributeAccessor::ObjectAccessorWrapper<T > * acc = JetAttributeAccessor::ObjectAccessorMap_v1< T >::accessor(type) ;
      if(!acc) return false;
      if(! acc->isAvailable(*this) ) return false;
      acc->getAttribute(*this, vec );
      return true;
    }


    template<typename T>
    void Jet_v1::setAssociatedObject( const std::string &name, const  T* vec) {
      JetAttributeAccessor::ObjectAccessorWrapper<T > a(name);
      a.setAttribute(*this, vec);
    }

    template<typename T>
    void Jet_v1::setAssociatedObject( AssoParticlesID type, const  T* vec)  {
      JetAttributeAccessor::ObjectAccessorWrapper<T > * acc = JetAttributeAccessor::ObjectAccessorMap_v1< T >::accessor(type) ;
      
      if(acc) acc->setAttribute(*this, vec);
    }


}

