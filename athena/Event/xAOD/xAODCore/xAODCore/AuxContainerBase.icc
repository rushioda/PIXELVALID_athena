// Dear emacs, this is -*- c++ -*-

/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

// $Id: AuxContainerBase.icc 633391 2014-12-03 15:58:38Z ssnyder $
#ifndef XAODCORE_AUXCONTAINERBASE_ICC
#define XAODCORE_AUXCONTAINERBASE_ICC

// System include(s):
#include <iostream>

// EDM include(s):
#include "AthContainers/AuxTypeRegistry.h"

// Local include(s):
#include "xAODCore/tools/AuxPersVector.h"

#ifndef AUX_VARIABLE

/// Convenience macro for declaring an auxiliary variable
///
/// Should be used in the constructor of the derived class, like:
///   <code>
///      AUX_VARIABLE( etcone20 );
///   </code>
#define AUX_VARIABLE( VAR ) regAuxVar( #VAR, VAR )

#endif // not AUX_VARIABLE

namespace xAOD {

   /// Common code between vector and PackedContainer cases.
   template< typename ELT, typename CONT >
   void AuxContainerBase::regAuxVar1( const std::string& name,
                                      CONT& vec ) {

      // Ask the registry for the number of this variable:
      const auxid_t auxid =
         SG::AuxTypeRegistry::instance().template getAuxID< ELT >( name );

      // Make sure that the internal vector is big enough:
      if( m_vecs.size() <= auxid ) {
         m_vecs.resize( auxid + 1 );
      }

      // Check if this variable name was already registered:
      if( m_vecs[ auxid ] ) {
         std::cout << "WARNING xAOD::AuxContainerBase::regAuxVec "
                   << "Re-registering variable with name \""
                   << name.c_str() << std::endl;
         delete m_vecs[ auxid ];
      }

      // Register the variable:
      m_vecs[ auxid ] = new AuxPersVector< ELT, CONT >( vec );

      // Remember that we are now handling this variable:
      m_auxids.insert( auxid );
      ++m_tick;

      return;
   }

   /// The user is expected to use this function inside the constructor of
   /// the derived class.
   ///
   /// @param name The name of the variable. Same as the C++ variable's name.
   /// @param vec A reference to the auxiliary variable inside the object
   template< typename T >
   void AuxContainerBase::regAuxVar( const std::string& name,
                                     std::vector< T >& vec ) {
     regAuxVar1<T> (name, vec);
   }

   /// The user is expected to use this function inside the constructor of
   /// the derived class.
   ///
   /// @param name The name of the variable. Same as the C++ variable's name.
   /// @param vec A reference to the auxiliary variable inside the object
   template< typename T >
   void AuxContainerBase::regAuxVar( const std::string& name,
                                     SG::PackedContainer< T >& vec ) {
     regAuxVar1<T> (name, vec);
   }

} // namespace xAOD

#endif // XAODCORE_AUXCONTAINERBASE_ICC
