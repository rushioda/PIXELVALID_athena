/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/


// -*-c++-*-

#include "xAODPFlow/versions/PFOAttributesAccessor_v1.h"

namespace xAOD{

  template<class T> void PFO_v1::setAttribute(PFODetails::PFOAttributes AttributeType, const T& anAttribute) {
    (*(PFOAttributesAccessor_v1<T>::accessor(AttributeType)))(*this) = anAttribute;
  }
  
  template<class T> bool PFO_v1::attribute(PFODetails::PFOAttributes AttributeType, T& anAttribute) const {
    
    Accessor<T>* acc = PFOAttributesAccessor_v1<T>::accessor(AttributeType);
    //check if accessor pointer is NULL
    if( ! acc ) {  return false ;}
    //check if variable is avaialable
    if( ! acc->isAvailable( *this ) ) return false;
    //set variable and return true
    anAttribute =( *acc )( *this );
    return  true;
  }

  template<class T> void PFO_v1::setAttribute(const std::string& AttributeType, const T& anAttribute) {

    Accessor<T> acc(AttributeType);
    acc(*this) = anAttribute;

  }

  template<class T> bool PFO_v1::attribute(const std::string& AttributeType, T& anAttribute) const {
    Accessor<T> acc(AttributeType);
    //Check if variable is available
    if( !acc.isAvailable( *this ) ) return false;
    else {
      anAttribute = acc(*this);
      return true;
    }
  }

  // Not good enough to just define the specialisations in the source file -- they must be declared publicly
  /** Setter specialisation for PFOLeptonType */
  template<> void PFO_v1::setAttribute(const std::string& AttributeType, const xAOD::PFODetails::PFOLeptonType& anAttribute);
  /** Getter specialisation for PFOLeptonType */
  template<> bool PFO_v1::attribute(const std::string& AttributeType, xAOD::PFODetails::PFOLeptonType& anAttribute) const;

  /** Setter specialisation for float */
  template<> void PFO_v1::setAttribute(PFODetails::PFOAttributes AttributeType, const float& anAttribute);
  /** Getter specialisation for float */
  template<> bool PFO_v1::attribute(PFODetails::PFOAttributes AttributeType, float& anAttribute) const;


  /** Setter specialisation for double with enum type argument */
  template<> void PFO_v1::setAttribute(PFODetails::PFOAttributes AttributeType, const double& anAttribute);
  /** Getter specialisation for double with enum type argument */
  template<> bool PFO_v1::attribute(PFODetails::PFOAttributes AttributeType, double& anAttribute) const;

  /** Setter specialisation for double with string type argument */
  template<> void PFO_v1::setAttribute(const std::string& AttributeType, const double& anAttribute);
  /** Getter specialisation for double with string type argument */
  template<> bool PFO_v1::attribute(const std::string& AttributeType, double& anAttribute) const;

  template<class T> void PFO_v1::convertLink(ElementLink<IParticleContainer>& IParticleLink, const ElementLink<T>& templateLink) {
   ElementLink<T> tempLink;
   tempLink.setElement(*templateLink);
   tempLink.setStorableObject(templateLink.getStorableObjectRef());
   tempLink.toPersistent();
   IParticleLink.resetWithKeyAndIndex( tempLink.persKey(), tempLink.persIndex() ); 
  }

  

}//namespace xAOD
