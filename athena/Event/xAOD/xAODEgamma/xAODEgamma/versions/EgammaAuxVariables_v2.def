// Dear emacs, this is -*- c++ -*-
//
// This file is used to describe the common variables used by
// ElectronAuxContainer_v1 and PhotonAuxContainer_v1. It's not a
// standalone header! It only becomes meaningful C++ code when a
// proper definition of EGAMMA_AUX_VARIABLE(...) is available.
//
// There are no header guards protecting the file against multiple
// inclusion, as in some cases it may need to be included multiple
// times. (For instance when one piece of code ends up using both
// ElectronAuxContainer and PhotonAuxContainer at the same time.)
//

///@name vector of links to cluster 
/// @{

EGAMMA_AUX_VARIABLE( std::vector< std::vector< ElementLink< CaloClusterContainer > > >,
                     caloClusterLinks );

/// @}

///@name IParticle variables
/// @{

EGAMMA_AUX_VARIABLE( std::vector< float >, pt );
EGAMMA_AUX_VARIABLE( std::vector< float >, eta );
EGAMMA_AUX_VARIABLE( std::vector< float >, phi );
EGAMMA_AUX_VARIABLE( std::vector< float >, m );

/// @}

///@name Covariance Matrix
/// @{

EGAMMA_AUX_VARIABLE( std::vector< std::vector< float > >,
                     EgammaCovarianceMatrix );

/// @}
    
///@name Author
/// @{

EGAMMA_AUX_VARIABLE( std::vector< uint16_t >, author );

/// @}

///@name Data Quality flag
/// @{

EGAMMA_AUX_VARIABLE( std::vector< uint32_t >, OQ );

/// @}
    
/// @name Shower shape details
/// @{

/// Uncalibrated energy (sum of cells) in presampler in a 1x1 window in
/// cells in eta X phi
EGAMMA_AUX_VARIABLE( std::vector< float >, e011 );
/// Uncalibrated energy (sum of cells) in presampler in a 3x3 window in
/// cells in eta X phi
EGAMMA_AUX_VARIABLE( std::vector< float >, e033 );
/// Uncalibrated energy (sum of cells) in strips in a 3x2 window in cells
/// in eta X phi
EGAMMA_AUX_VARIABLE( std::vector< float >, e132 );
/// Uncalibrated energy (sum of cells) in strips in a 15x2 window in cells
/// in eta X phi
EGAMMA_AUX_VARIABLE( std::vector< float >, e1152 );
/// Transverse energy in the first sampling of the hadronic calorimeters
/// behind the cluster calculated from ehad1
EGAMMA_AUX_VARIABLE( std::vector< float >, ethad1 );
/// E<sub>T</sub> leakage into hadronic calorimeter with exclusion of energy
/// in CaloSampling::TileGap3
EGAMMA_AUX_VARIABLE( std::vector< float >, ethad );
/// E leakage into 1st sampling of had calo (CaloSampling::HEC0 +
/// CaloSampling::TileBar0 + CaloSampling::TileExt0)
EGAMMA_AUX_VARIABLE( std::vector< float >, ehad1 );
/// E1/E = fraction of energy reconstructed in the first sampling, where E1 is
/// energy in all strips belonging to the cluster and E is the total energy
/// reconstructed in the electromagnetic calorimeter cluster
EGAMMA_AUX_VARIABLE( std::vector< float >, f1 );
/// Fraction of energy reconstructed in 3rd sampling
EGAMMA_AUX_VARIABLE( std::vector< float >, f3 );
/// E1(3x1)/E = fraction of the energy reconstructed in the first longitudinal
/// compartment of the electromagnetic calorimeter, where E1(3x1) the energy
/// reconstructed in +/-3 strips in eta, centered around the maximum energy
/// strip and E is the energy reconstructed in the electromagnetic calorimeter
EGAMMA_AUX_VARIABLE( std::vector< float >, f1core );
/// E3(3x3)/E fraction of the energy reconstructed in the third compartment of
/// the electromagnetic calorimeter, where E3(3x3), energy in the back
/// sampling, is the sum of the energy contained in a 3x3 window around the
/// maximum energy cell
EGAMMA_AUX_VARIABLE( std::vector< float >, f3core );
/// Uncalibrated energy (sum of cells) of the middle sampling in a rectangle
/// of size 3x3 (in cell units eta X phi)
EGAMMA_AUX_VARIABLE( std::vector< float >, e233 );
/// Uncalibrated energy (sum of cells) of the middle sampling in a rectangle
/// of size 3x5
EGAMMA_AUX_VARIABLE( std::vector< float >, e235 );
/// Uncalibrated energy (sum of cells) of the middle sampling in a rectangle
/// of size 5x5
EGAMMA_AUX_VARIABLE( std::vector< float >, e255 );
/// Uncalibrated energy (sum of cells) of the middle sampling in a rectangle
/// of size 3x7
EGAMMA_AUX_VARIABLE( std::vector< float >, e237 );
/// Uncalibrated energy (sum of cells) of the middle sampling in a rectangle
/// of size 7x7
EGAMMA_AUX_VARIABLE( std::vector< float >, e277 );
/// Uncalibrated energy (sum of cells) of the third sampling in a rectangle
/// of size 3x3
EGAMMA_AUX_VARIABLE( std::vector< float >, e333 );
/// Uncalibrated energy (sum of cells) of the third sampling in a rectangle
/// of size 3x5
EGAMMA_AUX_VARIABLE( std::vector< float >, e335 );
/// Uncalibrated energy (sum of cells) of the third sampling in a rectangle
/// of size 3x7
EGAMMA_AUX_VARIABLE( std::vector< float >, e337 );
/// Uncalibrated energy (sum of cells) of the middle sampling in a rectangle
/// of size 7x7
EGAMMA_AUX_VARIABLE( std::vector< float >, e377 );
/// Shower width using +/-3 strips around the one with the maximal energy
/// deposit: 
///	w3 strips = sqrt{sum(Ei)x(i-imax)^2/sum(Ei)},
/// where i is the number of the strip and imax the strip number of the most
/// energetic one 
EGAMMA_AUX_VARIABLE( std::vector< float >, weta1 );
/// The lateral width is calculated with a window of 3x5 cells using the
/// energy weighted  sum over all cells, which depends on the particle impact
/// point inside the cell:
///   weta2 = sqrt(sum Ei x eta^2)/(sum Ei) -((sum Ei x eta)/(sum Ei))^2,
/// where Ei is the energy of the i-th cell 
EGAMMA_AUX_VARIABLE( std::vector< float >, weta2 );
/// 2nd max in strips calc by summing 3 strips
EGAMMA_AUX_VARIABLE( std::vector< float >, e2ts1 );
/// Energy of the cell corresponding to second energy maximum in the first
/// sampling
EGAMMA_AUX_VARIABLE( std::vector< float >, e2tsts1 );
/// Shower shape in the shower core : [E(+/-3)-E(+/-1)]/E(+/-1), where E(+/-n)
/// is the energy in ± n strips around the strip with highest energy
EGAMMA_AUX_VARIABLE( std::vector< float >, fracs1 );
/// Same as egammaParameters::weta1 but without corrections on particle impact
/// point inside the cell
EGAMMA_AUX_VARIABLE( std::vector< float >, widths1 );
/// Same as egammaParameters::weta2 but without corrections on particle impact
/// point inside the cell
EGAMMA_AUX_VARIABLE( std::vector< float >, widths2 );
/// Relative position in eta within cell in 1st sampling 
EGAMMA_AUX_VARIABLE( std::vector< float >,  poscs1 );
/// Relative position in eta within cell in 2nd sampling
EGAMMA_AUX_VARIABLE( std::vector< float >, poscs2 );
/// Uncorr asymmetry in 3 strips in the 1st sampling 
EGAMMA_AUX_VARIABLE( std::vector< float >, asy1 );
/// Difference between shower cell and predicted track in +/- 1 cells
EGAMMA_AUX_VARIABLE( std::vector< float >, pos );
/// Difference between the track and the shower positions: 
///	sum_{i=i_m-7}^{i=i_m+7}E_i x (i-i_m) / sum_{i=i_m-7}^{i=i_m+7}E_i, 
///	The difference between the track and the shower positions measured 
///	in units of distance between the strips, where i_m is the impact cell 
///	for the track reconstructed in the inner detector and E_i is the energy
///	reconstructed in the i-th cell in the eta direction for constant phi
///   given by the track parameters
EGAMMA_AUX_VARIABLE( std::vector< float >, pos7 );
/// Barycentre in sampling 1 calculated in 3 strips
EGAMMA_AUX_VARIABLE( std::vector< float >, barys1 );
/// Shower width is determined in a window detaxdphi = 0,0625 ×~0,2,
/// corresponding typically to 20 strips in eta :
///   wtot1=sqrt{sum Ei x ( i-imax)^2 / sum Ei},
/// where i is the strip number and imax the strip number of the first local
/// maximum
EGAMMA_AUX_VARIABLE( std::vector< float >, wtots1 );
/// Energy reconstructed in the strip with the minimal value between the first
/// and second maximum
EGAMMA_AUX_VARIABLE( std::vector< float >, emins1 );
/// Energy of strip with maximal energy deposit
EGAMMA_AUX_VARIABLE( std::vector< float >, emaxs1 );
/// 1-ratio of energy in 3x3 over 3x7 cells; 
///	E(3x3) = E0(1x1) + E1(3x1) + E2(3x3) + E3(3x3); E(3x7) =
///      E0(3x3) + E1(15x3) + E2(3x7) + E3(3x7)
EGAMMA_AUX_VARIABLE( std::vector< float >, r33over37allcalo );
/// Core energy in em calo  E(core) = E0(3x3) + E1(15x2) + E2(5x5) + E3(3x5)
EGAMMA_AUX_VARIABLE( std::vector< float >, ecore );
/// Pointing z at vertex reconstructed from the cluster
EGAMMA_AUX_VARIABLE( std::vector< float >, zvertex );
/// Error associated to zvertex 
EGAMMA_AUX_VARIABLE( std::vector< float >, errz );
/// Pointing eta reconstructed from the cluster (first and second sampling)
EGAMMA_AUX_VARIABLE( std::vector< float >, etap );
/// Pointing depth of the shower as calculated in 
EGAMMA_AUX_VARIABLE( std::vector< float >, depth );

/// @}


/// @name Isolation variables
/// @{

/// E<sub>T</sub> in a cone of R=0.45 in calo, with exclusion of a window of
/// size 7x5 in electromagnetic calorimeter and exclude CaloSampling::TileGap3
EGAMMA_AUX_VARIABLE( std::vector< float >, etcone );
/// E<sub>T</sub> in a cone with half-opening angle 0.15, with exclusion of a
/// window of size 7x5 in electromagnetic calorimeter and exclude
/// CaloSampling::TileGap3
EGAMMA_AUX_VARIABLE( std::vector< float >, etcone15 );
/// E<sub>T</sub> in a cone with half-opening angle 0.2, with exclusion of a
/// window of size 7x5 in electromagnetic calorimeter and exclude
/// CaloSampling::TileGap3
EGAMMA_AUX_VARIABLE( std::vector< float >, etcone20 );
/// E<sub>T</sub> in a cone with half-opening angle 0.25, with exclusion of a
/// window of size 7x5 in electromagnetic calorimeter and exclude
/// CaloSampling::TileGap3
EGAMMA_AUX_VARIABLE( std::vector< float >, etcone25 );
/// E<sub>T</sub> in a cone with half-opening angle 0.3, with exclusion of a
/// window of size 7x5 in electromagnetic calorimeter and exclude
/// CaloSampling::TileGap3
EGAMMA_AUX_VARIABLE( std::vector< float >, etcone30 );
/// E<sub>T</sub> in a cone with half-opening angle 0.35, with exclusion of a
/// window of size 7x5 in electromagnetic calorimeter and exclude
/// CaloSampling::TileGap3
EGAMMA_AUX_VARIABLE( std::vector< float >, etcone35 );
/// E<sub>T</sub> in a cone with half-opening angle 0.4, with exclusion of a
/// window of size 7x5 in electromagnetic calorimeter and exclude
/// CaloSampling::TileGap3
EGAMMA_AUX_VARIABLE( std::vector< float >, etcone40 );
/// Summed p<sub>T</sub> of tracks in a cone with half-opening angle 0.2
/// (no zvx cut photons, 1mm electrons)
EGAMMA_AUX_VARIABLE( std::vector< float >, ptcone20 );
/// Summed p<sub>T</sub> of tracks in a cone with half-opening angle 0.3
EGAMMA_AUX_VARIABLE( std::vector< float >, ptcone30 );
/// Summed p<sub>T</sub> of tracks in a cone with half-opening angle 0.4
EGAMMA_AUX_VARIABLE( std::vector< float >, ptcone40 );
/// Number of tracks in a cone with half-opening angle 0.2
EGAMMA_AUX_VARIABLE( std::vector< float >, nucone20 );
/// Number of tracks in a cone with half-opening angle 0.3
EGAMMA_AUX_VARIABLE( std::vector< float >, nucone30 );
/// Number of tracks in a cone with half-opening angle 0.4
EGAMMA_AUX_VARIABLE( std::vector< float >, nucone40 );
/// p<sub>T</sub> corrected E<sub>T</sub> in a cone with half-opening angle 0.15
EGAMMA_AUX_VARIABLE( std::vector< float >, etcone15_ptcorrected );
/// p<sub>T</sub> corrected E<sub>T</sub> in a cone with half-opening angle 0.2
EGAMMA_AUX_VARIABLE( std::vector< float >, etcone20_ptcorrected );
/// p<sub>T</sub> corrected E<sub>T</sub> in a cone with half-opening angle 0.25
EGAMMA_AUX_VARIABLE( std::vector< float >, etcone25_ptcorrected );
/// p<sub>T</sub> corrected E<sub>T</sub> in a cone with half-opening angle 0.3
EGAMMA_AUX_VARIABLE( std::vector< float >, etcone30_ptcorrected );
/// p<sub>T</sub> corrected E<sub>T</sub> in a cone with half-opening angle 0.35
EGAMMA_AUX_VARIABLE( std::vector< float >, etcone35_ptcorrected );
/// p<sub>T</sub> corrected E<sub>T</sub> in a cone with half-opening angle 0.4
EGAMMA_AUX_VARIABLE( std::vector< float >, etcone40_ptcorrected );
/// p<sub>T</sub> + ED corrected E<sub>T</sub> in a cone with half-opening
/// angle 0.2
EGAMMA_AUX_VARIABLE( std::vector< float >, etcone20_corrected );
/// p<sub>T</sub> + ED corrected E<sub>T</sub> in a cone with half-opening
/// angle 0.3
EGAMMA_AUX_VARIABLE( std::vector< float >, etcone30_corrected );
/// p<sub>T</sub> + ED corrected E<sub>T</sub> in a cone with half-opening
/// angle 0.4
EGAMMA_AUX_VARIABLE( std::vector< float >, etcone40_corrected );
/// E<sub>T</sub> in a cone with half-opening angle 0.20
EGAMMA_AUX_VARIABLE( std::vector< float >, topoetcone20 );
/// E<sub>T</sub> in a cone with half-opening angle 0.30
EGAMMA_AUX_VARIABLE( std::vector< float >, topoetcone30 );
/// E<sub>T</sub> in a cone with half-opening angle 0.40
EGAMMA_AUX_VARIABLE( std::vector< float >, topoetcone40 );
/// p<sub>T</sub> corrected E<sub>T</sub> in a cone with half-opening angle 0.4
EGAMMA_AUX_VARIABLE( std::vector< float >, topoetcone40_ptcorrected );
/// Fully corrected E<sub>T</sub> in a cone with half-opening angle 0.4
EGAMMA_AUX_VARIABLE( std::vector< float >, topoetcone40_corrected );

/// @}
