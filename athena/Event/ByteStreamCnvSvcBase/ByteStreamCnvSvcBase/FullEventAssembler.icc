/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

// using namespace EventFormat::RawMemory ; 

#include "GaudiKernel/MsgStream.h"
#include "eformat/Status.h"

//using namespace OFFLINE_FRAGMENTS_NAMESPACE ; 

template <class IDMAP> 
FullEventAssembler<IDMAP>::FullEventAssembler():
  m_runnum(0),m_lvl1_id(0),
  m_rod_version(0),
  m_rob_version(0),
  m_detEvtType(0),
  m_lvl1_trigger_type(0),
  m_bcid(0)
{
}


template <class IDMAP> 
FullEventAssembler<IDMAP>::~FullEventAssembler()
{
  clear();
}



template <class IDMAP> 
void FullEventAssembler<IDMAP>::clear()
{
   // clear stack
   RODMAP::iterator it_rod     = m_rodMap.begin(); 
   RODMAP::iterator it_rod_end = m_rodMap.end(); 
   for(; it_rod!=it_rod_end; ++it_rod)
     delete it_rod->second;
   m_rodMap.clear();

   ROBMAP::iterator it_rob     = m_robMap.begin(); 
   ROBMAP::iterator it_rob_end = m_robMap.end(); 
   for(; it_rob!=it_rob_end; ++it_rob)
     delete it_rob->second;
   m_robMap.clear();

}

template <class IDMAP> 
void FullEventAssembler<IDMAP>::fill(RawEventWrite* re,  MsgStream& log )
{
   m_runnum  = re->run_no() ; 
   m_lvl1_id = re->lvl1_id(); 
   m_lvl1_trigger_type = re->lvl1_trigger_type();
   m_bcid = re->bc_id();

   // ROD to ROB
   RodToRob(m_rodMap,m_robMap,log); 
   // ROB to FullEventFragment 
   RobToEvt(m_robMap,re,log); 
} 


template <class IDMAP> 
typename FullEventAssembler<IDMAP>::RODDATA* 
FullEventAssembler<IDMAP>::getRodData(uint32_t id) 
{   
  RODMAP::iterator itr = m_rodMap.find(id); 

  RODDATA* theROD = 0; 
  if(itr!=m_rodMap.end())
    {
      theROD = (*itr).second; 
    } 
  else 
    {
      theROD = new RODDATA(); 	   
      m_rodMap.insert(RODMAP::value_type(id,theROD)) ; 
    }
  
  return theROD ; 
}


template <class IDMAP> 
void 
FullEventAssembler<IDMAP>::RodToRob(RODMAP& rodMap,
			ROBMAP& robMap,  MsgStream& log ) 
{ 
  if (log.level() <= MSG::DEBUG) {
    log << MSG::DEBUG << " RodToRob " << endmsg;
  }

  // loop over all the RODs 
  RODMAP::iterator it_rod     = rodMap.begin(); 
  RODMAP::iterator it_rod_end = rodMap.end(); 
  for(; it_rod!=it_rod_end; ++it_rod)
    {
      uint32_t rodid = (*it_rod).first; 
      RODDATA*  intv = (*it_rod).second; 
      if (log.level() <= MSG::DEBUG) {
        std::ios_base::fmtflags oflags=log.stream().flags();
        log << MSG::DEBUG << " Rod id = " << MSG::hex << rodid << endmsg;
        log.flags(oflags); // reset precision after use of hex
      }

      // make an ROB id from an ROD id. 
      uint32_t robid = m_idmap.getRobID(rodid); 
      
      // find or make a ROS fragment
      ROBMAP::iterator itr2 = robMap.find(robid); 
      if(itr2!=robMap.end())
	{
          if (log.level() <= MSG::ERROR) {
            std::ios_base::fmtflags oflags=log.stream().flags();
            oflags=log.stream().flags();
            log << MSG::ERROR << " More than one RODs in ROB:" << MSG::hex << (*itr2).first << endmsg;
            log.flags(oflags); // reset precision after use of hex
          }
        }
      else 
        { // Make a new ROBFragment 
	  OFFLINE_FRAGMENTS_NAMESPACE_WRITE::ROBFragment*  theROB 
	    = new OFFLINE_FRAGMENTS_NAMESPACE_WRITE::ROBFragment(robid,m_runnum,m_lvl1_id,m_bcid,
								 m_lvl1_trigger_type,m_detEvtType,intv->size(),
								 &(*intv)[0],eformat::STATUS_BACK);
	  theROB->minor_version(m_rob_version);
	  theROB->rod_minor_version(m_rod_version);
	  robMap.insert(ROBMAP::value_type(robid,theROB)) ; 
        } 
    }
} 


template <class IDMAP> 
void FullEventAssembler<IDMAP>::RobToEvt(ROBMAP& robMap, RawEventWrite* re, MsgStream& log ) 
{
      if (log.level() <= MSG::DEBUG) {
        log << MSG::DEBUG<< " RobToEvt, number of ROBFrag= " << robMap.size() << endmsg;
      }
  OFFLINE_FRAGMENTS_NAMESPACE_WRITE::ROBFragment* theROB; 
  
  ROBMAP::iterator it_rob = robMap.begin(); 
  ROBMAP::iterator it_rob_end = robMap.end(); 
  for(; it_rob!= it_rob_end;++it_rob)
    {
      theROB = (*it_rob).second; 
      std::ios_base::fmtflags oflags=log.stream().flags();
      if (log.level() <= MSG::DEBUG) {
        log << MSG::DEBUG << " RobToEvt: adding ROB " << MSG::hex <<
 	theROB->source_id() << endmsg; 
      log.flags(oflags); // reset precision after use of hex
      }
      re->append((*it_rob).second); 
    } 

  if (log.level() <= MSG::DEBUG) {
    log << MSG::DEBUG << " FullEventFragment is done " << re << endmsg;
  }
}


template <class IDMAP> 
FullEventAssembler<IDMAP>::RODMAP::const_iterator 
FullEventAssembler<IDMAP>::begin() const 
{
  return  m_rodMap.begin();
}


template <class IDMAP> 
FullEventAssembler<IDMAP>::RODMAP::const_iterator 
FullEventAssembler<IDMAP>::end() const 
{ 
  return  m_rodMap.end();
}


template <class IDMAP> 
void FullEventAssembler<IDMAP>::setRodMinorVersion(uint16_t m )
{  
  m_rod_version = m;
}


template <class IDMAP> 
void FullEventAssembler<IDMAP>::setRobMinorVersion(uint16_t m )
{  
  m_rob_version = m;
}


template <class IDMAP> 
void FullEventAssembler<IDMAP>::setDetEvtType(uint32_t m )
{
  m_detEvtType = m;
}


template <class IDMAP> 
void FullEventAssembler<IDMAP>::setLvl1TriggerType(uint8_t m )
{
  m_lvl1_trigger_type = m;
}


template <class IDMAP> 
typename FullEventAssembler<IDMAP>::IDMAP_t& FullEventAssembler<IDMAP>::idMap()
{ 
  return m_idmap ;
}

