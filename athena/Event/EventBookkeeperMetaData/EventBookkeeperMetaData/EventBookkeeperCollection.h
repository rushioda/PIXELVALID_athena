/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

/////////////////////////////////////////////////////////////////// 
// Header file for class EventBookkeeperCollection
// Author: David Cote, September 2008. <david.cote@cern.ch>
/////////////////////////////////////////////////////////////////// 
#ifndef EVENTBOOKKEEPERCOLLECTION_H 
#define EVENTBOOKKEEPERCOLLECTION_H 
 
// STL includes
#include <iostream>

// DataModel includes
#include "DataModel/DataVector.h"
#include "EventBookkeeperMetaData/EventBookkeeper.h"

// CLIDSvc includes (for persistency)
#include "CLIDSvc/CLASS_DEF.h"

class EventBookkeeperCollection: public DataVector<EventBookkeeper> 
{
 public:
  //Default Constructor
  EventBookkeeperCollection();

  //Copy constructor: 
  EventBookkeeperCollection( const EventBookkeeperCollection& rhs );
 
  //Assignment operator: 
  EventBookkeeperCollection& operator=( const EventBookkeeperCollection& rhs ); 

  //Constructor with parameters: to setup the ownership policy
  EventBookkeeperCollection( const SG::OwnershipPolicy own );

  //Normal Destructor for StoreGate
  ~EventBookkeeperCollection();

  //Helper functions
  EventBookkeeper* GetElement( const EventBookkeeper* book );
  void UpdateFromColl( const EventBookkeeperCollection* coll );


 private:
  //Additional functions and data for EventBookkeeperCollection with flat structure 
  //This special mode is only foreseen for dumping in a TTree, please don't use it otherwise
  friend class CutFlowSvc;
  EventBookkeeperCollection* GetCopyWithFlatStructure();
};

inline 
EventBookkeeperCollection::~EventBookkeeperCollection()
{}

//this is automatically generated by: 'clid -m EventBookkeeperCollection'
CLASS_DEF( EventBookkeeperCollection , 1094136276 , 1 )

#endif //> EVENTBOOKKEEPERCOLLECTION_H
