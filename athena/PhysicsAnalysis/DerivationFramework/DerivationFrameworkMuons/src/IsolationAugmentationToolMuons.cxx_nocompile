#include "DerivationFrameworkMuons/IsolationAugmentationToolMuons.h"
#include "xAODCaloEvent/CaloClusterContainer.h"
#include "xAODMuon/MuonAuxContainer.h"
#include "xAODMuon/MuonContainer.h"
#include "xAODMuon/Muon.h"
#include "xAODTracking/TrackParticleContainer.h"
#include "xAODPrimitives/IsolationType.h"
#include "xAODEventShape/EventShape.h"
#include "xAODTracking/VertexContainer.h"
#include "IsolationTool/ITrackIsolationTool.h"
#include "FourMomUtils/P4Helpers.h"
#include "xAODCore/AuxContainerBase.h"
#include <vector>
#include <string>

using namespace xAOD;

namespace DerivationFramework {
  
  IsolationAugmentationToolMuons::IsolationAugmentationToolMuons(const std::string& t,
								 const std::string& n,
								 const IInterface* p) :
    AthAlgTool(t,n,p)
  {
    declareInterface<DerivationFramework::IAugmentationTool>(this);
    declareProperty("MuonContainerName",  m_collNameMu   = "Muons");
    declareProperty("TrackIsolationTool", m_trackIsolationTool, "Handle of the track IsolationTool");
  }
  
  StatusCode IsolationAugmentationToolMuons::initialize()
  {
    
    if (!m_trackIsolationTool.empty())
      ATH_CHECK(m_trackIsolationTool.retrieve());
    
    // Augmenting
    isoDecopt.push_back(new SG::AuxElement::Decorator<float>("ptcone20"));
    isoDecopt.push_back(new SG::AuxElement::Decorator<float>("ptcone30"));
    isoDecopt.push_back(new SG::AuxElement::Decorator<float>("ptcone40"));
    isoDecoptv.push_back(new SG::AuxElement::Decorator<float>("ptvarcone20"));
    isoDecoptv.push_back(new SG::AuxElement::Decorator<float>("ptvarcone30"));
    isoDecoptv.push_back(new SG::AuxElement::Decorator<float>("ptvarcone40"));
    isoDecotp.push_back(new SG::AuxElement::Decorator<float>("topoetcone20"));
    isoDecotp.push_back(new SG::AuxElement::Decorator<float>("topoetcone30"));
    isoDecotp.push_back(new SG::AuxElement::Decorator<float>("topoetcone40"));
    
    return StatusCode::SUCCESS;
  }
  
  StatusCode IsolationAugmentationToolMuons::finalize()
  {
    for (unsigned int ii = 0; ii < isoDecopt.size(); ii++)  delete isoDecopt[ii];
    for (unsigned int ii = 0; ii < isoDecoptv.size(); ii++) delete isoDecoptv[ii];
    for (unsigned int ii = 0; ii < isoDecotp.size(); ii++)  delete isoDecotp[ii];
    return StatusCode::SUCCESS;
  }
  
  StatusCode IsolationAugmentationToolMuons::addBranches() const
  {
    
    // Check if the muons need to be deep copied:
    if( ! evtStore()->tryRetrieve< xAOD::MuonContainer >( m_collNameMu ) ) {
      // Can't use ATH_CHECK here... :-(
      if( deepCopy< xAOD::MuonContainer,
	  xAOD::MuonAuxContainer >( m_collNameMu ).isFailure() ) {
	ATH_MSG_FATAL( "Couldn't deep copy muons" );
	return StatusCode::FAILURE;
      }
    }
    
    // Retrieve data
    const xAOD::MuonContainer* muons = evtStore()->retrieve< const xAOD::MuonContainer >(m_collNameMu);
    if( !muons ) {
      ATH_MSG_ERROR("Couldn't retrieve muon container with key: " << m_collNameMu);
      return StatusCode::FAILURE;
    }
    
    // 
    const std::vector<xAOD::Iso::IsolationType> isoTypes = 
      { xAOD::Iso::ptcone40, 
	xAOD::Iso::ptcone30, 
	xAOD::Iso::ptcone20 };
    const std::vector<xAOD::Iso::IsolationType> isoTypesTP =
      { xAOD::Iso::topoetcone20, 
	xAOD::Iso::topoetcone30, 
	xAOD::Iso::topoetcone40 };

    // retrieve rhomedian
    double rhoCentral = 0.;
    double rhoForward = 0.;
    const xAOD::EventShape *evtShape = 0;
    if (evtStore()->contains<xAOD::EventShape>("DensityForEgammaCentral")) {
      evtShape   = evtStore()->retrieve<xAOD::EventShape>("DensityForEgammaCentral");
      rhoCentral = evtShape->auxdata<float>("Density");
    } else {
      ATH_MSG_WARNING("DensityForEgammaCentral does not exist in evtStore; no ED correction for egamma object with |eta| < 1.5");
      evtShape = 0;
    }
    evtShape = 0;
    if (evtStore()->contains<xAOD::EventShape>("DensityForEgammaForward")) {
      evtShape   = evtStore()->retrieve<xAOD::EventShape>("DensityForEgammaForward");
      rhoForward = evtShape->auxdata<float>("Density");
    } else {
      ATH_MSG_WARNING("DensityForEgammaForward does not exist in evtStore; no ED correction for egamma object with |eta| > 1.5");
      evtShape = 0;
    }


    // primary vertex
    const xAOD::Vertex *vx = 0;
    std::string m_PVXLocation = "PrimaryVertices";
    const xAOD::VertexContainer *vtxC = 0;
    if (evtStore()->contains<xAOD::VertexContainer>(m_PVXLocation)) {
      if (evtStore()->retrieve(vtxC,m_PVXLocation).isFailure()) {
	ATH_MSG_FATAL( "Unable to retrieve " << m_PVXLocation);
	return 0;
      } else {
	if (vtxC->size() == 0) {
	  ATH_MSG_INFO("No vertex in container " << m_PVXLocation);
	  return 0;
        }
	vx= vtxC->front(); // the first one, probably the beam spot if a single one in the container
      }
    }

    
    // Muon consts
    std::vector<float> coneSizes;
    coneSizes.push_back(0.2);
    coneSizes.push_back(0.3);
    coneSizes.push_back(0.4);
    const float coreDR  = 0.1;
    const float coreDR2 = coreDR*coreDR;
    bool m_useEMScale = true;
    
    // retrieve topoclusters
    const xAOD::CaloClusterContainer* caloClusters = 0;
    std::string m_caloClusterLocation = "CaloCalTopoCluster";
    if(evtStore()->retrieve(caloClusters, m_caloClusterLocation).isFailure()) {
      ATH_MSG_FATAL( "Unable to retrieve " << m_caloClusterLocation );
      return false;
    }
    ////////////////
    
    float r2[3]  = { 0.04, 0.09, 0.16 };
    // Loop on muons
    for (xAOD::MuonContainer::const_iterator mIt = muons->begin(); mIt!= muons->end(); ++mIt) {           
      
      const xAOD::Muon *mu = *mIt;


      const xAOD::IParticle* ip = getReferenceParticle(*mu);
      if( !ip ){
	ATH_MSG_WARNING("Failed to obtain reference particle");
	return false;
      }

      // ptcone
      xAOD::TrackIsolation TrackIsoResult;
      bool bsc = m_trackIsolationTool->trackIsolation(TrackIsoResult, *ip, isoTypes, xAOD::ITrackIsolationTool::SubtractionStrategy::UsePointer, vx);
      if (bsc) {
	unsigned int nI = isoTypes.size();
	for (unsigned int i = 0; i < nI; i++) {
	  ATH_MSG_DEBUG("Iso " << i << " = " << TrackIsoResult.ptcones[nI-1-i]/1e3);
	  (*isoDecopt[i])(*mu)  = TrackIsoResult.ptcones[nI-1-i];
	  (*isoDecoptv[i])(*mu) = TrackIsoResult.ptvcones[nI-1-i];
	}
      }
      
      /// topoetcone - DUMMY FOR NOW
      std::vector<float> topoetcones(coneSizes.size(),0.);
      float ecore(0);
      
      /// loop to calulate the energys
      const float eta = mu->eta();
      const float phi = mu->phi();

      const xAOD::TrackParticle *tp = mu->primaryTrackParticle();
      if(!tp){
	ATH_MSG_FATAL( "Unable to retrieve muon track particle" );
	return false;

      }
      float eta_trk = tp->eta();
      float phi_trk = tp->phi();
      float pT_trk = tp->pt();
      float z0_trk = tp->z0()+tp->vz();
      float q = mu->charge();

      float Rbarrel = 1500;
      float Rendcap = 4000;

      float etaC = 0;
      float phiC = 0;
      if(fabs(eta)<1.5){
	etaC = TMath::ASinH(TMath::SinH(eta_trk) + z0_trk / Rbarrel);
	phiC = phi_trk - 0.3 * q * Rbarrel / pT_trk;
      }else{
	etaC = TMath::ASinH(TMath::SinH(eta_trk) / (1 - z0_trk / TMath::Sign(Rendcap,eta_trk)));
	phiC = phi_trk - 0.3 * q *  TMath::Sign(Rendcap,eta_trk) / (pT_trk * TMath::SinH(etaC));
      }

      ATH_MSG_DEBUG("mu eta = " << eta << ", eta_trk = " << eta_trk << ", z0 = " << tp->z0() << ", vz = " << tp->vz() << ", etaC = " << etaC);
      ATH_MSG_DEBUG("mu phi = " << phi << ", phi_trk = " << phi_trk << ", q = " << q << ", phiC = " << phiC);

      for(const xAOD::CaloCluster* cl: *caloClusters) {
	float et = (m_useEMScale ? cl->p4(CaloCluster::State::UNCALIBRATED).Et() : cl->pt() );
	if(et <= 0 || fabs(cl->eta()) > 7.0) continue;
	
	float st = 1./cosh(cl->p4(CaloCluster::State::UNCALIBRATED).Eta());
	float tilegap3_et = cl->eSample(CaloSampling::TileGap3)*st;
	et -= tilegap3_et;
        
	float dPhi = P4Helpers::deltaPhi( cl->phi(), phiC);
	float dEta = cl->eta()-etaC;
	float dr=sqrt(dPhi*dPhi+ dEta*dEta);
        
	if(dr<coreDR) ecore += et;
	for (unsigned int i = 0; i < coneSizes.size(); i++) {
	  if (dr < coneSizes[i]) {
	    topoetcones[i] += et;
	  }
	}
      }
      /// pileup correction
      float rho = rhoCentral;
      if (fabs(mu->eta())>1.5)rho = rhoForward;

      for (int i = 0; i < 3; i++) {
	float toSub = rho*M_PI*(r2[i]-coreDR2);
	float cori  = topoetcones[i]-ecore-toSub;
	ATH_MSG_VERBOSE("Decorating muon, pt = " << mu->pt()
			<< " with corr iso " << cori << " from ori iso " << topoetcones[i] 
			<< " rho = " << rho << " rho*A = " << toSub);
	(*isoDecotp[i])(*mu) = cori;
      }
      
      
    } // end of loop on muons
    
    return StatusCode::SUCCESS; 
  }

  template< class CONTAINER, class AUXSTORE >
  StatusCode
  IsolationAugmentationToolMuons::deepCopy( const std::string& key ) const {
    
    // Let the user know what's happening:
    ATH_MSG_VERBOSE( "Running deepCopy on container: " << key );
    
    // Decide which implementation to call:
    if( evtStore()->template contains< AUXSTORE >( key + "Aux." ) ) {
      if( deepCopyImp< CONTAINER, AUXSTORE >( key ).isFailure() ) {
	ATH_MSG_FATAL( "Couldn't call deepCopyImp with concrete "
		       "auxiliary store" );
	return StatusCode::FAILURE;
      }
    } else if( evtStore()->template contains< xAOD::AuxContainerBase >( key +
									"Aux." ) ) {
      if( deepCopyImp< CONTAINER,
	  xAOD::AuxContainerBase >( key ).isFailure() ) {
	ATH_MSG_FATAL( "Couldn't call deepCopyImp with generic "
		       "auxiliary store" );
	return StatusCode::FAILURE;
      }
    } else {
      ATH_MSG_FATAL( "Couldn't discover auxiliary store type for container \""
		     << key << "\"" );
      return StatusCode::FAILURE;
    }
    
    // Return gracefully:
    return StatusCode::SUCCESS;
  }

  template< class CONTAINER, class AUXSTORE >
  StatusCode
  IsolationAugmentationToolMuons::deepCopyImp( const std::string& key ) const {
    
    // Retrieve the const container:
    const CONTAINER* c = 0;
    ATH_CHECK( evtStore()->retrieve( c, key ) );
    
    // Create the new container:
    CONTAINER* copy = new CONTAINER();
    AUXSTORE* copyAux = new AUXSTORE();
    copy->setStore( copyAux );
    
    // Do the deep copy:
    for( auto oldObj : *c ) {
      auto newObj = new typename CONTAINER::base_value_type();
      copy->push_back( newObj );
      *newObj = *oldObj;
    }
    
    // Do the overwrite:
    ATH_CHECK( evtStore()->overwrite( copy, key, true, false ) );
    ATH_CHECK( evtStore()->overwrite( copyAux, key + "Aux.", true, false ) );
    
    // Return gracefully:
    return StatusCode::SUCCESS;
  }


  const xAOD::IParticle* IsolationAugmentationToolMuons::getReferenceParticle(const xAOD::IParticle& particle) const {
    const TrackParticle* tp = dynamic_cast<const TrackParticle*>(&particle);
    if( tp ) return tp;
    const xAOD::Muon* muon = dynamic_cast<const xAOD::Muon*>(&particle);
    if( muon ) {
      const xAOD::TrackParticle* tp = 0;
      if(muon->inDetTrackParticleLink().isValid()) tp = *muon->inDetTrackParticleLink();
      if( !tp ) tp = muon->primaryTrackParticle();
      if( !tp ) {
	ATH_MSG_WARNING(" No TrackParticle found for muon " );
	return 0;
      }
      return tp;
    }
    return &particle;
  }

    
} // end of namespace

