/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

// $Id$
/**
 * @file D3PDMakerUtils/SingleAssociationTool.icc
 * @author scott snyder <snyder@bnl.gov>
 * @date Aug, 2009
 * @brief Type-safe wrapper for single associator tools.
 */


namespace D3PD {


/**
 * @brief Standard Gaudi tool constructor.
 * @param type The name of the tool type.
 * @param name The tool name.
 * @param parent The tool's Gaudi parent.
 */
template <typename TO_T>
SingleAssociationToolTo<TO_T>::SingleAssociationToolTo
  (const std::string& type,
   const std::string& name,
   const IInterface* parent)
  : SingleAssociationToolImpl (type, name, parent)
{
}


/**
 * @brief Return the type of object retrieved by this tool.
 */
template <typename TO_T>
const std::type_info&
SingleAssociationToolTo<TO_T>::typeinfo () const
{
  return typeid (TO_T);
}


/**
 * @brief Release an object retrieved from the association.
 * @param p The object to release.
 *
 * Call this when you are done with the object returned by
 * @c get().  The default implementation is a no-op,
 * but if the association dynamically allocated the object which
 * it returned, this gives it a chance to free it.
 */
template <typename TO_T>
void
SingleAssociationToolTo<TO_T>::releaseObject (const typename SelectType<TO_T, 0>::type* /*p*/)
{
}


/**
 * @brief Release an object retrieved from the association.
 * @param p The object to release.
 *
 * Call this when you are done with the object returned by
 * @c getUntyped().  The default implementation is a no-op,
 * but if the association dynamically allocated the object which
 * it returned, this gives it a chance to free it.
 */
template <typename TO_T>
void
SingleAssociationToolTo<TO_T>::releaseObjectUntyped (const void* p)
{
  releaseObject (reinterpret_cast<const typename SelectType<TO_T, 0>::type*> (p));
}


//=========================================================================


/**
 * @brief Standard Gaudi tool constructor.
 * @param type The name of the tool type.
 * @param name The tool name.
 * @param parent The tool's Gaudi parent.
 */
template <typename FROM_T, typename TO_T>
SingleAssociationTool<FROM_T, TO_T>::SingleAssociationTool
  (const std::string& type,
   const std::string& name,
   const IInterface* parent)
    : SingleAssociationToolTo<TO_T> (type, name, parent)
{
}


/**
 * @brief Return the target object.
 * @param p The source object for the association.
 *
 * Return the target of the association, or 0.
 * Should be of the type given by @c typeinfo.
 */
template <typename FROM_T, typename TO_T>
const void*
SingleAssociationTool<FROM_T, TO_T>::getUntyped (const void* p)
{
  const FROM_T* pp =
    reinterpret_cast<const FROM_T*> (this->doConversion (p));
  if (!pp) return 0;
  return get (*pp);
}


/**
 * @brief Return the @c std::type_info for the source of the association.
 */
template <typename FROM_T, typename TO_T>
const std::type_info&
SingleAssociationTool<FROM_T, TO_T>::fromTypeinfo () const
{
  return typeid (FROM_T);
}


} // namespace D3PD
