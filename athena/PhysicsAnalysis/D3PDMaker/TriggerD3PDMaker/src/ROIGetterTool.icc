// Dear emacs, this is -*- c++ -*-

/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

// $Id: ROIGetterTool.icc 272868 2010-01-12 17:10:09Z krasznaa $
#ifndef TRIGGERD3PDMAKER_ROIGETTERTOOL_ICC
#define TRIGGERD3PDMAKER_ROIGETTERTOOL_ICC

// Athena/Gaudi include(s):
#include "AthenaKernel/errorcheck.h"

namespace D3PD {

   template< class ROIType >
   ROIGetterTool< ROIType >::ROIGetterTool( const std::string& type,
                                            const std::string& name,
                                            const IInterface* parent,
                                            const std::vector< ROIType >& ( LVL1_ROI::*getterFunction )() const )
      : ROIGetterToolImpl( type, name, parent ), m_getterFunction( getterFunction ),
        m_itr_valid( false ) {

   }

   template< class ROIType >
   const std::type_info& ROIGetterTool< ROIType >::elementTypeinfo() const {

      return typeid( ROIType );
   }

   template< class ROIType >
   StatusCode ROIGetterTool< ROIType >::reset( bool allowMissing ) {

      m_itr_valid = false;

      const LVL1_ROI* lvl1_roi = get( allowMissing );
      if( ! lvl1_roi ) {
         if( allowMissing ) {
            return StatusCode::SUCCESS;
         } else {
            REPORT_ERROR( StatusCode::FAILURE ) << "LVL1_ROI object not available";
            return StatusCode::FAILURE;
         }
      }

      m_itr = ( lvl1_roi->*m_getterFunction )().begin();
      m_end = ( lvl1_roi->*m_getterFunction )().end();
      m_itr_valid = true;

      return StatusCode::SUCCESS;
   }

   template< class ROIType >
   const void* ROIGetterTool< ROIType >::nextUntyped() {

      if( ! m_itr_valid ) return 0;
      if( m_itr == m_end ) return 0;

      const ROIType& roi = *m_itr;
      ++m_itr;

      return &roi;
   }

   template< class ROIType >
   size_t ROIGetterTool< ROIType >::sizeHint( bool allowMissing ) {

      const LVL1_ROI* lvl1_roi = get( allowMissing );
      if( ! lvl1_roi ) {
         if( allowMissing ) {
            return 0;
         } else {
            REPORT_ERROR( StatusCode::FAILURE ) << "LVL1_ROI object not available";
            return 0;
         }
      }

      return ( lvl1_roi->*m_getterFunction )().size();
   }

} // namespace D3PD

#endif // TRIGGERD3PDMAKER_ROIGETTERTOOL_ICC
