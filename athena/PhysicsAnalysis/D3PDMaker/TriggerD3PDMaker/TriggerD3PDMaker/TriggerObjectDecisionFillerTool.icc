// Dear emacs, this is -*- c++ -*-

/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

// $Id$
/**
 * @file TriggerD3PDMaker/src/TriggerObjectDecisionFillerTool.icc
 * @author scott snyder <snyder@bnl.gov>
 * @date Apr, 2010
 * @brief Record which triggers are passed by a given trigger object.
 */
#ifndef TRIGGERD3PDMAKER_TRIGGEROBJECTDECISIONFILLERTOOL_ICC
#define TRIGGERD3PDMAKER_TRIGGEROBJECTDECISIONFILLERTOOL_ICC

#include "TrigObjectMatching/TrigMatchTool.h"
#include "AthenaKernel/errorcheck.h"


namespace D3PD {


/**
 * @brief Standard Gaudi tool constructor.
 * @param type The name of the tool type.
 * @param name The tool name.
 * @param parent The tool's Gaudi parent.
 */
template <class T>
TriggerObjectDecisionFillerTool<T>::TriggerObjectDecisionFillerTool
  (const std::string& type,
   const std::string& name,
   const IInterface* parent)
    : BlockFillerTool<T> (type, name, parent),
      m_impl (*this, name),
      m_metric( new DeltaRDistanceFunctor< T, T >() )
{
}


/**
 * @brief Constructor specifying a metric for the matching
 * @param type The name of the tool type.
 * @param name The tool name.
 * @param parent The tool's Gaudi parent.
 */
template <class T>
TriggerObjectDecisionFillerTool<T>::TriggerObjectDecisionFillerTool
  (const std::string& type,
   const std::string& name,
   const IInterface* parent,
   DistanceFunctor< T, T >* metric)
    : BlockFillerTool<T> (type, name, parent),
      m_impl (*this, name),
      m_metric( metric )
{
}


/** 
 * @brief Destructor.
 */
template <class T>
TriggerObjectDecisionFillerTool<T>::~TriggerObjectDecisionFillerTool()
{
  if( m_metric ) delete m_metric;
}


/**
 * @brief Standard Gaudi initialize method.
 */
template <class T>
StatusCode TriggerObjectDecisionFillerTool<T>::initialize()
{
  CHECK( m_impl.initialize() );
  return StatusCode::SUCCESS;
}


/**
 * @brief Book variables for this block.
 */
template <class T>
StatusCode TriggerObjectDecisionFillerTool<T>::book()
{
  CHECK( m_impl.book() );
  return StatusCode::SUCCESS;
}


/**
 * @brief Fill one block.
 * @param p The input object.
 *
 * This is called once per event.  The caller
 * is responsible for arranging that all the pointers for booked variables
 * are set appropriately upon entry.
 */
template <class T>
StatusCode TriggerObjectDecisionFillerTool<T>::fill (const T& p)
{
   std::vector<std::string> chains =
      m_impl.matchTool()->template chainsPassedByObject<T,T> (&p, 0.01,
                                                              m_metric);
   CHECK( m_impl.fill (chains) );
   return StatusCode::SUCCESS;
}


/**
 * @brief This will be called when the trigger configuration changes.
 */
template <class T>
void TriggerObjectDecisionFillerTool<T>::handle (const Incident& inc)
{
  // Pass to implementation.
  m_impl.handle (inc);
}


} // namespace D3PD


#endif // TRIGGERD3PDMAKER_TRIGGEROBJECTDECISIONFILLERTOOL_ICC
