// Dear emacs, this is -*- c++ -*-

/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

// $Id: TriggerObjectSourceFillerTool.icc 466195 2011-11-03 15:37:04Z ssnyder $
#ifndef TRIGGERD3PDMAKER_TRIGGEROBJECTSOURCEFILLERTOOL_ICC
#define TRIGGERD3PDMAKER_TRIGGEROBJECTSOURCEFILLERTOOL_ICC

// STL include(s):
#include <algorithm>

// Gaudi/Athena include(s):
#include "AthenaKernel/errorcheck.h"

namespace D3PD {

   template< class T >
   TriggerObjectSourceFillerTool< T >
   ::TriggerObjectSourceFillerTool( const std::string& type,
                                    const std::string& name,
                                    const IInterface* parent )
      : BlockFillerTool< T >( type, name, parent ),
        m_trigMatch( "TrigMatchTool/TrigMatchTool" ) {

      BlockFillerTool< T >::declareProperty( "Sources", m_sourceNames,
                       "Pairs of trigger and D3PD variable names.\n"
                       "The trigger name is the name of the (un-prescaled)\n"
                       "trigger chain in which the object must've been\n"
                       "reconstructed. The variable name should be something\n"
                       "shorter. See the EF jet example for details." );
   }

   /**
    * I moved much of the initialization into this function instead of
    * using book(), so that the job would bail earlier if there's a
    * mis-configuration detected.
    */
   template< class T >
   StatusCode TriggerObjectSourceFillerTool< T >::initialize() {

      // Initialize the base class:
      CHECK( BlockFillerTool< T >::initialize() );

      // Retrieve the TrigMatchTool:
      CHECK( m_trigMatch.retrieve() );

      // Check that the configuration makes sense:
      if( m_sourceNames.size() % 2 ) {
         REPORT_MESSAGE( MSG::FATAL )
            << "Odd number of properties received for 'Sources'. "
            << "You should provide 'trigger' - 'variable name' pairs!";
         return StatusCode::FAILURE;
      }

      // Now set up the variable descriptions:
      m_sources.resize( m_sourceNames.size() / 2 );
      for( size_t i = 0; i < m_sources.size(); ++i ) {
         m_sources[ i ].trig = m_sourceNames[ 2 * i ];
         m_sources[ i ].name = m_sourceNames[ 2 * i + 1 ];
      }

      return StatusCode::SUCCESS;
   }

   template< class T >
   StatusCode TriggerObjectSourceFillerTool< T >::book() {

      // Book all the variables:
      typename std::vector< Source >::iterator itr = m_sources.begin();
      typename std::vector< Source >::iterator end = m_sources.end();
      for( ; itr != end; ++itr ) {
         CHECK( this->addVariable( itr->name, itr->var,
                                   "Was the object created in chain '" +
                                   itr->trig + "'" ) );
      }

      return StatusCode::SUCCESS;
   }

   template< class T >
   StatusCode TriggerObjectSourceFillerTool< T >::fill( const T& p ) {

      // Loop over all the variables:
      typename std::vector< Source >::iterator itr = m_sources.begin();
      typename std::vector< Source >::iterator end = m_sources.end();
      for( ; itr != end; ++itr ) {
         // Reset the value to start with:
         *( itr->var ) = false;
         // Get the objects reconstructed by this trigger:
         std::vector< const T* > features =
            m_trigMatch->template getTriggerObjects< T >( itr->trig, false );
         // Check if our object is amongst them:
         typename std::vector< const T* >::const_iterator feature =
            std::find( features.begin(), features.end(), &p );
         // If it is, then set the flag accordingly:
         if( feature != features.end() ) {
            *( itr->var ) = true;
         }
      }

      return StatusCode::SUCCESS;
   }

} // namespace D3PD

#endif // TRIGGERD3PDMAKER_TRIGGEROBJECTSOURCEFILLERTOOL_ICC
