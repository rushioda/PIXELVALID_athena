// Dear emacs, this is -*- c++ -*-

/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

// $Id: TriggerObjectAssociationTool.icc 524222 2012-11-02 16:01:03Z ssnyder $
/**
 * @file TriggerD3PDMaker/TriggerObjectAssociationTool.icc
 * @author scott snyder <snyder@bnl.gov>
 * @date Aug, 2009
 * @brief Associate to a trigger object using TrigObjectMatching.
 */
#ifndef TRIGGERD3PDMAKER_TRIGGEROBJECTASSOCIATIONTOOL_ICC
#define TRIGGERD3PDMAKER_TRIGGEROBJECTASSOCIATIONTOOL_ICC

#include "TrigObjectMatching/TrigMatchTool.h"
#include "FourMomUtils/P4Helpers.h"
#include "AthenaKernel/errorcheck.h"
#include "CxxUtils/fpcompare.h"
#include "boost/type_traits/is_same.hpp"


namespace D3PD {


/**
 * @brief Standard Gaudi tool constructor.
 * @param type The name of the tool type.
 * @param name The tool name.
 * @param parent The tool's Gaudi parent.
 */
template <typename FROM_T, typename TO_T>
TriggerObjectAssociationTool<FROM_T, TO_T>::TriggerObjectAssociationTool
    (const std::string& type,
     const std::string& name,
     const IInterface* parent)
      : Base (type, name, parent),
        m_matchTool ("TrigMatchTool/TrigMatchTool"),
        m_metric( 0 ),
        m_incSvc ("IncidentSvc", name),
        m_valid (false)
{
  this->declareProperty ("MatchTool", m_matchTool,
                         "Trigger object matching tool.");
  this->declareProperty ("IncidentService", m_incSvc,
                         "Gaudi incident service.");
  this->declareProperty ("ChainPattern", m_chainPattern = ".*",
                         "Pattern to use for matching chains.");
  this->declareProperty ("OnlyPassed", m_onlyPassed = true,
                         "If true, only select objects that passed trigger.");
  this->declareProperty ("MaxDR", m_maxDR = 0.1,
                         "Maximum DR for match.");
  this->declareProperty ("WriteDR", m_writeDR = true,
                         "Should we write DR to the tuple?");

  m_dr = 0;
}


/**
 * @brief Standard Gaudi initialize method.
 */
template <typename FROM_T, typename TO_T>
StatusCode TriggerObjectAssociationTool<FROM_T, TO_T>::initialize()
{
  CHECK( m_matchTool.retrieve() );
  CHECK( m_incSvc.retrieve() );

  m_incSvc->addListener (this, "StoreCleared");

  return StatusCode::SUCCESS;
}


/**
 * @brief Create any needed tuple variables.
 */
template <typename FROM_T, typename TO_T>
StatusCode TriggerObjectAssociationTool<FROM_T, TO_T>::book()
{
  if (m_writeDR)
    CHECK( this->addVariable ("dr", m_dr,
                           "DeltaR between the offline and trigger objects.") );
  return StatusCode::SUCCESS;
}


/**
 * @brief Return the target object.
 * @param p The source object for the association.
 *
 * Return the target of the association, or 0.
 */
template <typename FROM_T, typename TO_T>
const TO_T*
TriggerObjectAssociationTool<FROM_T, TO_T>::get (const FROM_T& p)
{
  if (!m_valid) {
    m_matchTool->getTriggerObjects<TO_T> (m_chainPattern, m_onlyPassed)
      .swap (m_cache);
     m_valid = true;
  }

  // Don't just take the first one from the list.
  // Depending on what was used for m_chainPattern, we can get multiple
  // objects at the same eta/phi with different energies.  If we just
  // take the first from the list, the result won't be reproducible
  // from run to run.  So break ties by using @c lessForTriggerAssociation.
  std::vector<const TO_T*> vtmp;
  if( m_metric ) {
     vtmp = m_matchTool->matchToObjects (&p, m_cache, m_maxDR, m_metric);
  } else {
     vtmp = m_matchTool->matchToObjects (&p, m_cache, m_maxDR);
  }

  const TO_T* ret = 0;
  float best_dr = -1;
  BOOST_FOREACH (const TO_T* v, vtmp) {
     float dr;
     if( m_metric ) {
        dr = m_matchTool->distance (v, &p, m_metric);
     } else {
        dr = m_matchTool->distance (v, &p);
     }
     if (!ret) {
        ret = v;
        best_dr = dr;
     }
     else if (CxxUtils::fpcompare::equal (dr, best_dr)) {
        if (lessForTriggerAssociation (this, &p, ret, v))
           ret = v;
     }
     else
        break;
  }

  if (m_writeDR)
    *m_dr = best_dr;

  return ret;
}


/**
 * @brief Handle Gaudi incidents.
 * @param inc The incident to handle.
 */
template <typename FROM_T, typename TO_T>
void TriggerObjectAssociationTool<FROM_T, TO_T>::handle
  (const Incident& inc)
{
  if (inc.type() == "StoreCleared") {
    m_valid = false;
    std::vector<const TO_T*>().swap (m_cache);
  }
}


/**
 * @brief Set a specific metric to be used in the matching
 * @param metric The special functor that defines the metric
 *
 * If a special metric is not set by the derived tool then the default
 * is used.
 */
template <typename FROM_T, typename TO_T>
void TriggerObjectAssociationTool<FROM_T, TO_T>
::setMetric( const DistanceFunctor< TO_T, FROM_T >* metric ) {

   m_metric = metric;
   return;
}


/**
 * @brief Rank results of trigger association.
 * @param tool The tool that calls us.
 * @param p0 The source object for the association.
 * @param p1 First object to compare.
 * @param p2 Second object to compare.
 *
 * When we associate to trigger objects, we may have several candidates
 * at the same (eta, phi).  Just picking the first one is bad, because
 * the ordering of these objects can change from run to run.  So we use
 * this to rank among objects with the same (eta, phi).
 *
 * This version takes an @c I4Momentum and ranks by @c pt.
 */
inline
bool lessForTriggerAssociation (IAlgTool* /*tool*/,
                                const I4Momentum* /*p0*/,
                                const I4Momentum* p1,
                                const I4Momentum* p2)
{
  return CxxUtils::fpcompare::less (p1->pt(), p2->pt());
}


/**
 * @brief Rank results of trigger association.
 * @param tool The tool that calls us.
 * @param p0 The source object for the association.
 * @param p1 First object to compare.
 * @param p2 Second object to compare.
 *
 * When we associate to trigger objects, we may have several candidates
 * at the same (eta, phi).  Just picking the first one is bad, because
 * the ordering of these objects can change from run to run.  So we use
 * this to rank among objects with the same (eta, phi).
 *
 * This version takes generic pointers, and doesn't do any ranking.
 * It only exists to avoid possible compilation errors.
 */
inline
bool lessForTriggerAssociation (IAlgTool* /*tool*/,
                                const void* /*p0*/,
                                const void* /*p1*/,
                                const void* /*p2*/)
{
  return false;
}


} // namespace D3PD

#endif // TRIGGERD3PDMAKER_TRIGGEROBJECTASSOCIATIONTOOL_ICC
