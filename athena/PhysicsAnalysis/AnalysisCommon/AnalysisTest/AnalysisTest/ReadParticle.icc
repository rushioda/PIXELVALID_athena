/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

#include "GaudiKernel/ISvcLocator.h"
#include "GaudiKernel/SmartDataPtr.h"
#include "GaudiKernel/IDataProviderSvc.h"
#include "GaudiKernel/PropertyMgr.h"
#include "GaudiKernel/INTupleSvc.h"

static const int MAX_nParticle = 128;

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

template <class PARTICLE> inline
ReadParticle<PARTICLE>::ReadParticle(const std::string& name, ISvcLocator* pSvcLocator)
  : AthAlgorithm(name, pSvcLocator),
    m_ContainerName("")
{
  // Declare the properties
  declareProperty("NtupleLocID",  m_NtupleLocID);
  declareProperty("ContainerName",m_ContainerName);
  declareProperty("NtuplePrefix", m_prefix);
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

template <class PARTICLE> inline
StatusCode ReadParticle<PARTICLE>::initialize()
{
  ATH_MSG_DEBUG ( "in initialize()" ) ;

  ATH_CHECK( accessNtuple() );

  // add items
  ATH_CHECK( m_ntuplePtr -> addItem (m_prefix+"/nParticle", m_nParticle, 0, MAX_nParticle) );
  ATH_CHECK( m_ntuplePtr -> addItem (m_prefix+"/pt",        m_nParticle,  m_pt) );
  
  return StatusCode::SUCCESS;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

template <class PARTICLE> inline
StatusCode ReadParticle<PARTICLE>::execute()
{
  ATH_MSG_DEBUG ( "in execute()" ) ;

  // Retrieve presistified container
  const PARTICLE * pCont = nullptr;
  ATH_CHECK( evtStore()->retrieve(pCont,m_ContainerName) );
 
  ATH_MSG_DEBUG ( "Container->size() : " << pCont->size() ) ;

  m_nParticle = 0;

  // loop over Particles
  typename PARTICLE::const_iterator itP  = pCont->begin();
  typename PARTICLE::const_iterator itPe = pCont->end();
  for (; itP != itPe; ++itP)
    {
      if (m_nParticle >= MAX_nParticle) break;

      // fill IParticle attributes
      m_pt      [m_nParticle] = (*itP)->pt();

      ATH_MSG_DEBUG ( MSG::dec
                      << "#" << m_nParticle
                      << " pt:"       << m_pt[m_nParticle] ) ;
      
      ++m_nParticle;
    }

  ATH_MSG_DEBUG ( "execute() completed" ) ;
 
 return StatusCode::SUCCESS;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

template <class PARTICLE> inline
StatusCode ReadParticle<PARTICLE>::finalize()
{
  return StatusCode::SUCCESS;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

template <class PARTICLE> inline
StatusCode ReadParticle<PARTICLE>::accessNtuple()
{
  m_NtupleLocID = "/NTUPLES" + m_NtupleLocID ;

  //try to access it  
  NTuplePtr nt(ntupleService(), m_NtupleLocID );

  if (static_cast<int>(nt))
    {
      m_ntuplePtr=nt;
      ATH_MSG_INFO ( "Ntuple " << m_NtupleLocID 
                     << " reaccessed! " ) ;
    } 
  else
    {
      ATH_MSG_FATAL ( "Cannot reaccess " << m_NtupleLocID ) ;
      return StatusCode::FAILURE;
    }

  return StatusCode::SUCCESS;
}


