/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

#include "ParticleEvent/Neutrino.h"
#include "CLHEP/Units/SystemOfUnits.h"

#include <cmath>

template <class LEPTON, class COLL> inline
bool NeutrinoUtils::candidatesFromWMass(LEPTON* lepton, const double pxMiss, const double pyMiss,
					COLL & neutrinoContainer, bool DealWithNegative)
{
  // W mass
  const double WMass = 80.4*CLHEP::GeV;

  // clear output
  neutrinoContainer.clear();

  // solve the quadratic equation
  
  double ptMiss = sqrt (pxMiss*pxMiss + pyMiss*pyMiss);

  double alpha = pow(WMass,2)+pow((pxMiss+lepton->px()),2)+pow((pyMiss+lepton->py()),2)
    -pow(lepton->e(),2);
  
  double beta = 0.5 * ( alpha-pow(ptMiss,2)+pow(lepton->pz(),2) );
  
  double gamma = -( beta*beta - ( pow(lepton->e(),2)*pow(ptMiss,2) ) )
                 / ( pow(lepton->e(),2)-pow(lepton->pz(),2) );

  double lambda = 2*beta*lepton->pz() / (pow(lepton->e(),2)-pow(lepton->pz(),2));

  double delta = pow(lambda,2)-4*gamma;

  // if no solution
  if ( delta < 0 ){
    if ( DealWithNegative ){
      delta = 0;
    }
    else{
      return false;
    }
  }

  delta = sqrt(delta);
  
  // instantiate Neutrino

  double pz = (lambda-delta)/2.0;
  double e  = sqrt(pxMiss*pxMiss+pyMiss*pyMiss+pz*pz);

  Neutrino *nu1 = new Neutrino;
  nu1->set4Mom(CLHEP::HepLorentzVector(pxMiss,pyMiss,pz,e));

  neutrinoContainer.push_back(nu1);
  if ( delta == 0 ) return true;

  pz = (lambda+delta)/2.0;
  e  = sqrt(pxMiss*pxMiss+pyMiss*pyMiss+pz*pz);

  Neutrino *nu2 = new Neutrino;
  nu2->set4Mom(CLHEP::HepLorentzVector(pxMiss,pyMiss,pz,e));

  neutrinoContainer.push_back(nu2);

  return true;
}


template <class LEPTON1, class LEPTON2, class COLL> inline 
void NeutrinoUtils::neutrinosFromColinearApproximation(LEPTON1* particleA, LEPTON2* particleB,
						       const double pxMiss, const double pyMiss, 
						       COLL & neutrinoContainer,
						       double &x_a, double &x_b)
{
  // numerator
  double numerator = particleA->px()*particleB->py() - particleA->py()*particleB->px();

  // fraction
  x_a = numerator/(particleB->py()*(particleA->px()+pxMiss)-particleB->px()*(particleA->py()+pyMiss));
  x_b = numerator/(particleA->px()*(particleB->py()+pyMiss)-particleA->py()*(particleB->px()+pxMiss));

  // instantiate Neutrino
  double px = (1./x_a-1.)*particleA->px();
  double py = (1./x_a-1.)*particleA->py();
  double pz = (1./x_a-1.)*particleA->pz();
  double e  = sqrt(px*px+py*py+pz*pz);

  Neutrino *nu1 = new Neutrino;
  nu1->set4Mom(CLHEP::HepLorentzVector(px,py,pz,e));

  px = (1./x_b-1.)*particleB->px();
  py = (1./x_b-1.)*particleB->py();
  pz = (1./x_b-1.)*particleB->pz();
  e  = sqrt(px*px+py*py+pz*pz);

  Neutrino *nu2 = new Neutrino;
  nu2->set4Mom(CLHEP::HepLorentzVector(px,py,pz,e));

  neutrinoContainer.push_back(nu1);
  neutrinoContainer.push_back(nu2);
}
