// ****************************************************************************
// ----------------------------------------------------------------------------
// JpsiEEFinder header file
//
// Cameron Cuthbert <cameron.cuthbert@cern.ch>
// Based on JpsiFinder written by:
//    James Catmore <James.Catmore@cern.ch> 
// ----------------------------------------------------------------------------
// ****************************************************************************
#ifndef JPSIEEFINDER_H
#define JPSIEEFINDER_H
#include "AthenaBaseComps/AthAlgorithm.h"
#include "GaudiKernel/ToolHandle.h"
#include "TrkVKalVrtFitter/TrkVKalVrtFitter.h"
#include "DataModel/DataVector.h"
#include "InDetConversionFinderTools/InDetConversionFinderTools.h"
#include "HepPDT/ParticleDataTable.hh"
#include "CLHEP/Vector/LorentzVector.h"
#include "Particle/TrackParticle.h"
#include "TrkToolInterfaces/ITrackParticleCreatorTool.h"
#include "TrkToolInterfaces/IUpdator.h"
//Egamma includes:
#include "egammaEvent/ElectronContainer.h"
#include "egammaEvent/EMTrackFit.h"
#include "egammaInterfaces/IegammaTrkRefitterTool.h"


#include <vector>
#include <cmath>
#include <string>
/////////////////////////////////////////////////////////////////////////////

namespace CLHEP {
  class HepLorentzVector;
}

namespace Trk { 
  class IVertexFitter;
  class VxCandidate;
  class TrackParticleBase;
  class VxTrackAtVertex;
  class RecVertex;
  class TrkV0VertexFitter;
  class ITrackSelectorTool;
  class V0Tools;
  class ExtendedVxCandidate;
}

namespace Rec { class TrackParticle; }
namespace InDet { class VertexPointEstimator; }
namespace eg2011 { class EnergyRescaler; }
class CaloCluster;


namespace Analysis {

  class Electron;

  static const InterfaceID IID_JpsiEEFinder("JpsiEEFinder", 1, 0);
  
  class JpsiEEFinder:  virtual public AthAlgTool
  {
  public:
    JpsiEEFinder(const std::string& t, const std::string& n, const IInterface*  p);
    ~JpsiEEFinder();
    StatusCode initialize();
    StatusCode finalize();
    
    static const InterfaceID& interfaceID() { return IID_JpsiEEFinder;};
    
    //-------------------------------------------------------------------------------------
    //Inline functions
    int                                                      nGoodPairs(void) {return m_nGoodPairs;}
    std::vector<std::vector<const Rec::TrackParticle*> >     getGoodPairs(void) {return m_goodPairs;}

    //Main method and selection functions
    VxContainer*                                             performSearch();
    bool                                                     passObjectSelection(const Electron*, const Electron*);
    bool                                                     passKinematicCuts(CLHEP::HepLorentzVector*, CLHEP::HepLorentzVector*);
    bool                                                     passTrackSelections(const Rec::TrackParticle*);
    bool                                                     passChargeSelection(const Rec::TrackParticle*, const Rec::TrackParticle*);
    bool                                                     passCollimated(CLHEP::HepLorentzVector*, CLHEP::HepLorentzVector*);


    
    //Utility functions
    void                                                     setupAuthorIDVars();
    CLHEP::HepLorentzVector*                                        getElectronLorentzVector(const Electron*, const Rec::TrackParticle*, double);
    std::vector<std::vector<const Rec::TrackParticle*> >     selectCharges(std::vector<std::vector<const Rec::TrackParticle*> > , bool);
    Trk::VxCandidate*                                        fit(std::vector<const Rec::TrackParticle*>,std::vector<const CaloCluster*>);
    Trk::ExtendedVxCandidate*                                getJpsiCandidate(Trk::VxCandidate*, std::vector<const Rec::TrackParticle*>*,
									      const Trk::TrackParticleBaseCollection*); 
    const Rec::TrackParticle*                                getRefittedGSFCaloTrackParticle( egamma*, const Rec::TrackParticle*);
    bool                                                     illogicalOptions();
    const Trk::TrackParameters* 			     updateTrackParameters(int&, const Trk::ParametersBase<5,Trk::Charged>*&, const CaloCluster*&);
    //-------------------------------------------------------------------------------------
    
  private:

    int                                                      m_authorA;
    int                                                      m_authorB;
    int 						     m_joIdentificationA;
    int                                                      m_joIdentificationB;	 
    egammaPID::egammaIDQuality                               m_identificationA;
    egammaPID::egammaIDQuality                               m_identificationB;
    bool                                                     m_usePlusPlusHelper;
    bool                                                     m_diElectrons;
    bool                                                     m_useV0Fitter;
    double                                                   m_trk1M;
    double                                                   m_trk2M;
    bool                                                     m_useGSFCaloTracks;
    bool                                                     m_useTrkOnlyFourVec;      //Construct electron 4-vec from track only
    bool                                                     m_useUncombinedFourVec;   //" " " from seperate track and calo quantities
    bool                                                     m_useCombinedFourVec;     //" " " from combined calo+tracking estimates of E,eta,phi
    bool						     m_updateTracksWithCalo;
    const HepPDT::ParticleDataTable                          *m_particleDataTable;
    double                                                   m_thresholdPt;
    double                                                   m_higherPt;  
    double                                                   m_invMassUpper;
    double                                                   m_invMassLower;
    double                                                   m_collAngleTheta;
    double                                                   m_collAnglePhi;
    double                                                   m_Chi2Cut;
    bool                                                     m_oppChOnly;
    bool                                                     m_sameChOnly;
    bool                                                     m_allChCombs;
    int                                                      m_nGoodPairs;
    std::vector<std::vector<const Rec::TrackParticle*> >     m_goodPairs;
    std::string                                              m_electronCollectionKey;
    std::string                                              m_TrkParticleCollection;
    ToolHandle < Trk::IVertexFitter >                        m_iVertexFitter;
    ToolHandle < Trk::IVertexFitter >                        m_iV0VertexFitter;
    ToolHandle < Trk::V0Tools >                              m_V0Tools;
    ToolHandle < Trk::ITrackSelectorTool >                   m_trkSelector;
    ToolHandle < IegammaTrkRefitterTool >                    m_iEgammaTrkRefitter;
    ToolHandle < InDet::ConversionFinderUtils >              m_helpertool;
    ToolHandle < InDet::VertexPointEstimator >               m_vertexEstimator;
    ToolHandle < Trk::ITrackParticleCreatorTool>             m_particleCreatorTool;
    ToolHandle< Trk::IUpdator >                  	     m_updator;
    std::vector<Trk::Track*>                                 m_tempTracks;
    std::vector<Rec::TrackParticle*>                         m_tempTrackParticles;
    eg2011::EnergyRescaler*  				     m_energyRescaler;  
  };
} // end of namespace
#endif

