// ****************************************************************************
// ----------------------------------------------------------------------------
// JpsiEEFinder
// Cameron Cuthbert <cameron.cuthbert@cern.ch>
// Based on JpsiFinder, written by:
//    James Catmore <James.Catmore@cern.ch> 
//    Evelina Bouhova-Thacker <e.bouhova@cern.ch> 
// Results returned as a vector of ExtendedVxCandidates 
// ----------------------------------------------------------------------------
// ****************************************************************************

#include "JpsiUpsilonTools/JpsiEEFinder.h"
#include "VxVertex/VxContainer.h"
#include "VxVertex/ExtendedVxCandidate.h"
#include "VxVertex/VxTrackAtVertex.h"
#include "TrkVertexAnalysisUtils/V0Tools.h"
#include "TrkVertexFitterInterfaces/IVertexFitter.h"
#include "TrkVKalVrtFitter/TrkVKalVrtFitter.h"
#include "TrkV0Fitter/TrkV0VertexFitter.h"
#include "TrkParticleBase/TrackParticleBase.h"
#include "TrkParticleBase/LinkToTrackParticleBase.h"
#include "InDetConversionFinderTools/ConversionFinderUtils.h"
#include "InDetConversionFinderTools/VertexPointEstimator.h"
#include "TrkToolInterfaces/ITrackSelectorTool.h"
#include "EventPrimitives/EventPrimitives.h"
#include "CaloEvent/CaloCluster.h"
#include "GaudiKernel/ToolFactory.h"
#include "GaudiKernel/IPartPropSvc.h"
#include "DataModel/ElementLink.h"
#include "egammaAnalysisUtils/EnergyRescaler.h"
#include "egammaAnalysisUtils/IsEMPlusPlusHelper.h"

namespace Analysis {
  
  StatusCode JpsiEEFinder::initialize() {

  // retrieving vertex Fitter
  if ( m_iVertexFitter.retrieve().isFailure() ) {
    ATH_MSG_FATAL("Failed to retrieve tool " << m_iVertexFitter);
    return StatusCode::FAILURE;
  } else {
    ATH_MSG_INFO("Retrieved tool " << m_iVertexFitter);
  }
  
  // retrieving V0 Fitter
  if ( m_iV0VertexFitter.retrieve().isFailure() ) {
    ATH_MSG_FATAL("Failed to retrieve tool " << m_iV0VertexFitter);
    return StatusCode::FAILURE;
  } else {
    ATH_MSG_INFO("Retrieved tool " << m_iV0VertexFitter);
  }

  // Get the track selector tool from ToolSvc
  if ( m_trkSelector.retrieve().isFailure() ) {
    ATH_MSG_FATAL("Failed to retrieve tool " << m_trkSelector);
    return StatusCode::FAILURE;
  } else {
    ATH_MSG_INFO("Retrieved tool " << m_trkSelector);
  }

  // Retrieve the egamma track refitter tool
  if (m_useGSFCaloTracks) {
	  if ( m_iEgammaTrkRefitter.retrieve().isFailure() ) {
	    ATH_MSG_FATAL("Failed to retrieve tool " << m_iEgammaTrkRefitter);
	    return StatusCode::FAILURE;
	  } else {
	    ATH_MSG_INFO("Retrieved tool " << m_iEgammaTrkRefitter);
	  } 
  }

  // uploading the V0 tools
  if ( m_V0Tools.retrieve().isFailure() ) {
    ATH_MSG_FATAL("Failed to retrieve tool " << m_V0Tools);
    return StatusCode::FAILURE;
  } else {
    ATH_MSG_INFO("Retrieved tool " << m_V0Tools);
  }

  // Get the vertex point estimator tool from ToolSvc
  if ( m_vertexEstimator.retrieve().isFailure() ) {
    ATH_MSG_FATAL("Failed to retrieve tool " << m_vertexEstimator);
    return StatusCode::FAILURE;
  } else {
    ATH_MSG_INFO("Retrieved tool " << m_vertexEstimator);
  }

  // Get the helpertool from ToolSvc
  if ( m_helpertool.retrieve().isFailure() ) {
    ATH_MSG_FATAL("Failed to retrieve tool " << m_helpertool);
    return StatusCode::FAILURE;
  } else {
    ATH_MSG_INFO("Retrieved tool " << m_helpertool);
  }

  // Get the Particle Properties Service
  IPartPropSvc* partPropSvc = 0;
  StatusCode sc = service("PartPropSvc", partPropSvc, true);
  if (sc.isFailure()) {
    ATH_MSG_ERROR("Could not initialize Particle Properties Service");
    return StatusCode::SUCCESS;
  } else {
    m_particleDataTable = partPropSvc->PDT();
    const HepPDT::ParticleData* pd_elec = m_particleDataTable->particle(PDG::e_minus);
    if (m_diElectrons) {
      m_trk1M = pd_elec->mass();
      m_trk2M = pd_elec->mass();
    }
  }

  // Initialize energy rescaler
  m_energyRescaler=new eg2011::EnergyRescaler();
  m_energyRescaler->useDefaultCalibConstants("2011");

  //Setup up the Author and ID Vars
  setupAuthorIDVars();

  ATH_MSG_INFO("Initialize successful");
  
  return StatusCode::SUCCESS;

}
  
  StatusCode JpsiEEFinder::finalize() {

  ATH_MSG_INFO("Finalize successful");
  return StatusCode::SUCCESS;

}

  JpsiEEFinder::JpsiEEFinder(const std::string& t, const std::string& n, const IInterface* p)  : AthAlgTool(t,n,p),
												 m_authorA(1),
												 m_authorB(1),
												 m_joIdentificationA(3),
												 m_joIdentificationB(3),
												 m_usePlusPlusHelper(false),
												 m_diElectrons(true),
												 m_useV0Fitter(false),
												 m_trk1M(0.510999),
												 m_trk2M(0.510999),
												 m_useGSFCaloTracks(false),
												 m_useTrkOnlyFourVec(false),
												 m_useUncombinedFourVec(true),
                                                                                                 m_useCombinedFourVec(false),
												 m_updateTracksWithCalo(true),
												 m_particleDataTable(0),
												 m_thresholdPt(0.0),
												 m_higherPt(0.0),
												 m_invMassUpper(100000.0),
												 m_invMassLower(0.0),
												 m_collAngleTheta(0.0),
												 m_collAnglePhi(0.0),
												 m_Chi2Cut(200.),
												 m_oppChOnly(true),
												 m_sameChOnly(false),
												 m_allChCombs(false),
												 m_electronCollectionKey("ElectronAODCollection"),
												 m_TrkParticleCollection("TrackParticleCandidate"),
												 m_iVertexFitter("Trk::TrkVKalVrtFitter"),
												 m_iV0VertexFitter("Trk::V0VertexFitter"),
												 m_V0Tools("Trk::V0Tools"),
												 m_trkSelector("InDet::TrackSelectorTool"),
												 m_iEgammaTrkRefitter("egammaTrkRefitterTool"),
												 m_helpertool("InDet::ConversionFinderUtils"),
												 m_vertexEstimator("InDet::VertexPointEstimator"),
												 m_particleCreatorTool("Trk::TrackParticleCreatorTool"),
												 m_updator("Trk::KalmanUpdator/TrkKalmanUpdator")													 
  {
    declareInterface<JpsiEEFinder>(this);
    declareProperty("authorA",m_authorA);
    declareProperty("authorB",m_authorB);
    declareProperty("identificationA",m_joIdentificationA);
    declareProperty("identificationB",m_joIdentificationB);
    declareProperty("UsePlusPlusHelper",m_usePlusPlusHelper);
    declareProperty("diElectrons",m_diElectrons);
    declareProperty("useV0Fitter",m_useV0Fitter);
    declareProperty("track1Mass",m_trk1M);
    declareProperty("track2Mass",m_trk2M);
    declareProperty("UseGSFCaloTracks",m_useGSFCaloTracks);
    declareProperty("TrackOnlyFourVec",m_useTrkOnlyFourVec);
    declareProperty("UncombinedFourVec",m_useUncombinedFourVec);
    declareProperty("CombinedFourVec",m_useCombinedFourVec);
    declareProperty("UpdateTracksWithClusterEnergy",m_updateTracksWithCalo);
    declareProperty("thresholdPt",m_thresholdPt);
    declareProperty("higherPt",m_higherPt);
    declareProperty("invMassUpper",m_invMassUpper);
    declareProperty("invMassLower",m_invMassLower);
    declareProperty("collAngleTheta",m_collAngleTheta);
    declareProperty("collAnglePhi",m_collAnglePhi);
    declareProperty("Chi2Cut",m_Chi2Cut);
    declareProperty("oppChargesOnly",m_oppChOnly);
    declareProperty("sameChargesOnly",m_sameChOnly);
    declareProperty("allChargeCombinations",m_allChCombs);
    declareProperty("electronCollectionKey",m_electronCollectionKey);
    declareProperty("TrackParticleCollection",m_TrkParticleCollection);
    declareProperty("TrackParticleCreatorTool",m_particleCreatorTool);
    declareProperty("TrkVertexFitterTool",m_iVertexFitter);
    declareProperty("V0VertexFitterTool",m_iV0VertexFitter);
    declareProperty("EgammaTrkRefitterTool",m_iEgammaTrkRefitter);
    declareProperty("V0Tools",m_V0Tools);
    declareProperty("TrackSelectorTool",m_trkSelector);
    declareProperty("ConversionFinderHelperTool",m_helpertool);
    declareProperty("VertexPointEstimator",m_vertexEstimator);
  }
  
  JpsiEEFinder::~JpsiEEFinder() { }
  
  ////---------------------------------------------------------------------------------
  //// Main function to find the candidates
  ////----------------------------------------------------------------------------------
  VxContainer* JpsiEEFinder::performSearch()
  {
    ATH_MSG_DEBUG( "JpsiEEFinder::performSearch" );
    VxContainer* JpsiContainer = new VxContainer;
    
    // Counter of good electron pairs BEFORE vertexing
    m_nGoodPairs = 0;
    
    // Get the ToolSvc
    IToolSvc* toolsvc;
    StatusCode sc1=service("ToolSvc",toolsvc);
    if (sc1.isFailure() ) {
      ATH_MSG_ERROR("Problem loading tool service. JpsiCandidates will be EMPTY!");
      return JpsiContainer;
    };
  
    // Get the electrons from StoreGate
    const ElectronContainer* importedElectronCollection;
    StatusCode sc = evtStore()->retrieve(importedElectronCollection,m_electronCollectionKey);
    if(sc.isFailure()){
      ATH_MSG_ERROR("No electron collection with key " << m_electronCollectionKey << " found in StoreGate. JpsiCandidates will be EMPTY!");
      return JpsiContainer;
    }
    else {
      ATH_MSG_DEBUG("Found electron collection with key "<< m_electronCollectionKey);
    }
    ATH_MSG_DEBUG("Electron container size "<<importedElectronCollection->size());
    
    // Get tracks
    const Trk::TrackParticleBaseCollection* importedTrackCollection(0);
    sc = evtStore()->retrieve(importedTrackCollection,m_TrkParticleCollection);
    if(sc.isFailure()){
      ATH_MSG_ERROR("No track particle collection with name " << m_TrkParticleCollection << " found in StoreGate!");
      return JpsiContainer;
    }
    else {
      ATH_MSG_DEBUG("Found track particle collection " << m_TrkParticleCollection << " in StoreGate!");
    }
    ATH_MSG_DEBUG("Track container size "<< importedTrackCollection->size());

    if ( illogicalOptions() ) return JpsiContainer;
	
    
    // Typedef for vectors of tracks and electrons
    typedef std::vector<const Rec::TrackParticle*> TrackBag;
    typedef std::vector<const Analysis::Electron*> ElectronBag;
    
    // Get the tracks from the electrons
    ElectronContainer::const_iterator outElectronItr;
    ElectronContainer::const_iterator inElectronItr;

    const Rec::TrackParticle* outElectronTrk;
    const Rec::TrackParticle* inElectronTrk;

    // CaloCluster in case it is needed
    const CaloCluster* outCluster(NULL);
    const CaloCluster* inCluster(NULL);

    //Clear temporary tracks from last event
    for (unsigned int i=0; i<m_tempTracks.size(); i++) {
      delete m_tempTracks[i];
    }
    for (unsigned int i=0; i<m_tempTrackParticles.size(); i++) {
      delete m_tempTrackParticles[i];
    }

    m_tempTracks.clear();
    m_tempTrackParticles.clear();
        
    int total(0),passObj(0),passKin(0),passTrackSel(0),passCh(0),passColl(0),passVx(0);
    
    for (outElectronItr = importedElectronCollection->begin(); outElectronItr!=importedElectronCollection->end(); outElectronItr++) {
      if ((*outElectronItr)==NULL) continue;
      outCluster = (*outElectronItr)->cluster(); 
      if (m_updateTracksWithCalo && outCluster == NULL) continue;	

      outElectronTrk = (*outElectronItr)->trackParticle();
      if (outElectronTrk==NULL) continue;
      
      if (m_useGSFCaloTracks) {
	outElectronTrk = getRefittedGSFCaloTrackParticle( dynamic_cast<egamma*>(const_cast<Electron*>(*outElectronItr)), outElectronTrk);
	if (outElectronTrk==NULL) continue;
      }
	
      CLHEP::HepLorentzVector *outElectronLorentzVector = getElectronLorentzVector(*outElectronItr, outElectronTrk, m_trk2M);
      
      if (!outElectronLorentzVector) continue;
	
      
      for (inElectronItr = outElectronItr+1; inElectronItr!=importedElectronCollection->end(); inElectronItr++) {
	
	if ((*inElectronItr)==NULL) continue;
	inCluster = (*inElectronItr)->cluster();	
	if (m_updateTracksWithCalo && inCluster==NULL) continue;

	inElectronTrk = (*inElectronItr)->trackParticle();
	if (inElectronTrk==NULL) continue;
	
	if (m_useGSFCaloTracks) {
	  inElectronTrk = getRefittedGSFCaloTrackParticle( dynamic_cast<egamma*>(const_cast<Electron*>(*inElectronItr)), inElectronTrk);
	  if (inElectronTrk==NULL) continue;
	}
	  
	total++;

	CLHEP::HepLorentzVector *inElectronLorentzVector = getElectronLorentzVector(*inElectronItr, inElectronTrk, m_trk1M);

	if (!inElectronLorentzVector) continue;

	//----------------------------- Make selections on electrons ------------------------------
	if (!passObjectSelection(*inElectronItr,*outElectronItr)) continue;
	passObj++;
	if (!passKinematicCuts(inElectronLorentzVector, outElectronLorentzVector)) continue;
	passKin++;
	if (!passTrackSelections(inElectronTrk) || !passTrackSelections(outElectronTrk)) continue;
	passTrackSel++;
	if (!passChargeSelection(inElectronTrk,outElectronTrk)) continue;
	passCh++;
	if (!passCollimated(inElectronLorentzVector,outElectronLorentzVector)) continue;
	passColl++;
	
	//Perform a vertex fit
	std::vector<const Rec::TrackParticle*> theTracks; theTracks.clear();
	std::vector<const CaloCluster*> theClusters;
	theTracks.push_back(inElectronTrk);
	theTracks.push_back(outElectronTrk);
	theClusters.push_back(inCluster); theClusters.push_back(outCluster);

	if (theTracks[0]==NULL || theTracks[1]==NULL) continue;

        // This line actually does the fitting 
	Trk::VxCandidate* vxCandidate = fit(theTracks,theClusters);

	// This builds associations between the vertex and its constituent tracks
	Trk::ExtendedVxCandidate* jpsiCandidate = getJpsiCandidate(vxCandidate, &theTracks, importedTrackCollection);

	if (jpsiCandidate!=NULL) {
	  JpsiContainer->push_back(jpsiCandidate);
	  passVx++;
	}
	
	TrackBag pair;
	pair.clear();
	pair.push_back(inElectronTrk);
	pair.push_back(outElectronTrk);
	m_goodPairs.push_back(pair);

	
	
      }
    }
    ATH_MSG_DEBUG("Total ee pairs: " << total);
    ATH_MSG_DEBUG("+ passing Object Selection: " << passObj);
    ATH_MSG_DEBUG("+ passing Kinematic Cuts: " << passKin);
    ATH_MSG_DEBUG("+ passing track selections: " << passTrackSel);
    ATH_MSG_DEBUG("+ passing charge selection: " << passCh);
    ATH_MSG_DEBUG("+ passing collimation requirements: " << passColl);  
    ATH_MSG_DEBUG("+ passing vertex selection: " << passVx);
    
    m_nGoodPairs = m_goodPairs.size();
    return JpsiContainer;
    
  }
  //// ---------------------------------------------------------------------------------
  
  //// -----------------------------------------------------------------------------------
  //// Selection cuts on electrons
  //// -----------------------------------------------------------------------------------
  
  bool JpsiEEFinder::passObjectSelection(const Electron *inElectron, const Electron *outElectron) {
    //Selection based on electron author
    if ( !(inElectron->author(m_authorA) && outElectron->author(m_authorB)) &&
	 !(inElectron->author(m_authorB) && outElectron->author(m_authorA)) )                            return 0;

    if (!m_usePlusPlusHelper){
      if ( !(inElectron->passID(m_identificationA) && outElectron->passID(m_identificationB)) &&
	   !(inElectron->passID(m_identificationB) && outElectron->passID(m_identificationA)) )    return 0;
    }else{
      //Set up ID variables with isEMPlusPlusHelper
      //Set this up so that 15 = loose++ (default), 25 = medium++, 35 = tight++
      bool inPPA = false, outPPA = false, inPPB = false, outPPB = false;
      switch  (m_joIdentificationA) {
      case 15:
	inPPA  = isEMPlusPlusHelper::IsLoosePlusPlus(inElectron,egammaMenu::eg2012);
	outPPA = isEMPlusPlusHelper::IsLoosePlusPlus(outElectron,egammaMenu::eg2012);
	break;     
      case 25:
	inPPA  = isEMPlusPlusHelper::IsMediumPlusPlus(inElectron,egammaMenu::eg2012);
	outPPA = isEMPlusPlusHelper::IsMediumPlusPlus(outElectron,egammaMenu::eg2012);
	break;
      case 35:
	inPPA  = isEMPlusPlusHelper::IsTightPlusPlus(inElectron,egammaMenu::eg2012);
	outPPA = isEMPlusPlusHelper::IsTightPlusPlus(outElectron,egammaMenu::eg2012);
	break;
      default:
	inPPA  = isEMPlusPlusHelper::IsLoosePlusPlus(inElectron,egammaMenu::eg2012);
	outPPA = isEMPlusPlusHelper::IsLoosePlusPlus(outElectron,egammaMenu::eg2012);
      }
      
      switch  (m_joIdentificationB) {
      case 15:
	inPPB  = isEMPlusPlusHelper::IsLoosePlusPlus(inElectron,egammaMenu::eg2012);
	outPPB = isEMPlusPlusHelper::IsLoosePlusPlus(outElectron,egammaMenu::eg2012);
	break;     
      case 25:
	inPPB  = isEMPlusPlusHelper::IsMediumPlusPlus(inElectron,egammaMenu::eg2012);
	outPPB = isEMPlusPlusHelper::IsMediumPlusPlus(outElectron,egammaMenu::eg2012);
	break;
      case 35:
	inPPB  = isEMPlusPlusHelper::IsTightPlusPlus(inElectron,egammaMenu::eg2012);
	outPPB = isEMPlusPlusHelper::IsTightPlusPlus(outElectron,egammaMenu::eg2012);
	break;
      default:
	inPPB  = isEMPlusPlusHelper::IsLoosePlusPlus(inElectron,egammaMenu::eg2012);
	outPPB = isEMPlusPlusHelper::IsLoosePlusPlus(outElectron,egammaMenu::eg2012);
      }
      
      if ( !(inPPA && outPPB) && !(inPPB && outPPA) )    return 0;
    }

    return 1;
   }
  
  bool JpsiEEFinder::passKinematicCuts(CLHEP::HepLorentzVector * inElectronLorentzVector, CLHEP::HepLorentzVector *outElectronLorentzVector) {

  // Select for Pt cuts, if any are set is set
  double inElectronPt = fabs(inElectronLorentzVector->perp());
  double outElectronPt = fabs(outElectronLorentzVector->perp());
	
  if (m_thresholdPt!=0) {
    if ( inElectronPt < m_thresholdPt || outElectronPt < m_thresholdPt ) return 0;
  }
  if (m_higherPt!=0) {
    if ( inElectronPt < m_higherPt && outElectronPt < m_higherPt ) return 0;
  }
  
  // Select for invariant mass
  double invMass = (*inElectronLorentzVector+*outElectronLorentzVector).m();
  if ( invMass < m_invMassLower || invMass > m_invMassUpper ) return 0;

  return 1; //if the pair hasn't failed yet let it through

}
  
  bool JpsiEEFinder::passTrackSelections(const Rec::TrackParticle *electronTrk) {
    const Trk::Vertex* vx = 0;
    return m_trkSelector->decision(*electronTrk, vx); 
  }
  
  bool JpsiEEFinder::passChargeSelection(const Rec::TrackParticle *inElectronTrk, const Rec::TrackParticle *outElectronTrk) {
    double qOverP1=inElectronTrk->measuredPerigee()->parameters()[Trk::qOverP];
    double qOverP2=outElectronTrk->measuredPerigee()->parameters()[Trk::qOverP];
    if (m_oppChOnly && !qOverP1*qOverP2<0.0) return 0;
    if (m_sameChOnly && qOverP1*qOverP2<0.0) return 0;
    return 1; //if neither of these two failed. 
  }
  
  bool JpsiEEFinder::passCollimated(CLHEP::HepLorentzVector *inElectronLorentzVector, CLHEP::HepLorentzVector *outElectronLorentzVector) {
    if (m_collAnglePhi>0.0 && m_collAngleTheta>0.0) {
      double deltatheta = fabs( inElectronLorentzVector->theta() - outElectronLorentzVector->theta() );
      // -3.14 < phi < +3.14 ==> correction
      double deltaphi = inElectronLorentzVector->phi() - outElectronLorentzVector->phi();
      while ( fabs(deltaphi) > M_PI ) deltaphi += ( deltaphi > 0. ) ? -2.*M_PI : 2.*M_PI;
      deltaphi = fabs(deltaphi);
      // perform the angle cuts
      if (!(deltatheta <= m_collAngleTheta) || !(deltaphi <= m_collAnglePhi)) return 0;
    }
    return 1;
  }
  
  //// ---------------------------------------------------------------------------------
  
  ////----------------------------------------------------------------------------------
  //// Utility Functions  
  ////----------------------------------------------------------------------------------

  void JpsiEEFinder::setupAuthorIDVars() {
    //Setting up author vars 
    switch  (m_authorA) {
    case 1:
      m_authorA = egammaParameters::AuthorElectron;
      break;
    case 2: m_authorA = egammaParameters::AuthorSofte;
      break;
    case 8: m_authorA = egammaParameters::AuthorFrwd;
      break;
    default: m_authorA = 0;
    }
    
    switch  (m_authorB) {
    case 1:
      m_authorB = egammaParameters::AuthorElectron;
      break;
    case 2:
      m_authorB = egammaParameters::AuthorSofte;
      break;
    case 8:
      m_authorB = egammaParameters::AuthorFrwd;
      break;
    default: m_authorB = 0;
    }

    //Set up ID vars
    //Set this up so that 1 = loose, 2 = medium, 3 = tight
    switch  (m_joIdentificationA) {
    case 1:
      m_identificationA = egammaPID::ElectronIDLoose;
      break;
    case 15:
      m_identificationA = egammaPID::ElectronIDLoosePP;
      break;     
    case 2:
      m_identificationA = egammaPID::ElectronIDMedium;
      break;
    case 25:
      m_identificationA = egammaPID::ElectronIDMediumPP;
      break;
    case 3:
      m_identificationA = egammaPID::ElectronIDTight;
      break;
    case 35:
      m_identificationA = egammaPID::ElectronIDTightPP;
      break;
    default: m_identificationA = egammaPID::ElectronIDTight;
    }
    
    switch  (m_joIdentificationB) {
    case 1:
      m_identificationB = egammaPID::ElectronIDLoose;
      break;
    case 15:
      m_identificationB = egammaPID::ElectronIDLoosePP;
      break;     
    case 2:
      m_identificationB = egammaPID::ElectronIDMedium;
      break;
    case 25:
      m_identificationB = egammaPID::ElectronIDMediumPP;
      break;
    case 3:
      m_identificationB = egammaPID::ElectronIDTight;
      break;
    case 35:
      m_identificationB = egammaPID::ElectronIDTightPP;
      break;
    default: m_identificationB = egammaPID::ElectronIDTight;
    }
    
 
        
  }

  Trk::VxCandidate* JpsiEEFinder::fit(std::vector<const Rec::TrackParticle*> inputTracks, std::vector<const CaloCluster*> theClusters) {
    
    Trk::TrkV0VertexFitter* concreteVertexFitter=0;
    if (m_useV0Fitter) {
      // making a concrete fitter for the V0Fitter
      concreteVertexFitter = dynamic_cast<Trk::TrkV0VertexFitter * >(&(*m_iV0VertexFitter));
      if(concreteVertexFitter == 0) {
	ATH_MSG_FATAL("The vertex fitter passed is not a V0 Vertex Fitter");
	return NULL;
      }
    }

    const Trk::Perigee * aPerigee1 = inputTracks[0]->measuredPerigee();
    const Trk::Perigee * aPerigee2 = inputTracks[1]->measuredPerigee();
    int charge1 = aPerigee1->parameters()[Trk::qOverP] > 0 ? 1 : -1;
    int charge2 = aPerigee2->parameters()[Trk::qOverP] > 0 ? 1 : -1;
    int sflag = 0;
    int errorcode = 1;
    Amg::Vector3D startingPoint = m_vertexEstimator->getCirclesIntersectionPoint(aPerigee1,aPerigee2,sflag,errorcode);
    if (errorcode != 0) {startingPoint(0) = 0.0; startingPoint(1) = 0.0; startingPoint(3) = 0.0;}
    const Trk::ParametersBase<5, Trk::Charged>* track1 = m_helpertool->getTrkParticleParameters((inputTracks[0]));
    const Trk::ParametersBase<5, Trk::Charged>* track2 = m_helpertool->getTrkParticleParameters((inputTracks[1]));

    // If user wants to update track parameters with the cluster energy... 
    const Trk::TrackParameters* updatedTrack1(NULL);
    const Trk::TrackParameters* updatedTrack2(NULL);
    if (m_updateTracksWithCalo) {
	updatedTrack1 = updateTrackParameters(charge1,track1,theClusters[0]);
	updatedTrack2 = updateTrackParameters(charge2,track2,theClusters[1]);
    }
   
    std::vector<const Trk::ParametersBase<5,Trk::Charged>*> vertexTracks;
    vertexTracks.clear();
    if (m_updateTracksWithCalo) {
	vertexTracks.push_back(updatedTrack1);
    	vertexTracks.push_back(updatedTrack2);
    } else {
        vertexTracks.push_back(track1);
        vertexTracks.push_back(track2);
    }
    Trk::Vertex vertex(startingPoint);
    if (m_useV0Fitter) {
      Trk::VxCandidate* myVxCandidate = concreteVertexFitter->fit(vertexTracks, vertex);
      return myVxCandidate;
    } else {
      Trk::VxCandidate* myVxCandidate = m_iVertexFitter->fit(vertexTracks, vertex);
      return myVxCandidate;
    }
  }

  CLHEP::HepLorentzVector* JpsiEEFinder::getElectronLorentzVector(const Electron* electron, const Rec::TrackParticle* electronTrk, double mass) {
    double energy=0,px=0,py=0,pz=0;

    if (m_useTrkOnlyFourVec) {
      if (electronTrk->px()) px = electronTrk->px();
      if (electronTrk->py()) py = electronTrk->py();
      if (electronTrk->pz()) pz = electronTrk->pz();
    }

    if (m_useCombinedFourVec) {
      px = electron->px();
      py = electron->py();
      pz = electron->pz();
    }

    if (m_useUncombinedFourVec) {
      double theta,eta,phi,p;
      double nSCTHits(0),nPixHits(0);
      const Trk::TrackSummary* trkSummary = electronTrk->trackSummary();

      if (trkSummary) {
	nSCTHits = trkSummary->get(Trk::numberOfSCTHits);
	nPixHits = trkSummary->get(Trk::numberOfPixelHits);
      }

      energy = electron->cluster()->e();

      if (nSCTHits + nPixHits < 4) {
	eta = electron->cluster()->eta();
	phi = electron->cluster()->phi();
      }
      else {
	eta = electronTrk->eta();
	phi = electronTrk->phi();
      }
      
      theta = 2*atan( exp(-eta) );
      
      p = sqrt(energy*energy - mass*mass);
      px = p*sin(theta)*cos(phi);
      py = p*sin(theta)*sin(phi);
      pz = p*cos(theta);
    }

    energy = sqrt( px*px+py*py+pz*pz + mass*mass);
    
    CLHEP::HepLorentzVector *electronLorentzVector = new CLHEP::HepLorentzVector(px,py,pz,energy);
    
    return electronLorentzVector;
  }
  
  Trk::ExtendedVxCandidate* JpsiEEFinder::getJpsiCandidate(Trk::VxCandidate* myVxCandidate, std::vector<const Rec::TrackParticle*>* theTracks,
							   const Trk::TrackParticleBaseCollection* importedTrackCollection) {
    
    if (myVxCandidate==0) {
      ATH_MSG_DEBUG("Fitter failed!");
      delete myVxCandidate;
      return NULL;
    }
    bool keepVx(false);
    const std::vector<Trk::VxTrackAtVertex*>& trackAtVertexVec = *((myVxCandidate)->vxTrackAtVertex());
    for (unsigned int i = 0; i < trackAtVertexVec.size(); i++) {
      Trk::LinkToTrackParticleBase* newLinkToTrackPB = new Trk::LinkToTrackParticleBase();
      if(i == 0) newLinkToTrackPB->setElement(static_cast<const Trk::TrackParticleBase*>(theTracks->at(0)));
      if(i == 1) newLinkToTrackPB->setElement(static_cast<const Trk::TrackParticleBase*>(theTracks->at(1)));
      newLinkToTrackPB->setStorableObject(*importedTrackCollection);
      trackAtVertexVec[i]->setOrigTrack(newLinkToTrackPB);
    }
    double chi2 = myVxCandidate->recVertex().fitQuality().chiSquared();
    ATH_MSG_DEBUG("chi2 is: " << chi2);
    if (m_Chi2Cut == 0.0 || chi2 <= m_Chi2Cut) {
      Trk::ExtendedVxCandidate* jpsiCandidate = dynamic_cast<Trk::ExtendedVxCandidate* >(myVxCandidate);
      if (!jpsiCandidate) {
	keepVx = false;
	jpsiCandidate = new Trk::ExtendedVxCandidate(myVxCandidate->recVertex(), *(myVxCandidate->vxTrackAtVertex()), 0);
      }
      else {
	keepVx = true;
      }
      if (jpsiCandidate!=NULL) return jpsiCandidate;
    }
    else {
      keepVx = true;
      delete myVxCandidate;
    }
    
    if (myVxCandidate && !keepVx) {
      ATH_MSG_DEBUG("Fitter succeeded but vertex not kept");
      if (myVxCandidate->vxTrackAtVertex()) myVxCandidate->vxTrackAtVertex()->clear();
      delete myVxCandidate;
    }
    return NULL;
  }	

  const Rec::TrackParticle* JpsiEEFinder::getRefittedGSFCaloTrackParticle( egamma* electron, const Rec::TrackParticle* originalTrackParticle) {

    if (electron==NULL || originalTrackParticle==NULL) return NULL;
    
    StatusCode fitSC  = m_iEgammaTrkRefitter->refitElectronTrack( electron );
    if (fitSC != StatusCode::SUCCESS) return NULL;

    
    Trk::Track *refittedElectronTrk = m_iEgammaTrkRefitter->refittedTrack();
    m_tempTracks.push_back(refittedElectronTrk);
    
    const Trk::VxCandidate* originalTrkVtx = originalTrackParticle->reconstructedVertex();
    
    Trk::VertexType originalVtxType = originalTrackParticle->particleOriginType();
    
    if (!refittedElectronTrk || !originalTrkVtx || !originalVtxType) return NULL;

    Rec::TrackParticle* refittedTrackParticle  = m_particleCreatorTool->createParticle(refittedElectronTrk, originalTrkVtx,originalVtxType);
    m_tempTrackParticles.push_back(refittedTrackParticle);
        
    return refittedTrackParticle;
  }
	    
  bool JpsiEEFinder::illogicalOptions() {
    //Check to make sure user choices make sense
    if ( (m_useTrkOnlyFourVec && m_useUncombinedFourVec) || (m_useTrkOnlyFourVec && m_useCombinedFourVec) || (m_useUncombinedFourVec && m_useCombinedFourVec) ) {
      ATH_MSG_ERROR("You are requesting incompatible combinations of four vector calculation methods. JpsiCandidates will be EMPTY!");
      return true;
    };

    if ( (m_oppChOnly && m_sameChOnly) || (m_oppChOnly && m_allChCombs) || (m_sameChOnly && m_allChCombs) ) {
      ATH_MSG_ERROR("You are requesting incompatible combinations of charges in the pairs. JpsiCandidates will be EMPTY!");
      return true;
    };

    if ( m_electronCollectionKey!="GSFElectronAODCollection" && m_useGSFCaloTracks) {
      ATH_MSG_ERROR("You are trying to use GSFCalo electrons, but are not using the GSF electron collection.");
      return true;
    }

    return false;
    
  }
  
  ////----------------------------------------------------------------------------------

  const Trk::TrackParameters* JpsiEEFinder::updateTrackParameters(int &charge, const Trk::ParametersBase<5,Trk::Charged>* &oldParameters, const CaloCluster* &theCluster) {

      double clusterEnergy = theCluster->energy();
      double clusterEta = theCluster->eta();
      double clusterQoverE = clusterEnergy !=0 ? (double)charge/clusterEnergy : 0;
      Trk::DefinedParameter qOverP(clusterQoverE,Trk::qOverP);
      std::vector<Trk::DefinedParameter> defPar ;
      defPar.push_back( qOverP );
      const Trk::LocalParameters *newLocalParameters = new Trk::LocalParameters( defPar ) ; 
      double  energyerr = m_energyRescaler->resolution(clusterEnergy*1.0e-3,clusterEta,false) * clusterEnergy;
      energyerr =  (energyerr< 1e-5 || clusterEnergy == 0) ? 100 :  pow(energyerr,2) * pow(clusterEnergy,-4 ); //  Convert energy error to q/E err
      AmgSymMatrix(1) covMatrix ; 
      covMatrix( 0, 0 ) = energyerr ;
      //const Trk::ErrorMatrix* errMatrix = new Trk::ErrorMatrix( covMatrix ) ; 
      Trk::FitQualityOnSurface* fqos(NULL); 
      const Trk::TrackParameters* oldTPs = static_cast<const Trk::TrackParameters*>(oldParameters);
      const Trk::TrackParameters* updatedTrackParameters = m_updator->addToState(*oldTPs, *newLocalParameters, covMatrix, fqos);
      return updatedTrackParameters;

  }
 

  
}  //end of class
