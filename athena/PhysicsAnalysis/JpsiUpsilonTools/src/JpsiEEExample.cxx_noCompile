// JpsiEEExample.cxx
// Author: Cameron Cuthbert (cameron.cuthbert@cern.ch)
// Based on JpsiExample written by: James Catmore (James.Catmore@cern.ch), E. Bouhova-Thacker (e.bouhova@cern.ch)
//                              James Walder (jwalder@cern.ch)
// This is an example showing the use of the JpsiEEFinder tool and alg, getting the actual Jpsis
// from StoreGate

#include "JpsiUpsilonTools/JpsiEEExample.h"

#include <sstream>                                      // C++ utilities
#include <string>
#include <algorithm>
#include <fstream>

#include "GaudiKernel/ISvcLocator.h"
#include "GaudiKernel/IPartPropSvc.h"
#include "EventInfo/EventInfo.h"
#include "EventInfo/EventID.h"
#include "DataModel/DataVector.h"
#include "DataModel/ElementLink.h"

#include "StoreGate/StoreGateSvc.h"             // Storegate stuff
#include "StoreGate/DataHandle.h"
#include "AthenaKernel/DefaultKey.h"

#include "TrkVertexAnalysisUtils/V0Tools.h"	// Handy toolbox for calculating values from ExtendedVxCandidates

#include "VxVertex/VxContainer.h"
#include "VxVertex/VxTrackAtVertex.h"
#include "TrkParticleBase/LinkToTrackParticleBase.h"
#include "Particle/TrackParticle.h"
#include "VxVertex/ExtendedVxCandidate.h"

#include "TFile.h"
#include "TNtuple.h"
#include "TROOT.h"

//////////////////////////////////////////////////////////////

JpsiEEExample::JpsiEEExample(const std::string& name, ISvcLocator* pSvcLocator) :
  AthAlgorithm(name, pSvcLocator),
  m_overwriteMass(false),
  m_electronMass(0.5109989),
  m_particleDataTable(0),
  m_V0Tools("Trk::V0Tools")
  
{
  
  // Declare user-defined properties - cuts and vertexing method
  declareProperty("overwriteMass",m_overwriteMass);
  declareProperty("electronMass", m_electronMass);
  declareProperty("outputNTupleName", m_userFName);
  declareProperty("V0Tools",m_V0Tools);
  declareProperty("JpsiEECandidates",m_JpsiEECandidatesKey = "JpsiEECandidates");

  // Global Counters; for truth statistics
  eventCntr = 0;
  jpsiEECntr = 0;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

StatusCode JpsiEEExample::initialize(){


  ATH_MSG_DEBUG("in initialize()");

  // get the tool service
  IToolSvc* toolSvc;
  StatusCode sc = service("ToolSvc",toolSvc);
  if (StatusCode::SUCCESS != sc) {
    ATH_MSG_ERROR("Unable to retrieve ToolSvc");
    return StatusCode::FAILURE;
  }
 
  // uploading the V0 tools
  if ( m_V0Tools.retrieve().isFailure() ) {
    ATH_MSG_FATAL("Failed to retrieve tool " << m_V0Tools);
    return StatusCode::FAILURE;
  } else {
    ATH_MSG_INFO("Retrieved tool " << m_V0Tools);
  }

  // Get the Particle Properties Service
  IPartPropSvc* partPropSvc = 0;
  sc = service("PartPropSvc", partPropSvc, true);
  if (sc.isFailure()) {
    ATH_MSG_ERROR("Could not initialize Particle Properties Service");
    return StatusCode::SUCCESS;
  } else {
    m_particleDataTable = partPropSvc->PDT();
    const HepPDT::ParticleData* pd_e = m_particleDataTable->particle(PDG::e_minus);
    if (!m_overwriteMass) m_electronMass = pd_e->mass();
  }
 
  // Open n-tuple file
  outputFile = new TFile(m_userFName.c_str(),"recreate");
  // Auxiliary n-tuples not covered by the automatic n-tuple makers
  // Decay angles
  initializeBranches(); // 
  auxTree = new TTree("AUX","AUX");
  auxTree->Branch("jpsiMass", &m_jpsiMass);
  auxTree->Branch("jpsiMassError", &m_jpsiMassError);
  auxTree->Branch("jpsiMassRec", &m_jpsiMassRec);
  auxTree->Branch("jpsiMassPullRec", &m_jpsiMassPullRec);
  auxTree->Branch("jpsiMassPullMC", &m_jpsiMassPullMC);
  auxTree->Branch("jpsiChi2", &m_jpsiChi2);
  
  auxTree->Branch("trkRefitCharge1",  &m_trkRefitCharge1);
  auxTree->Branch("trkRefitPx1",  &m_trkRefitPx1);
  auxTree->Branch("trkRefitPy1", &m_trkRefitPy1);
  auxTree->Branch("trkRefitPz1", &m_trkRefitPz1);
  auxTree->Branch("trkRefitCharge2",  &m_trkRefitCharge2);
  auxTree->Branch("trkRefitPx2",  &m_trkRefitPx2);
  auxTree->Branch("trkRefitPy2", &m_trkRefitPy2);
  auxTree->Branch("trkRefitPz2", &m_trkRefitPz2);

  auxTree->Branch("vx",m_vx);
  auxTree->Branch("vy",m_vy);
  auxTree->Branch("vz",m_vz);

  auxTree->Branch("trkOrigCharge1",  &m_trkOrigCharge1);
  auxTree->Branch("trkOrigPx1",  &m_trkOrigPx1);
  auxTree->Branch("trkOrigPy1", &m_trkOrigPy1);
  auxTree->Branch("trkOrigPz1", &m_trkOrigPz1);
  auxTree->Branch("trkOrigCharge2",  &m_trkOrigCharge2);
  auxTree->Branch("trkOrigPx2",  &m_trkOrigPx2);
  auxTree->Branch("trkOrigPy2", &m_trkOrigPy2);
  auxTree->Branch("trkOrigPz2", &m_trkOrigPz2);

  auxTree->Branch("rxyError", &m_rxyError);

  return sc;
  
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

StatusCode JpsiEEExample::execute() {


  ATH_MSG_DEBUG("in execute()");

  // Read in the Jpsis from StoreGate 
  const VxContainer* JpsiEEContainer(0);
  StatusCode sc = evtStore()->retrieve(JpsiEEContainer, m_JpsiEECandidatesKey);
  if (sc.isFailure() || !JpsiEEContainer) {
    ATH_MSG_WARNING("No Jpsi->ee Container Found, skipping event");
    return StatusCode::RECOVERABLE;
  } else {
    ATH_MSG_DEBUG("Obtained JpsiEEContainer");
  }
  ATH_MSG_DEBUG("number of jpsi->ee candidates " << JpsiEEContainer->size());
  jpsiEECntr += JpsiEEContainer->size(); // Count the Jpsis


  // Set the auxilliary branches of the ntuple to zero
  // to avoid accumulation 
  clearBranches();

  ++eventCntr;     // Increment event counter

  std::vector<double> trkMasses;
  trkMasses.push_back(m_electronMass);
  trkMasses.push_back(m_electronMass);

  // Extract information from the Jpsi candidates 
  for ( VxContainer::const_iterator vxcItr = JpsiEEContainer->begin() ; vxcItr != JpsiEEContainer->end() ; vxcItr++ ) {
    Trk::VxCandidate* myVxCandidate = (*vxcItr);
    Trk::ExtendedVxCandidate* jpsiEECandidate = dynamic_cast<Trk::ExtendedVxCandidate* >(myVxCandidate);

    // Calculate and plot the invariant masses and their errors
    double mass = m_V0Tools->invariantMass(jpsiEECandidate,trkMasses);	 
    m_jpsiMass->push_back(mass);
    double error = m_V0Tools->invariantMassError(jpsiEECandidate,trkMasses);
    m_jpsiMassError->push_back(error);
    m_jpsiChi2->push_back(m_V0Tools->chisq(jpsiEECandidate));

    //Refitted tracks momentum and charge
    const Trk::ParametersBase<5,Trk::Charged>*  bPer1 = (*((jpsiEECandidate)->vxTrackAtVertex()))[0]->perigeeAtVertex();
    //const Trk::MeasuredPerigee* mPer1 = dynamic_cast<const Trk::MeasuredPerigee*>(bPer1);
    double trkCharge1 = 1.;
    if (bPer1->parameters()[Trk::qOverP] < 0.) trkCharge1 = -1.;
    //if (mPer1->parameters()[Trk::qOverP] < 0.) trkCharge1 = -1.;
    const Trk::ParametersBase<5,Trk::Charged>*  bPer2 = (*((jpsiEECandidate)->vxTrackAtVertex()))[1]->perigeeAtVertex();
    //const Trk::MeasuredPerigee* mPer2 = dynamic_cast<const Trk::MeasuredPerigee*>(bPer2);
    double trkCharge2 = 1.;
    if (bPer2->parameters()[Trk::qOverP] < 0.) trkCharge2 = -1.;
    //if (mPer2->parameters()[Trk::qOverP] < 0.) trkCharge2 = -1.;

    m_trkRefitCharge1->push_back(trkCharge1);
    m_trkRefitPx1->push_back(m_V0Tools->trackMomentum(jpsiEECandidate,0).x());
    m_trkRefitPy1->push_back(m_V0Tools->trackMomentum(jpsiEECandidate,0).y());
    m_trkRefitPz1->push_back(m_V0Tools->trackMomentum(jpsiEECandidate,0).z());

    m_trkRefitCharge2->push_back(trkCharge2);
    m_trkRefitPx2->push_back(m_V0Tools->trackMomentum(jpsiEECandidate,1).x());
    m_trkRefitPy2->push_back(m_V0Tools->trackMomentum(jpsiEECandidate,1).y());
    m_trkRefitPz2->push_back(m_V0Tools->trackMomentum(jpsiEECandidate,1).z());

    //vertex position and error
    m_vx->push_back(m_V0Tools->vtx(jpsiEECandidate).x());
    m_vy->push_back(m_V0Tools->vtx(jpsiEECandidate).y());
    m_vz->push_back(m_V0Tools->vtx(jpsiEECandidate).z());

    double rxyError = m_V0Tools->rxyError(jpsiEECandidate);
    m_rxyError->push_back(rxyError);

    //original tracks
    const Trk::TrackParticleBase* origTrk1 = m_V0Tools->origTrackPB(jpsiEECandidate,0);
    const Trk::TrackParticleBase* origTrk2 = m_V0Tools->origTrackPB(jpsiEECandidate,1);

    const Rec::TrackParticle* origTP1 = dynamic_cast<const Rec::TrackParticle*>(origTrk1);
    double charge1 = 1.;
    if (origTP1->measuredPerigee()->parameters()[Trk::qOverP] < 0.) charge1 = -1.;
    m_trkOrigCharge1->push_back(charge1);
    m_trkOrigPx1->push_back(origTrk1->definingParameters().momentum()[Trk::px]);
    m_trkOrigPy1->push_back(origTrk1->definingParameters().momentum()[Trk::py]);
    m_trkOrigPz1->push_back(origTrk1->definingParameters().momentum()[Trk::pz]);

    const Rec::TrackParticle* origTP2 = dynamic_cast<const Rec::TrackParticle*>(origTrk2);
    double charge2 = 1.;
    if (origTP2->measuredPerigee()->parameters()[Trk::qOverP] < 0.) charge2 = -1.;
    m_trkOrigCharge2->push_back(charge2);
    m_trkOrigPx2->push_back(origTrk2->definingParameters().momentum()[Trk::px]);
    m_trkOrigPy2->push_back(origTrk2->definingParameters().momentum()[Trk::py]);
    m_trkOrigPz2->push_back(origTrk2->definingParameters().momentum()[Trk::pz]);

    std::vector<const Rec::TrackParticle*> origPair;
    origPair.push_back(origTP1);
    origPair.push_back(origTP2);
    double orig_mass = getInvariantMass(origPair,trkMasses);
    m_jpsiMassRec->push_back(orig_mass);
    m_jpsiMassPullRec->push_back((mass-orig_mass)/error);
    m_jpsiMassPullMC->push_back((mass-3096.88)/error);
  }
     
  // Write all data to the nTuple
  auxTree->Fill();

  // END OF ANALYSIS
  return StatusCode::SUCCESS;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

StatusCode JpsiEEExample::finalize() {

  ATH_MSG_DEBUG("in finalize()");

  std::cout << "===================" << std::endl;
  std::cout << "SUMMARY OF ANALYSIS" << std::endl;
  std::cout << "===================" << std::endl;
  std::cout << " " << std::endl;
  std::cout << "Total number of events analysed: " << eventCntr << std::endl;
  std::cout << "Total number of jpsi candidates: " << jpsiEECntr << std::endl;
  // Save auxiliary n-tuple
  outputFile->cd();
  auxTree->Write();
  auxTree->Print(); 
  // Close file
  outputFile->Close();
  return StatusCode::SUCCESS;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 

void JpsiEEExample::clearBranches() {

  m_jpsiMass->clear();
  m_jpsiMassError->clear();
  m_jpsiMassRec->clear();
  m_jpsiMassPullRec->clear();
  m_jpsiMassPullMC->clear();
  m_jpsiChi2->clear();

  m_trkRefitCharge1->clear();
  m_trkRefitPx1->clear();
  m_trkRefitPy1->clear();
  m_trkRefitPz1->clear();
  m_trkRefitCharge2->clear();
  m_trkRefitPx2->clear();
  m_trkRefitPy2->clear();
  m_trkRefitPz2->clear();

  m_vx->clear();
  m_vy->clear();
  m_vz->clear();

  m_trkOrigCharge1->clear();
  m_trkOrigPx1->clear();
  m_trkOrigPy1->clear();
  m_trkOrigPz1->clear();
  m_trkOrigCharge2->clear();
  m_trkOrigPx2->clear();
  m_trkOrigPy2->clear();
  m_trkOrigPz2->clear();

  m_rxyError->clear();

  return;

}

// ************************************************************************************************
// -------------------------------------------------------------------------------------------------
// initializeBranches - initializes branches of auxilliary ntuple
// -------------------------------------------------------------------------------------------------

void JpsiEEExample::initializeBranches(void) {

  m_jpsiMass = new std::vector<double>;
  m_jpsiMassError = new std::vector<double>;
  m_jpsiMassRec = new std::vector<double>;
  m_jpsiMassPullRec = new std::vector<double>;
  m_jpsiMassPullMC = new std::vector<double>;
  m_jpsiChi2 = new std::vector<double>;
  
  m_trkRefitCharge1 = new std::vector<double>;
  m_trkRefitPx1 = new std::vector<double>;
  m_trkRefitPy1 = new std::vector<double>;
  m_trkRefitPz1 = new std::vector<double>;
  m_trkRefitCharge2 = new std::vector<double>;
  m_trkRefitPx2 = new std::vector<double>;
  m_trkRefitPy2 = new std::vector<double>;
  m_trkRefitPz2 = new std::vector<double>;
  
  m_vx = new std::vector<double>;
  m_vy = new std::vector<double>;
  m_vz = new std::vector<double>;

  m_trkOrigCharge1 = new std::vector<double>;
  m_trkOrigPx1 = new std::vector<double>;
  m_trkOrigPy1 = new std::vector<double>;
  m_trkOrigPz1 = new std::vector<double>;
  m_trkOrigCharge2 = new std::vector<double>;
  m_trkOrigPx2 = new std::vector<double>;
  m_trkOrigPy2 = new std::vector<double>;
  m_trkOrigPz2 = new std::vector<double>;

  m_rxyError = new std::vector<double>;
  
  return;

}

// *********************************************************************************

// ---------------------------------------------------------------------------------
// getInvariantMass: returns invariant mass given a pair of tracks and their mass
// hypothesis. Each track must have a separate mass hypothesis in
// the vector, and they must be in the same order as the tracks in the track vector.
// Otherwise it will go horribly wrong.
// ---------------------------------------------------------------------------------

double JpsiEEExample::getInvariantMass(std::vector<const Rec::TrackParticle*> trksIn,std::vector<double> massHypotheses){

  std::vector<const Rec::TrackParticle*>::iterator trItrBegin=trksIn.begin();
  std::vector<const Rec::TrackParticle*>::iterator trItrEnd  =trksIn.end();
  std::vector<double>::iterator massHypBegin=massHypotheses.begin();

  std::vector<double> px,py,pz,e;
  double pxTmp=0.,pyTmp=0.,pzTmp=0.,massTmp=0.;

  for(;trItrBegin!=trItrEnd; trItrBegin++,massHypBegin++){
    pxTmp=(*trItrBegin)->px();
    pyTmp=(*trItrBegin)->py();
    pzTmp=(*trItrBegin)->pz();
    massTmp=*massHypBegin;
    px.push_back(pxTmp);
    py.push_back(pyTmp);
    pz.push_back(pzTmp);
    e.push_back(sqrt(pxTmp*pxTmp+pyTmp*pyTmp+pzTmp*pzTmp+massTmp*massTmp));
  }

  double pxSum,pySum,pzSum,eSum,M;
  pxSum=pySum=pzSum=eSum=M=0.;

  for(unsigned int i=0;i<px.size();i++){
    pxSum+=px[i];
    pySum+=py[i];
    pzSum+=pz[i];
    eSum += e[i];
  }
  M=sqrt((eSum*eSum)-(pxSum*pxSum)-(pySum*pySum)-(pzSum*pzSum));

  return M;
}


