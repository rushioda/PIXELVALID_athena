/*
  File autogenerated by gengetopt version 2.22.4
  generated with the following command:
  gengetopt 

  The developers of gengetopt consider the fixed text that goes in all
  gengetopt output files to be in the public domain:
  we make no copyright claims on it.
*/

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifndef FIX_UNUSED
#define FIX_UNUSED(X) (void) (X) /* avoid warnings for unused params */
#endif

#include <getopt.h>

#include "cmdline.h"

const char *gengetopt_args_info_purpose = "";

const char *gengetopt_args_info_usage = "Usage: iLumiCalc.exe [OPTIONS]...";

const char *gengetopt_args_info_description = "";

const char *gengetopt_args_info_help[] = {
  "  -h, --help                  Print help and exit",
  "      --version               Print version and exit",
  "\nFlags to specify data sample:",
  "  -r, --runnumber=STRING      Run number, range, or comma separated list, e.g. \n                                177986-178109,179710",
  "      --lbstart=INT           LumiBlock number begin",
  "      --lbend=INT             LumiBlock number end",
  "  -x, --xml=STRING            Input XML file name",
  "      --xml_blacklist=STRING  Input XML file of blacklist",
  "  -T, --tag=STRING            Input TAG file name",
  "      --root=STRING           Input ROOT file name",
  "      --tree=STRING           Name of TTree in input ROOT file to which Lumi \n                                string is attached",
  "      --d3pd_dir=STRING       Name of TDirectory in input ROOT file where Lumi \n                                string is stored",
  "\nFlags to control luminosity calculation:",
  "      --lumitag=STRING        Offline luminosity database tag  \n                                (default=`OflLumi-8TeV-002')",
  "      --online                Use online luminosity estimates instead of \n                                offline database  (default=off)",
  "      --lumichannel=INT       Luminosity estimate method by value  \n                                (default=`0')",
  "      --lumimethod=STRING     Luminosity estimate method by string  \n                                (default=`ATLAS_PREFERRED')",
  "  -t, --trigger=STRING        Trigger chain name used for prescale calculation",
  "      --livetrigger=STRING    L1 Trigger used for livetime calculation  \n                                (default=`L1_EM30')",
  "      --lar                   Calculate LAr defect fraction  (default=off)",
  "      --lartag=STRING         LAr noise burst database tag  \n                                (default=`LARBadChannelsOflEventVeto-UPD4-01')",
  "      --beamspot              Require online beamspot valid in trigger \n                                livefraction  (default=off)",
  "      --beamspottag=STRING    Online beamspot database tag  \n                                (default=`IndetBeamposOnl-HLT-UPD1-001-00')",
  "      --scale_lumi=DOUBLE     Scale luminosity with a constant value  \n                                (default=`1.0')",
  "\nFlags to control output:",
  "      --xml_out=STRING        Output XML file name",
  "      --xml_collisionlist     Output XML file of lists of collision candidates  \n                                (default=off)",
  "      --plots                 Create some plots on demand  (default=off)",
  "  -V, --verbose               Verbose output level  (default=off)",
  "      --quiet                 Quiet output level  (default=off)",
    0
};

typedef enum {ARG_NO
  , ARG_FLAG
  , ARG_STRING
  , ARG_INT
  , ARG_DOUBLE
} cmdline_parser_arg_type;

static
void clear_given (struct gengetopt_args_info *args_info);
static
void clear_args (struct gengetopt_args_info *args_info);

static int
cmdline_parser_internal (int argc, char **argv, struct gengetopt_args_info *args_info,
                        struct cmdline_parser_params *params, const char *additional_error);

static int
cmdline_parser_required2 (struct gengetopt_args_info *args_info, const char *prog_name, const char *additional_error);

static char *
gengetopt_strdup (const char *s);

static
void clear_given (struct gengetopt_args_info *args_info)
{
  args_info->help_given = 0 ;
  args_info->version_given = 0 ;
  args_info->runnumber_given = 0 ;
  args_info->lbstart_given = 0 ;
  args_info->lbend_given = 0 ;
  args_info->xml_given = 0 ;
  args_info->xml_blacklist_given = 0 ;
  args_info->tag_given = 0 ;
  args_info->root_given = 0 ;
  args_info->tree_given = 0 ;
  args_info->d3pd_dir_given = 0 ;
  args_info->lumitag_given = 0 ;
  args_info->online_given = 0 ;
  args_info->lumichannel_given = 0 ;
  args_info->lumimethod_given = 0 ;
  args_info->trigger_given = 0 ;
  args_info->livetrigger_given = 0 ;
  args_info->lar_given = 0 ;
  args_info->lartag_given = 0 ;
  args_info->beamspot_given = 0 ;
  args_info->beamspottag_given = 0 ;
  args_info->scale_lumi_given = 0 ;
  args_info->xml_out_given = 0 ;
  args_info->xml_collisionlist_given = 0 ;
  args_info->plots_given = 0 ;
  args_info->verbose_given = 0 ;
  args_info->quiet_given = 0 ;
}

static
void clear_args (struct gengetopt_args_info *args_info)
{
  FIX_UNUSED (args_info);
  args_info->runnumber_arg = NULL;
  args_info->runnumber_orig = NULL;
  args_info->lbstart_arg = NULL;
  args_info->lbstart_orig = NULL;
  args_info->lbend_arg = NULL;
  args_info->lbend_orig = NULL;
  args_info->xml_arg = NULL;
  args_info->xml_orig = NULL;
  args_info->xml_blacklist_arg = NULL;
  args_info->xml_blacklist_orig = NULL;
  args_info->tag_arg = NULL;
  args_info->tag_orig = NULL;
  args_info->root_arg = NULL;
  args_info->root_orig = NULL;
  args_info->tree_arg = NULL;
  args_info->tree_orig = NULL;
  args_info->d3pd_dir_arg = NULL;
  args_info->d3pd_dir_orig = NULL;
  args_info->lumitag_arg = gengetopt_strdup ("OflLumi-8TeV-002");
  args_info->lumitag_orig = NULL;
  args_info->online_flag = 0;
  args_info->lumichannel_arg = 0;
  args_info->lumichannel_orig = NULL;
  args_info->lumimethod_arg = gengetopt_strdup ("");
  args_info->lumimethod_orig = NULL;
  args_info->trigger_arg = NULL;
  args_info->trigger_orig = NULL;
  args_info->livetrigger_arg = gengetopt_strdup ("L1_EM30");
  args_info->livetrigger_orig = NULL;
  args_info->lar_flag = 0;
  args_info->lartag_arg = gengetopt_strdup ("LARBadChannelsOflEventVeto-UPD4-01");
  args_info->lartag_orig = NULL;
  args_info->beamspot_flag = 0;
  args_info->beamspottag_arg = gengetopt_strdup ("IndetBeamposOnl-HLT-UPD1-001-00");
  args_info->beamspottag_orig = NULL;
  args_info->scale_lumi_arg = 1.0;
  args_info->scale_lumi_orig = NULL;
  args_info->xml_out_arg = NULL;
  args_info->xml_out_orig = NULL;
  args_info->xml_collisionlist_flag = 0;
  args_info->plots_flag = 0;
  args_info->verbose_flag = 0;
  args_info->quiet_flag = 0;
  
}

static
void init_args_info(struct gengetopt_args_info *args_info)
{


  args_info->help_help = gengetopt_args_info_help[0] ;
  args_info->version_help = gengetopt_args_info_help[1] ;
  args_info->runnumber_help = gengetopt_args_info_help[3] ;
  args_info->runnumber_min = 0;
  args_info->runnumber_max = 0;
  args_info->lbstart_help = gengetopt_args_info_help[4] ;
  args_info->lbstart_min = 0;
  args_info->lbstart_max = 0;
  args_info->lbend_help = gengetopt_args_info_help[5] ;
  args_info->lbend_min = 0;
  args_info->lbend_max = 0;
  args_info->xml_help = gengetopt_args_info_help[6] ;
  args_info->xml_min = 0;
  args_info->xml_max = 0;
  args_info->xml_blacklist_help = gengetopt_args_info_help[7] ;
  args_info->tag_help = gengetopt_args_info_help[8] ;
  args_info->tag_min = 0;
  args_info->tag_max = 0;
  args_info->root_help = gengetopt_args_info_help[9] ;
  args_info->root_min = 0;
  args_info->root_max = 0;
  args_info->tree_help = gengetopt_args_info_help[10] ;
  args_info->d3pd_dir_help = gengetopt_args_info_help[11] ;
  args_info->lumitag_help = gengetopt_args_info_help[13] ;
  args_info->online_help = gengetopt_args_info_help[14] ;
  args_info->lumichannel_help = gengetopt_args_info_help[15] ;
  args_info->lumimethod_help = gengetopt_args_info_help[16] ;
  args_info->trigger_help = gengetopt_args_info_help[17] ;
  args_info->trigger_min = 0;
  args_info->trigger_max = 0;
  args_info->livetrigger_help = gengetopt_args_info_help[18] ;
  args_info->lar_help = gengetopt_args_info_help[19] ;
  args_info->lartag_help = gengetopt_args_info_help[20] ;
  args_info->beamspot_help = gengetopt_args_info_help[21] ;
  args_info->beamspottag_help = gengetopt_args_info_help[22] ;
  args_info->scale_lumi_help = gengetopt_args_info_help[23] ;
  args_info->xml_out_help = gengetopt_args_info_help[25] ;
  args_info->xml_collisionlist_help = gengetopt_args_info_help[26] ;
  args_info->plots_help = gengetopt_args_info_help[27] ;
  args_info->verbose_help = gengetopt_args_info_help[28] ;
  args_info->quiet_help = gengetopt_args_info_help[29] ;
  
}

void
cmdline_parser_print_version (void)
{
  printf ("%s %s\n",
     (strlen(CMDLINE_PARSER_PACKAGE_NAME) ? CMDLINE_PARSER_PACKAGE_NAME : CMDLINE_PARSER_PACKAGE),
     CMDLINE_PARSER_VERSION);
}

static void print_help_common(void) {
  cmdline_parser_print_version ();

  if (strlen(gengetopt_args_info_purpose) > 0)
    printf("\n%s\n", gengetopt_args_info_purpose);

  if (strlen(gengetopt_args_info_usage) > 0)
    printf("\n%s\n", gengetopt_args_info_usage);

  printf("\n");

  if (strlen(gengetopt_args_info_description) > 0)
    printf("%s\n\n", gengetopt_args_info_description);
}

void
cmdline_parser_print_help (void)
{
  int i = 0;
  print_help_common();
  while (gengetopt_args_info_help[i])
    printf("%s\n", gengetopt_args_info_help[i++]);
}

void
cmdline_parser_init (struct gengetopt_args_info *args_info)
{
  clear_given (args_info);
  clear_args (args_info);
  init_args_info (args_info);
}

void
cmdline_parser_params_init(struct cmdline_parser_params *params)
{
  if (params)
    { 
      params->override = 0;
      params->initialize = 1;
      params->check_required = 1;
      params->check_ambiguity = 0;
      params->print_errors = 1;
    }
}

struct cmdline_parser_params *
cmdline_parser_params_create(void)
{
  struct cmdline_parser_params *params = 
    (struct cmdline_parser_params *)malloc(sizeof(struct cmdline_parser_params));
  cmdline_parser_params_init(params);  
  return params;
}

static void
free_string_field (char **s)
{
  if (*s)
    {
      free (*s);
      *s = 0;
    }
}

/** @brief generic value variable */
union generic_value {
    int int_arg;
    double double_arg;
    char *string_arg;
    const char *default_string_arg;
};

/** @brief holds temporary values for multiple options */
struct generic_list
{
  union generic_value arg;
  char *orig;
  struct generic_list *next;
};

/**
 * @brief add a node at the head of the list 
 */
static void add_node(struct generic_list **list) {
  struct generic_list *new_node = (struct generic_list *) malloc (sizeof (struct generic_list));
  new_node->next = *list;
  *list = new_node;
  new_node->arg.string_arg = 0;
  new_node->orig = 0;
}

/**
 * The passed arg parameter is NOT set to 0 from this function
 */
static void
free_multiple_field(unsigned int len, void *arg, char ***orig)
{
  unsigned int i;
  if (arg) {
    for (i = 0; i < len; ++i)
      {
        free_string_field(&((*orig)[i]));
      }

    free (arg);
    free (*orig);
    *orig = 0;
  }
}

static void
free_multiple_string_field(unsigned int len, char ***arg, char ***orig)
{
  unsigned int i;
  if (*arg) {
    for (i = 0; i < len; ++i)
      {
        free_string_field(&((*arg)[i]));
        free_string_field(&((*orig)[i]));
      }
    free_string_field(&((*arg)[0])); /* free default string */

    free (*arg);
    *arg = 0;
    free (*orig);
    *orig = 0;
  }
}

static void
cmdline_parser_release (struct gengetopt_args_info *args_info)
{

  free_multiple_string_field (args_info->runnumber_given, &(args_info->runnumber_arg), &(args_info->runnumber_orig));
  free_multiple_field (args_info->lbstart_given, (void *)(args_info->lbstart_arg), &(args_info->lbstart_orig));
  args_info->lbstart_arg = 0;
  free_multiple_field (args_info->lbend_given, (void *)(args_info->lbend_arg), &(args_info->lbend_orig));
  args_info->lbend_arg = 0;
  free_multiple_string_field (args_info->xml_given, &(args_info->xml_arg), &(args_info->xml_orig));
  free_string_field (&(args_info->xml_blacklist_arg));
  free_string_field (&(args_info->xml_blacklist_orig));
  free_multiple_string_field (args_info->tag_given, &(args_info->tag_arg), &(args_info->tag_orig));
  free_multiple_string_field (args_info->root_given, &(args_info->root_arg), &(args_info->root_orig));
  free_string_field (&(args_info->tree_arg));
  free_string_field (&(args_info->tree_orig));
  free_string_field (&(args_info->d3pd_dir_arg));
  free_string_field (&(args_info->d3pd_dir_orig));
  free_string_field (&(args_info->lumitag_arg));
  free_string_field (&(args_info->lumitag_orig));
  free_string_field (&(args_info->lumichannel_orig));
  free_string_field (&(args_info->lumimethod_arg));
  free_string_field (&(args_info->lumimethod_orig));
  free_multiple_string_field (args_info->trigger_given, &(args_info->trigger_arg), &(args_info->trigger_orig));
  free_string_field (&(args_info->livetrigger_arg));
  free_string_field (&(args_info->livetrigger_orig));
  free_string_field (&(args_info->lartag_arg));
  free_string_field (&(args_info->lartag_orig));
  free_string_field (&(args_info->beamspottag_arg));
  free_string_field (&(args_info->beamspottag_orig));
  free_string_field (&(args_info->scale_lumi_orig));
  free_string_field (&(args_info->xml_out_arg));
  free_string_field (&(args_info->xml_out_orig));
  
  

  clear_given (args_info);
}


static void
write_into_file(FILE *outfile, const char *opt, const char *arg, const char *values[])
{
  FIX_UNUSED (values);
  if (arg) {
    fprintf(outfile, "%s=\"%s\"\n", opt, arg);
  } else {
    fprintf(outfile, "%s\n", opt);
  }
}

static void
write_multiple_into_file(FILE *outfile, int len, const char *opt, char **arg, const char *values[])
{
  int i;
  
  for (i = 0; i < len; ++i)
    write_into_file(outfile, opt, (arg ? arg[i] : 0), values);
}

int
cmdline_parser_dump(FILE *outfile, struct gengetopt_args_info *args_info)
{
  int i = 0;

  if (!outfile)
    {
      fprintf (stderr, "%s: cannot dump options to stream\n", CMDLINE_PARSER_PACKAGE);
      return EXIT_FAILURE;
    }

  if (args_info->help_given)
    write_into_file(outfile, "help", 0, 0 );
  if (args_info->version_given)
    write_into_file(outfile, "version", 0, 0 );
  write_multiple_into_file(outfile, args_info->runnumber_given, "runnumber", args_info->runnumber_orig, 0);
  write_multiple_into_file(outfile, args_info->lbstart_given, "lbstart", args_info->lbstart_orig, 0);
  write_multiple_into_file(outfile, args_info->lbend_given, "lbend", args_info->lbend_orig, 0);
  write_multiple_into_file(outfile, args_info->xml_given, "xml", args_info->xml_orig, 0);
  if (args_info->xml_blacklist_given)
    write_into_file(outfile, "xml_blacklist", args_info->xml_blacklist_orig, 0);
  write_multiple_into_file(outfile, args_info->tag_given, "tag", args_info->tag_orig, 0);
  write_multiple_into_file(outfile, args_info->root_given, "root", args_info->root_orig, 0);
  if (args_info->tree_given)
    write_into_file(outfile, "tree", args_info->tree_orig, 0);
  if (args_info->d3pd_dir_given)
    write_into_file(outfile, "d3pd_dir", args_info->d3pd_dir_orig, 0);
  if (args_info->lumitag_given)
    write_into_file(outfile, "lumitag", args_info->lumitag_orig, 0);
  if (args_info->online_given)
    write_into_file(outfile, "online", 0, 0 );
  if (args_info->lumichannel_given)
    write_into_file(outfile, "lumichannel", args_info->lumichannel_orig, 0);
  if (args_info->lumimethod_given)
    write_into_file(outfile, "lumimethod", args_info->lumimethod_orig, 0);
  write_multiple_into_file(outfile, args_info->trigger_given, "trigger", args_info->trigger_orig, 0);
  if (args_info->livetrigger_given)
    write_into_file(outfile, "livetrigger", args_info->livetrigger_orig, 0);
  if (args_info->lar_given)
    write_into_file(outfile, "lar", 0, 0 );
  if (args_info->lartag_given)
    write_into_file(outfile, "lartag", args_info->lartag_orig, 0);
  if (args_info->beamspot_given)
    write_into_file(outfile, "beamspot", 0, 0 );
  if (args_info->beamspottag_given)
    write_into_file(outfile, "beamspottag", args_info->beamspottag_orig, 0);
  if (args_info->scale_lumi_given)
    write_into_file(outfile, "scale_lumi", args_info->scale_lumi_orig, 0);
  if (args_info->xml_out_given)
    write_into_file(outfile, "xml_out", args_info->xml_out_orig, 0);
  if (args_info->xml_collisionlist_given)
    write_into_file(outfile, "xml_collisionlist", 0, 0 );
  if (args_info->plots_given)
    write_into_file(outfile, "plots", 0, 0 );
  if (args_info->verbose_given)
    write_into_file(outfile, "verbose", 0, 0 );
  if (args_info->quiet_given)
    write_into_file(outfile, "quiet", 0, 0 );
  

  i = EXIT_SUCCESS;
  return i;
}

int
cmdline_parser_file_save(const char *filename, struct gengetopt_args_info *args_info)
{
  FILE *outfile;
  int i = 0;

  outfile = fopen(filename, "w");

  if (!outfile)
    {
      fprintf (stderr, "%s: cannot open file for writing: %s\n", CMDLINE_PARSER_PACKAGE, filename);
      return EXIT_FAILURE;
    }

  i = cmdline_parser_dump(outfile, args_info);
  fclose (outfile);

  return i;
}

void
cmdline_parser_free (struct gengetopt_args_info *args_info)
{
  cmdline_parser_release (args_info);
}

/** @brief replacement of strdup, which is not standard */
char *
gengetopt_strdup (const char *s)
{
  char *result = 0;
  if (!s)
    return result;

  result = (char*)malloc(strlen(s) + 1);
  if (result == (char*)0)
    return (char*)0;
  strcpy(result, s);
  return result;
}

static char *
get_multiple_arg_token(const char *arg)
{
  const char *tok;
  char *ret;
  size_t len, num_of_escape, i, j;

  if (!arg)
    return 0;

  tok = strchr (arg, ',');
  num_of_escape = 0;

  /* make sure it is not escaped */
  while (tok)
    {
      if (*(tok-1) == '\\')
        {
          /* find the next one */
          tok = strchr (tok+1, ',');
          ++num_of_escape;
        }
      else
        break;
    }

  if (tok)
    len = (size_t)(tok - arg + 1);
  else
    len = strlen (arg) + 1;

  len -= num_of_escape;

  ret = (char *) malloc (len);

  i = 0;
  j = 0;
  while (arg[i] && (j < len-1))
    {
      if (arg[i] == '\\' && 
	  arg[ i + 1 ] && 
	  arg[ i + 1 ] == ',')
        ++i;

      ret[j++] = arg[i++];
    }

  ret[len-1] = '\0';

  return ret;
}

static const char *
get_multiple_arg_token_next(const char *arg)
{
  const char *tok;

  if (!arg)
    return 0;

  tok = strchr (arg, ',');

  /* make sure it is not escaped */
  while (tok)
    {
      if (*(tok-1) == '\\')
        {
          /* find the next one */
          tok = strchr (tok+1, ',');
        }
      else
        break;
    }

  if (! tok || strlen(tok) == 1)
    return 0;

  return tok+1;
}

static int
check_multiple_option_occurrences(const char *prog_name, unsigned int option_given, unsigned int min, unsigned int max, const char *option_desc);

int
check_multiple_option_occurrences(const char *prog_name, unsigned int option_given, unsigned int min, unsigned int max, const char *option_desc)
{
  int error = 0;

  if (option_given && (min > 0 || max > 0))
    {
      if (min > 0 && max > 0)
        {
          if (min == max)
            {
              /* specific occurrences */
              if (option_given != (unsigned int) min)
                {
                  fprintf (stderr, "%s: %s option occurrences must be %d\n",
                    prog_name, option_desc, min);
                  error = 1;
                }
            }
          else if (option_given < (unsigned int) min
                || option_given > (unsigned int) max)
            {
              /* range occurrences */
              fprintf (stderr, "%s: %s option occurrences must be between %d and %d\n",
                prog_name, option_desc, min, max);
              error = 1;
            }
        }
      else if (min > 0)
        {
          /* at least check */
          if (option_given < min)
            {
              fprintf (stderr, "%s: %s option occurrences must be at least %d\n",
                prog_name, option_desc, min);
              error = 1;
            }
        }
      else if (max > 0)
        {
          /* at most check */
          if (option_given > max)
            {
              fprintf (stderr, "%s: %s option occurrences must be at most %d\n",
                prog_name, option_desc, max);
              error = 1;
            }
        }
    }
    
  return error;
}
int
cmdline_parser (int argc, char **argv, struct gengetopt_args_info *args_info)
{
  return cmdline_parser2 (argc, argv, args_info, 0, 1, 1);
}

int
cmdline_parser_ext (int argc, char **argv, struct gengetopt_args_info *args_info,
                   struct cmdline_parser_params *params)
{
  int result;
  result = cmdline_parser_internal (argc, argv, args_info, params, 0);

  if (result == EXIT_FAILURE)
    {
      cmdline_parser_free (args_info);
      exit (EXIT_FAILURE);
    }
  
  return result;
}

int
cmdline_parser2 (int argc, char **argv, struct gengetopt_args_info *args_info, int override, int initialize, int check_required)
{
  int result;
  struct cmdline_parser_params params;
  
  params.override = override;
  params.initialize = initialize;
  params.check_required = check_required;
  params.check_ambiguity = 0;
  params.print_errors = 1;

  result = cmdline_parser_internal (argc, argv, args_info, &params, 0);

  if (result == EXIT_FAILURE)
    {
      cmdline_parser_free (args_info);
      exit (EXIT_FAILURE);
    }
  
  return result;
}

int
cmdline_parser_required (struct gengetopt_args_info *args_info, const char *prog_name)
{
  int result = EXIT_SUCCESS;

  if (cmdline_parser_required2(args_info, prog_name, 0) > 0)
    result = EXIT_FAILURE;

  if (result == EXIT_FAILURE)
    {
      cmdline_parser_free (args_info);
      exit (EXIT_FAILURE);
    }
  
  return result;
}

int
cmdline_parser_required2 (struct gengetopt_args_info *args_info, const char *prog_name, const char *additional_error)
{
  int error = 0;
  FIX_UNUSED (additional_error);

  /* checks for required options */
  if (check_multiple_option_occurrences(prog_name, args_info->runnumber_given, args_info->runnumber_min, args_info->runnumber_max, "'--runnumber' ('-r')"))
     error = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->lbstart_given, args_info->lbstart_min, args_info->lbstart_max, "'--lbstart'"))
     error = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->lbend_given, args_info->lbend_min, args_info->lbend_max, "'--lbend'"))
     error = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->xml_given, args_info->xml_min, args_info->xml_max, "'--xml' ('-x')"))
     error = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->tag_given, args_info->tag_min, args_info->tag_max, "'--tag' ('-T')"))
     error = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->root_given, args_info->root_min, args_info->root_max, "'--root'"))
     error = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->trigger_given, args_info->trigger_min, args_info->trigger_max, "'--trigger' ('-t')"))
     error = 1;
  
  
  /* checks for dependences among options */

  return error;
}


static char *package_name = 0;

/**
 * @brief updates an option
 * @param field the generic pointer to the field to update
 * @param orig_field the pointer to the orig field
 * @param field_given the pointer to the number of occurrence of this option
 * @param prev_given the pointer to the number of occurrence already seen
 * @param value the argument for this option (if null no arg was specified)
 * @param possible_values the possible values for this option (if specified)
 * @param default_value the default value (in case the option only accepts fixed values)
 * @param arg_type the type of this option
 * @param check_ambiguity @see cmdline_parser_params.check_ambiguity
 * @param override @see cmdline_parser_params.override
 * @param no_free whether to free a possible previous value
 * @param multiple_option whether this is a multiple option
 * @param long_opt the corresponding long option
 * @param short_opt the corresponding short option (or '-' if none)
 * @param additional_error possible further error specification
 */
static
int update_arg(void *field, char **orig_field,
               unsigned int *field_given, unsigned int *prev_given, 
               char *value, const char *possible_values[],
               const char *default_value,
               cmdline_parser_arg_type arg_type,
               int check_ambiguity, int override,
               int no_free, int multiple_option,
               const char *long_opt, char short_opt,
               const char *additional_error)
{
  char *stop_char = 0;
  const char *val = value;
  int found;
  char **string_field;
  FIX_UNUSED (field);

  stop_char = 0;
  found = 0;

  if (!multiple_option && prev_given && (*prev_given || (check_ambiguity && *field_given)))
    {
      if (short_opt != '-')
        fprintf (stderr, "%s: `--%s' (`-%c') option given more than once%s\n", 
               package_name, long_opt, short_opt,
               (additional_error ? additional_error : ""));
      else
        fprintf (stderr, "%s: `--%s' option given more than once%s\n", 
               package_name, long_opt,
               (additional_error ? additional_error : ""));
      return 1; /* failure */
    }

  FIX_UNUSED (default_value);
    
  if (field_given && *field_given && ! override)
    return 0;
  if (prev_given)
    (*prev_given)++;
  if (field_given)
    (*field_given)++;
  if (possible_values)
    val = possible_values[found];

  switch(arg_type) {
  case ARG_FLAG:
    *((int *)field) = !*((int *)field);
    break;
  case ARG_INT:
    if (val) *((int *)field) = strtol (val, &stop_char, 0);
    break;
  case ARG_DOUBLE:
    if (val) *((double *)field) = strtod (val, &stop_char);
    break;
  case ARG_STRING:
    if (val) {
      string_field = (char **)field;
      if (!no_free && *string_field)
        free (*string_field); /* free previous string */
      *string_field = gengetopt_strdup (val);
    }
    break;
  default:
    break;
  };

  /* check numeric conversion */
  switch(arg_type) {
  case ARG_INT:
  case ARG_DOUBLE:
    if (val && !(stop_char && *stop_char == '\0')) {
      fprintf(stderr, "%s: invalid numeric value: %s\n", package_name, val);
      return 1; /* failure */
    }
    break;
  default:
    ;
  };

  /* store the original value */
  switch(arg_type) {
  case ARG_NO:
  case ARG_FLAG:
    break;
  default:
    if (value && orig_field) {
      if (no_free) {
        *orig_field = value;
      } else {
        if (*orig_field)
          free (*orig_field); /* free previous string */
        *orig_field = gengetopt_strdup (value);
      }
    }
  };

  return 0; /* OK */
}

/**
 * @brief store information about a multiple option in a temporary list
 * @param list where to (temporarily) store multiple options
 */
static
int update_multiple_arg_temp(struct generic_list **list,
               unsigned int *prev_given, const char *val,
               const char *possible_values[], const char *default_value,
               cmdline_parser_arg_type arg_type,
               const char *long_opt, char short_opt,
               const char *additional_error)
{
  /* store single arguments */
  char *multi_token;
  const char *multi_next;

  if (arg_type == ARG_NO) {
    (*prev_given)++;
    return 0; /* OK */
  }

  multi_token = get_multiple_arg_token(val);
  multi_next = get_multiple_arg_token_next (val);

  while (1)
    {
      add_node (list);
      if (update_arg((void *)&((*list)->arg), &((*list)->orig), 0,
          prev_given, multi_token, possible_values, default_value, 
          arg_type, 0, 1, 1, 1, long_opt, short_opt, additional_error)) {
        if (multi_token) free(multi_token);
        return 1; /* failure */
      }

      if (multi_next)
        {
          multi_token = get_multiple_arg_token(multi_next);
          multi_next = get_multiple_arg_token_next (multi_next);
        }
      else
        break;
    }

  return 0; /* OK */
}

/**
 * @brief free the passed list (including possible string argument)
 */
static
void free_list(struct generic_list *list, short string_arg)
{
  if (list) {
    struct generic_list *tmp;
    while (list)
      {
        tmp = list;
        if (string_arg && list->arg.string_arg)
          free (list->arg.string_arg);
        if (list->orig)
          free (list->orig);
        list = list->next;
        free (tmp);
      }
  }
}

/**
 * @brief updates a multiple option starting from the passed list
 */
static
void update_multiple_arg(void *field, char ***orig_field,
               unsigned int field_given, unsigned int prev_given, union generic_value *default_value,
               cmdline_parser_arg_type arg_type,
               struct generic_list *list)
{
  int i;
  struct generic_list *tmp;

  if (prev_given && list) {
    *orig_field = (char **) realloc (*orig_field, (field_given + prev_given) * sizeof (char *));

    switch(arg_type) {
    case ARG_INT:
      *((int **)field) = (int *)realloc (*((int **)field), (field_given + prev_given) * sizeof (int)); break;
    case ARG_DOUBLE:
      *((double **)field) = (double *)realloc (*((double **)field), (field_given + prev_given) * sizeof (double)); break;
    case ARG_STRING:
      *((char ***)field) = (char **)realloc (*((char ***)field), (field_given + prev_given) * sizeof (char *)); break;
    default:
      break;
    };
    
    for (i = (prev_given - 1); i >= 0; --i)
      {
        tmp = list;
        
        switch(arg_type) {
        case ARG_INT:
          (*((int **)field))[i + field_given] = tmp->arg.int_arg; break;
        case ARG_DOUBLE:
          (*((double **)field))[i + field_given] = tmp->arg.double_arg; break;
        case ARG_STRING:
          (*((char ***)field))[i + field_given] = tmp->arg.string_arg; break;
        default:
          break;
        }        
        (*orig_field) [i + field_given] = list->orig;
        list = list->next;
        free (tmp);
      }
  } else { /* set the default value */
    if (default_value && ! field_given) {
      switch(arg_type) {
      case ARG_INT:
        if (! *((int **)field)) {
          *((int **)field) = (int *)malloc (sizeof (int));
          (*((int **)field))[0] = default_value->int_arg; 
        }
        break;
      case ARG_DOUBLE:
        if (! *((double **)field)) {
          *((double **)field) = (double *)malloc (sizeof (double));
          (*((double **)field))[0] = default_value->double_arg;
        }
        break;
      case ARG_STRING:
        if (! *((char ***)field)) {
          *((char ***)field) = (char **)malloc (sizeof (char *));
          (*((char ***)field))[0] = gengetopt_strdup(default_value->string_arg);
        }
        break;
      default: break;
      }
      if (!(*orig_field)) {
        *orig_field = (char **) malloc (sizeof (char *));
        (*orig_field)[0] = 0;
      }
    }
  }
}

int
cmdline_parser_internal (
  int argc, char **argv, struct gengetopt_args_info *args_info,
                        struct cmdline_parser_params *params, const char *additional_error)
{
  int c;	/* Character of the parsed option.  */

  struct generic_list * runnumber_list = NULL;
  struct generic_list * lbstart_list = NULL;
  struct generic_list * lbend_list = NULL;
  struct generic_list * xml_list = NULL;
  struct generic_list * tag_list = NULL;
  struct generic_list * root_list = NULL;
  struct generic_list * trigger_list = NULL;
  int error = 0;
  struct gengetopt_args_info local_args_info;
  
  int override;
  int initialize;
  int check_required;
  int check_ambiguity;
  
  package_name = argv[0];
  
  override = params->override;
  initialize = params->initialize;
  check_required = params->check_required;
  check_ambiguity = params->check_ambiguity;

  if (initialize)
    cmdline_parser_init (args_info);

  cmdline_parser_init (&local_args_info);

  optarg = 0;
  optind = 0;
  opterr = params->print_errors;
  optopt = '?';

  while (1)
    {
      int option_index = 0;

      static struct option long_options[] = {
        { "help",	0, NULL, 'h' },
        { "version",	0, NULL, 0 },
        { "runnumber",	1, NULL, 'r' },
        { "lbstart",	1, NULL, 0 },
        { "lbend",	1, NULL, 0 },
        { "xml",	1, NULL, 'x' },
        { "xml_blacklist",	1, NULL, 0 },
        { "tag",	1, NULL, 'T' },
        { "root",	1, NULL, 0 },
        { "tree",	1, NULL, 0 },
        { "d3pd_dir",	1, NULL, 0 },
        { "lumitag",	1, NULL, 0 },
        { "online",	0, NULL, 0 },
        { "lumichannel",	1, NULL, 0 },
        { "lumimethod",	1, NULL, 0 },
        { "trigger",	1, NULL, 't' },
        { "livetrigger",	1, NULL, 0 },
        { "lar",	0, NULL, 0 },
        { "lartag",	1, NULL, 0 },
        { "beamspot",	0, NULL, 0 },
        { "beamspottag",	1, NULL, 0 },
        { "scale_lumi",	1, NULL, 0 },
        { "xml_out",	1, NULL, 0 },
        { "xml_collisionlist",	0, NULL, 0 },
        { "plots",	0, NULL, 0 },
        { "verbose",	0, NULL, 'V' },
        { "quiet",	0, NULL, 0 },
        { 0,  0, 0, 0 }
      };

      c = getopt_long (argc, argv, "hr:x:T:t:V", long_options, &option_index);

      if (c == -1) break;	/* Exit from `while (1)' loop.  */

      switch (c)
        {
        case 'h':	/* Print help and exit.  */
          cmdline_parser_print_help ();
          cmdline_parser_free (&local_args_info);
          exit (EXIT_SUCCESS);

        case 'r':	/* Run number, range, or comma separated list, e.g. 177986-178109,179710.  */
        
          if (update_multiple_arg_temp(&runnumber_list, 
              &(local_args_info.runnumber_given), optarg, 0, 0, ARG_STRING,
              "runnumber", 'r',
              additional_error))
            goto failure;
        
          break;
        case 'x':	/* Input XML file name.  */
        
          if (update_multiple_arg_temp(&xml_list, 
              &(local_args_info.xml_given), optarg, 0, 0, ARG_STRING,
              "xml", 'x',
              additional_error))
            goto failure;
        
          break;
        case 'T':	/* Input TAG file name.  */
        
          if (update_multiple_arg_temp(&tag_list, 
              &(local_args_info.tag_given), optarg, 0, 0, ARG_STRING,
              "tag", 'T',
              additional_error))
            goto failure;
        
          break;
        case 't':	/* Trigger chain name used for prescale calculation.  */
        
          if (update_multiple_arg_temp(&trigger_list, 
              &(local_args_info.trigger_given), optarg, 0, 0, ARG_STRING,
              "trigger", 't',
              additional_error))
            goto failure;
        
          break;
        case 'V':	/* Verbose output level.  */
        
        
          if (update_arg((void *)&(args_info->verbose_flag), 0, &(args_info->verbose_given),
              &(local_args_info.verbose_given), optarg, 0, 0, ARG_FLAG,
              check_ambiguity, override, 1, 0, "verbose", 'V',
              additional_error))
            goto failure;
        
          break;

        case 0:	/* Long option with no short option */
          if (strcmp (long_options[option_index].name, "version") == 0) {
            cmdline_parser_print_version ();
            cmdline_parser_free (&local_args_info);
            exit (EXIT_SUCCESS);
          }

          /* LumiBlock number begin.  */
          if (strcmp (long_options[option_index].name, "lbstart") == 0)
          {
          
            if (update_multiple_arg_temp(&lbstart_list, 
                &(local_args_info.lbstart_given), optarg, 0, 0, ARG_INT,
                "lbstart", '-',
                additional_error))
              goto failure;
          
          }
          /* LumiBlock number end.  */
          else if (strcmp (long_options[option_index].name, "lbend") == 0)
          {
          
            if (update_multiple_arg_temp(&lbend_list, 
                &(local_args_info.lbend_given), optarg, 0, 0, ARG_INT,
                "lbend", '-',
                additional_error))
              goto failure;
          
          }
          /* Input XML file of blacklist.  */
          else if (strcmp (long_options[option_index].name, "xml_blacklist") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->xml_blacklist_arg), 
                 &(args_info->xml_blacklist_orig), &(args_info->xml_blacklist_given),
                &(local_args_info.xml_blacklist_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "xml_blacklist", '-',
                additional_error))
              goto failure;
          
          }
          /* Input ROOT file name.  */
          else if (strcmp (long_options[option_index].name, "root") == 0)
          {
          
            if (update_multiple_arg_temp(&root_list, 
                &(local_args_info.root_given), optarg, 0, 0, ARG_STRING,
                "root", '-',
                additional_error))
              goto failure;
          
          }
          /* Name of TTree in input ROOT file to which Lumi string is attached.  */
          else if (strcmp (long_options[option_index].name, "tree") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->tree_arg), 
                 &(args_info->tree_orig), &(args_info->tree_given),
                &(local_args_info.tree_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "tree", '-',
                additional_error))
              goto failure;
          
          }
          /* Name of TDirectory in input ROOT file where Lumi string is stored.  */
          else if (strcmp (long_options[option_index].name, "d3pd_dir") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->d3pd_dir_arg), 
                 &(args_info->d3pd_dir_orig), &(args_info->d3pd_dir_given),
                &(local_args_info.d3pd_dir_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "d3pd_dir", '-',
                additional_error))
              goto failure;
          
          }
          /* Offline luminosity database tag.  */
          else if (strcmp (long_options[option_index].name, "lumitag") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->lumitag_arg), 
                 &(args_info->lumitag_orig), &(args_info->lumitag_given),
                &(local_args_info.lumitag_given), optarg, 0, "OflLumi-8TeV-002", ARG_STRING,
                check_ambiguity, override, 0, 0,
                "lumitag", '-',
                additional_error))
              goto failure;
          
          }
          /* Use online luminosity estimates instead of offline database.  */
          else if (strcmp (long_options[option_index].name, "online") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->online_flag), 0, &(args_info->online_given),
                &(local_args_info.online_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "online", '-',
                additional_error))
              goto failure;
          
          }
          /* Luminosity estimate method by value.  */
          else if (strcmp (long_options[option_index].name, "lumichannel") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->lumichannel_arg), 
                 &(args_info->lumichannel_orig), &(args_info->lumichannel_given),
                &(local_args_info.lumichannel_given), optarg, 0, "0", ARG_INT,
                check_ambiguity, override, 0, 0,
                "lumichannel", '-',
                additional_error))
              goto failure;
          
          }
          /* Luminosity estimate method by string.  */
          else if (strcmp (long_options[option_index].name, "lumimethod") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->lumimethod_arg), 
                 &(args_info->lumimethod_orig), &(args_info->lumimethod_given),
                &(local_args_info.lumimethod_given), optarg, 0, "ATLAS_PREFERRED", ARG_STRING,
                check_ambiguity, override, 0, 0,
                "lumimethod", '-',
                additional_error))
              goto failure;
          
          }
          /* L1 Trigger used for livetime calculation.  */
          else if (strcmp (long_options[option_index].name, "livetrigger") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->livetrigger_arg), 
                 &(args_info->livetrigger_orig), &(args_info->livetrigger_given),
                &(local_args_info.livetrigger_given), optarg, 0, "L1_EM30", ARG_STRING,
                check_ambiguity, override, 0, 0,
                "livetrigger", '-',
                additional_error))
              goto failure;
          
          }
          /* Calculate LAr defect fraction.  */
          else if (strcmp (long_options[option_index].name, "lar") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->lar_flag), 0, &(args_info->lar_given),
                &(local_args_info.lar_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "lar", '-',
                additional_error))
              goto failure;
          
          }
          /* LAr noise burst database tag.  */
          else if (strcmp (long_options[option_index].name, "lartag") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->lartag_arg), 
                 &(args_info->lartag_orig), &(args_info->lartag_given),
                &(local_args_info.lartag_given), optarg, 0, "LARBadChannelsOflEventVeto-UPD4-01", ARG_STRING,
                check_ambiguity, override, 0, 0,
                "lartag", '-',
                additional_error))
              goto failure;
          
          }
          /* Require online beamspot valid in trigger livefraction.  */
          else if (strcmp (long_options[option_index].name, "beamspot") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->beamspot_flag), 0, &(args_info->beamspot_given),
                &(local_args_info.beamspot_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "beamspot", '-',
                additional_error))
              goto failure;
          
          }
          /* Online beamspot database tag.  */
          else if (strcmp (long_options[option_index].name, "beamspottag") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->beamspottag_arg), 
                 &(args_info->beamspottag_orig), &(args_info->beamspottag_given),
                &(local_args_info.beamspottag_given), optarg, 0, "IndetBeamposOnl-HLT-UPD1-001-00", ARG_STRING,
                check_ambiguity, override, 0, 0,
                "beamspottag", '-',
                additional_error))
              goto failure;
          
          }
          /* Scale luminosity with a constant value.  */
          else if (strcmp (long_options[option_index].name, "scale_lumi") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->scale_lumi_arg), 
                 &(args_info->scale_lumi_orig), &(args_info->scale_lumi_given),
                &(local_args_info.scale_lumi_given), optarg, 0, "1.0", ARG_DOUBLE,
                check_ambiguity, override, 0, 0,
                "scale_lumi", '-',
                additional_error))
              goto failure;
          
          }
          /* Output XML file name.  */
          else if (strcmp (long_options[option_index].name, "xml_out") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->xml_out_arg), 
                 &(args_info->xml_out_orig), &(args_info->xml_out_given),
                &(local_args_info.xml_out_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "xml_out", '-',
                additional_error))
              goto failure;
          
          }
          /* Output XML file of lists of collision candidates.  */
          else if (strcmp (long_options[option_index].name, "xml_collisionlist") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->xml_collisionlist_flag), 0, &(args_info->xml_collisionlist_given),
                &(local_args_info.xml_collisionlist_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "xml_collisionlist", '-',
                additional_error))
              goto failure;
          
          }
          /* Create some plots on demand.  */
          else if (strcmp (long_options[option_index].name, "plots") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->plots_flag), 0, &(args_info->plots_given),
                &(local_args_info.plots_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "plots", '-',
                additional_error))
              goto failure;
          
          }
          /* Quiet output level.  */
          else if (strcmp (long_options[option_index].name, "quiet") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->quiet_flag), 0, &(args_info->quiet_given),
                &(local_args_info.quiet_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "quiet", '-',
                additional_error))
              goto failure;
          
          }
          
          break;
        case '?':	/* Invalid option.  */
          /* `getopt_long' already printed an error message.  */
          goto failure;

        default:	/* bug: option not considered.  */
          fprintf (stderr, "%s: option unknown: %c%s\n", CMDLINE_PARSER_PACKAGE, c, (additional_error ? additional_error : ""));
          abort ();
        } /* switch */
    } /* while */


  update_multiple_arg((void *)&(args_info->runnumber_arg),
    &(args_info->runnumber_orig), args_info->runnumber_given,
    local_args_info.runnumber_given, 0,
    ARG_STRING, runnumber_list);
  update_multiple_arg((void *)&(args_info->lbstart_arg),
    &(args_info->lbstart_orig), args_info->lbstart_given,
    local_args_info.lbstart_given, 0,
    ARG_INT, lbstart_list);
  update_multiple_arg((void *)&(args_info->lbend_arg),
    &(args_info->lbend_orig), args_info->lbend_given,
    local_args_info.lbend_given, 0,
    ARG_INT, lbend_list);
  update_multiple_arg((void *)&(args_info->xml_arg),
    &(args_info->xml_orig), args_info->xml_given,
    local_args_info.xml_given, 0,
    ARG_STRING, xml_list);
  update_multiple_arg((void *)&(args_info->tag_arg),
    &(args_info->tag_orig), args_info->tag_given,
    local_args_info.tag_given, 0,
    ARG_STRING, tag_list);
  update_multiple_arg((void *)&(args_info->root_arg),
    &(args_info->root_orig), args_info->root_given,
    local_args_info.root_given, 0,
    ARG_STRING, root_list);
  update_multiple_arg((void *)&(args_info->trigger_arg),
    &(args_info->trigger_orig), args_info->trigger_given,
    local_args_info.trigger_given, 0,
    ARG_STRING, trigger_list);

  args_info->runnumber_given += local_args_info.runnumber_given;
  local_args_info.runnumber_given = 0;
  args_info->lbstart_given += local_args_info.lbstart_given;
  local_args_info.lbstart_given = 0;
  args_info->lbend_given += local_args_info.lbend_given;
  local_args_info.lbend_given = 0;
  args_info->xml_given += local_args_info.xml_given;
  local_args_info.xml_given = 0;
  args_info->tag_given += local_args_info.tag_given;
  local_args_info.tag_given = 0;
  args_info->root_given += local_args_info.root_given;
  local_args_info.root_given = 0;
  args_info->trigger_given += local_args_info.trigger_given;
  local_args_info.trigger_given = 0;
  
  if (check_required)
    {
      error += cmdline_parser_required2 (args_info, argv[0], additional_error);
    }

  cmdline_parser_release (&local_args_info);

  if ( error )
    return (EXIT_FAILURE);

  return 0;

failure:
  free_list (runnumber_list, 1 );
  free_list (lbstart_list, 0 );
  free_list (lbend_list, 0 );
  free_list (xml_list, 1 );
  free_list (tag_list, 1 );
  free_list (root_list, 1 );
  free_list (trigger_list, 1 );
  
  cmdline_parser_release (&local_args_info);
  return (EXIT_FAILURE);
}
