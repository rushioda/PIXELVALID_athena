/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.4
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "iLumiCalc.exe"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "iLumiCalc.exe"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "00-00-00"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char ** runnumber_arg;	/**< @brief Run number, range, or comma separated list, e.g. 177986-178109,179710.  */
  char ** runnumber_orig;	/**< @brief Run number, range, or comma separated list, e.g. 177986-178109,179710 original value given at command line.  */
  unsigned int runnumber_min; /**< @brief Run number, range, or comma separated list, e.g. 177986-178109,179710's minimum occurreces */
  unsigned int runnumber_max; /**< @brief Run number, range, or comma separated list, e.g. 177986-178109,179710's maximum occurreces */
  const char *runnumber_help; /**< @brief Run number, range, or comma separated list, e.g. 177986-178109,179710 help description.  */
  int* lbstart_arg;	/**< @brief LumiBlock number begin.  */
  char ** lbstart_orig;	/**< @brief LumiBlock number begin original value given at command line.  */
  unsigned int lbstart_min; /**< @brief LumiBlock number begin's minimum occurreces */
  unsigned int lbstart_max; /**< @brief LumiBlock number begin's maximum occurreces */
  const char *lbstart_help; /**< @brief LumiBlock number begin help description.  */
  int* lbend_arg;	/**< @brief LumiBlock number end.  */
  char ** lbend_orig;	/**< @brief LumiBlock number end original value given at command line.  */
  unsigned int lbend_min; /**< @brief LumiBlock number end's minimum occurreces */
  unsigned int lbend_max; /**< @brief LumiBlock number end's maximum occurreces */
  const char *lbend_help; /**< @brief LumiBlock number end help description.  */
  char ** xml_arg;	/**< @brief Input XML file name.  */
  char ** xml_orig;	/**< @brief Input XML file name original value given at command line.  */
  unsigned int xml_min; /**< @brief Input XML file name's minimum occurreces */
  unsigned int xml_max; /**< @brief Input XML file name's maximum occurreces */
  const char *xml_help; /**< @brief Input XML file name help description.  */
  char * xml_blacklist_arg;	/**< @brief Input XML file of blacklist.  */
  char * xml_blacklist_orig;	/**< @brief Input XML file of blacklist original value given at command line.  */
  const char *xml_blacklist_help; /**< @brief Input XML file of blacklist help description.  */
  char ** tag_arg;	/**< @brief Input TAG file name.  */
  char ** tag_orig;	/**< @brief Input TAG file name original value given at command line.  */
  unsigned int tag_min; /**< @brief Input TAG file name's minimum occurreces */
  unsigned int tag_max; /**< @brief Input TAG file name's maximum occurreces */
  const char *tag_help; /**< @brief Input TAG file name help description.  */
  char ** root_arg;	/**< @brief Input ROOT file name.  */
  char ** root_orig;	/**< @brief Input ROOT file name original value given at command line.  */
  unsigned int root_min; /**< @brief Input ROOT file name's minimum occurreces */
  unsigned int root_max; /**< @brief Input ROOT file name's maximum occurreces */
  const char *root_help; /**< @brief Input ROOT file name help description.  */
  char * tree_arg;	/**< @brief Name of TTree in input ROOT file to which Lumi string is attached.  */
  char * tree_orig;	/**< @brief Name of TTree in input ROOT file to which Lumi string is attached original value given at command line.  */
  const char *tree_help; /**< @brief Name of TTree in input ROOT file to which Lumi string is attached help description.  */
  char * d3pd_dir_arg;	/**< @brief Name of TDirectory in input ROOT file where Lumi string is stored.  */
  char * d3pd_dir_orig;	/**< @brief Name of TDirectory in input ROOT file where Lumi string is stored original value given at command line.  */
  const char *d3pd_dir_help; /**< @brief Name of TDirectory in input ROOT file where Lumi string is stored help description.  */
  char * lumitag_arg;	/**< @brief Offline luminosity database tag (default='OflLumi-8TeV-002').  */
  char * lumitag_orig;	/**< @brief Offline luminosity database tag original value given at command line.  */
  const char *lumitag_help; /**< @brief Offline luminosity database tag help description.  */
  int online_flag;	/**< @brief Use online luminosity estimates instead of offline database (default=off).  */
  const char *online_help; /**< @brief Use online luminosity estimates instead of offline database help description.  */
  int lumichannel_arg;	/**< @brief Luminosity estimate method by value (default='0').  */
  char * lumichannel_orig;	/**< @brief Luminosity estimate method by value original value given at command line.  */
  const char *lumichannel_help; /**< @brief Luminosity estimate method by value help description.  */
  char * lumimethod_arg;	/**< @brief Luminosity estimate method by string (default='ATLAS_PREFERRED').  */
  char * lumimethod_orig;	/**< @brief Luminosity estimate method by string original value given at command line.  */
  const char *lumimethod_help; /**< @brief Luminosity estimate method by string help description.  */
  char ** trigger_arg;	/**< @brief Trigger chain name used for prescale calculation.  */
  char ** trigger_orig;	/**< @brief Trigger chain name used for prescale calculation original value given at command line.  */
  unsigned int trigger_min; /**< @brief Trigger chain name used for prescale calculation's minimum occurreces */
  unsigned int trigger_max; /**< @brief Trigger chain name used for prescale calculation's maximum occurreces */
  const char *trigger_help; /**< @brief Trigger chain name used for prescale calculation help description.  */
  char * livetrigger_arg;	/**< @brief L1 Trigger used for livetime calculation (default='L1_EM30').  */
  char * livetrigger_orig;	/**< @brief L1 Trigger used for livetime calculation original value given at command line.  */
  const char *livetrigger_help; /**< @brief L1 Trigger used for livetime calculation help description.  */
  int lar_flag;	/**< @brief Calculate LAr defect fraction (default=off).  */
  const char *lar_help; /**< @brief Calculate LAr defect fraction help description.  */
  char * lartag_arg;	/**< @brief LAr noise burst database tag (default='LARBadChannelsOflEventVeto-UPD4-01').  */
  char * lartag_orig;	/**< @brief LAr noise burst database tag original value given at command line.  */
  const char *lartag_help; /**< @brief LAr noise burst database tag help description.  */
  int beamspot_flag;	/**< @brief Require online beamspot valid in trigger livefraction (default=off).  */
  const char *beamspot_help; /**< @brief Require online beamspot valid in trigger livefraction help description.  */
  char * beamspottag_arg;	/**< @brief Online beamspot database tag (default='IndetBeamposOnl-HLT-UPD1-001-00').  */
  char * beamspottag_orig;	/**< @brief Online beamspot database tag original value given at command line.  */
  const char *beamspottag_help; /**< @brief Online beamspot database tag help description.  */
  double scale_lumi_arg;	/**< @brief Scale luminosity with a constant value (default='1.0').  */
  char * scale_lumi_orig;	/**< @brief Scale luminosity with a constant value original value given at command line.  */
  const char *scale_lumi_help; /**< @brief Scale luminosity with a constant value help description.  */
  char * xml_out_arg;	/**< @brief Output XML file name.  */
  char * xml_out_orig;	/**< @brief Output XML file name original value given at command line.  */
  const char *xml_out_help; /**< @brief Output XML file name help description.  */
  int xml_collisionlist_flag;	/**< @brief Output XML file of lists of collision candidates (default=off).  */
  const char *xml_collisionlist_help; /**< @brief Output XML file of lists of collision candidates help description.  */
  int plots_flag;	/**< @brief Create some plots on demand (default=off).  */
  const char *plots_help; /**< @brief Create some plots on demand help description.  */
  int verbose_flag;	/**< @brief Verbose output level (default=off).  */
  const char *verbose_help; /**< @brief Verbose output level help description.  */
  int quiet_flag;	/**< @brief Quiet output level (default=off).  */
  const char *quiet_help; /**< @brief Quiet output level help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int runnumber_given ;	/**< @brief Whether runnumber was given.  */
  unsigned int lbstart_given ;	/**< @brief Whether lbstart was given.  */
  unsigned int lbend_given ;	/**< @brief Whether lbend was given.  */
  unsigned int xml_given ;	/**< @brief Whether xml was given.  */
  unsigned int xml_blacklist_given ;	/**< @brief Whether xml_blacklist was given.  */
  unsigned int tag_given ;	/**< @brief Whether tag was given.  */
  unsigned int root_given ;	/**< @brief Whether root was given.  */
  unsigned int tree_given ;	/**< @brief Whether tree was given.  */
  unsigned int d3pd_dir_given ;	/**< @brief Whether d3pd_dir was given.  */
  unsigned int lumitag_given ;	/**< @brief Whether lumitag was given.  */
  unsigned int online_given ;	/**< @brief Whether online was given.  */
  unsigned int lumichannel_given ;	/**< @brief Whether lumichannel was given.  */
  unsigned int lumimethod_given ;	/**< @brief Whether lumimethod was given.  */
  unsigned int trigger_given ;	/**< @brief Whether trigger was given.  */
  unsigned int livetrigger_given ;	/**< @brief Whether livetrigger was given.  */
  unsigned int lar_given ;	/**< @brief Whether lar was given.  */
  unsigned int lartag_given ;	/**< @brief Whether lartag was given.  */
  unsigned int beamspot_given ;	/**< @brief Whether beamspot was given.  */
  unsigned int beamspottag_given ;	/**< @brief Whether beamspottag was given.  */
  unsigned int scale_lumi_given ;	/**< @brief Whether scale_lumi was given.  */
  unsigned int xml_out_given ;	/**< @brief Whether xml_out was given.  */
  unsigned int xml_collisionlist_given ;	/**< @brief Whether xml_collisionlist was given.  */
  unsigned int plots_given ;	/**< @brief Whether plots was given.  */
  unsigned int verbose_given ;	/**< @brief Whether verbose was given.  */
  unsigned int quiet_given ;	/**< @brief Whether quiet was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
