# **********************************************************************
# $Id: heavyions_run.config 535694 2013-01-31 19:15:55Z vogel $
# **********************************************************************

############################################################
# GLOBAL
############################################################

#############
# Output
#############

output top_level {
  output Global {
    output Luminosity {
      output AnyTrigger {
      }
      output EF_muX {
      }
      output EF_eX {
      }
      output EF_zerobias_NoAlg {
      }
      output EF_rd0_filled_NoAlg {
      }
    }
    output Efficiency {
      output IDMuons {
      }
      output IDTile {
      }
      output TileMuons {
      }
    }
    output Synchronization {
      output BCID {
      }    
      output L1ID {
      }
    }
    output CaloCluster {
    }
    output MuonInnerDetector {
    }
    output DataFlow {
    }
    output TopLeptonJets {
    }
    output TopDilepton {
    }
    output WZFinder {
    }
    output DQShift {
    }
    output CollisionsTiming {
    }

    output Background {
      output Empty {
      }
      output Filled {
      }
      output UnpairIso {
      }
      output UnpairNonIso {
      }
    }
  }
}

#######################
# Histogram Assessments
#######################

dir GLOBAL {
  algorithm = GLOBAL_GatherData/ref

  dir Luminosity {
    reference = CentrallyManagedReferences
    dir AnyTrigger {
      output = Global/Luminosity/AnyTrigger
      hist aveMu_vs_LB {
      display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist actualMu_vs_LB {
      display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist aveMu {
      }
      hist actualMu {
      }
      hist nClustersAll_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersAll_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersAll_vs_aveMu {
      }
      hist nClustersB0_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersB0_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersB0_vs_aveMu {
      }
      hist nClustersB1_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersB1_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersB1_vs_aveMu {
      }
      hist nClustersB2_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersB2_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersB2_vs_aveMu {
      }
      hist nClustersECA_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersECA_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersECA_vs_aveMu {
      }
      hist nClustersECC_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersECC_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersECC_vs_aveMu {
      }
      hist nLooseVtx_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nLooseVtx_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nLooseVtx_vx_aveMu {
      }
      hist nTightVtx_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nTightVtx_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nTightVtx_vs_aveMu {
      }
    }
    dir EF_eX {
      output = Global/Luminosity/EF_eX
      hist aveMu_vs_LB {
      display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist actualMu_vs_LB {
      display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist aveMu {
      }
      hist actualMu {
      }
      hist nClustersAll_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersAll_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersAll_vs_aveMu {
      }
      hist nClustersB0_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersB0_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersB0_vs_aveMu {
      }
      hist nClustersB1_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersB1_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersB1_vs_aveMu {
      }
      hist nClustersB2_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersB2_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersB2_vs_aveMu {
      }
      hist nClustersECA_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersECA_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersECA_vs_aveMu {
      }
      hist nClustersECC_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersECC_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersECC_vs_aveMu {
      }
      hist nLooseVtx_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nLooseVtx_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nLooseVtx_vx_aveMu {
      }
      hist nTightVtx_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nTightVtx_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nTightVtx_vs_aveMu {
      }
    }
    dir EF_muX {
      output = Global/Luminosity/EF_muX
      hist aveMu_vs_LB {
      display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist actualMu_vs_LB {
      display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist aveMu {
      }
      hist actualMu {
      }
      hist nClustersAll_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersAll_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersAll_vs_aveMu {
      }
      hist nClustersB0_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersB0_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersB0_vs_aveMu {
      }
      hist nClustersB1_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersB1_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersB1_vs_aveMu {
      }
      hist nClustersB2_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersB2_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersB2_vs_aveMu {
      }
      hist nClustersECA_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersECA_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersECA_vs_aveMu {
      }
      hist nClustersECC_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersECC_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersECC_vs_aveMu {
      }
      hist nLooseVtx_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nLooseVtx_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nLooseVtx_vx_aveMu {
      }
      hist nTightVtx_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nTightVtx_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nTightVtx_vs_aveMu {
      }
    }
    dir EF_zerobias_NoAlg {
      output = Global/Luminosity/EF_zerobias_NoAlg
      hist aveMu_vs_LB {
      display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist actualMu_vs_LB {
      display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist aveMu {
      }
      hist actualMu {
      }
      hist nClustersAll_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersAll_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersAll_vs_aveMu {
      }
      hist nClustersB0_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersB0_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersB0_vs_aveMu {
      }
      hist nClustersB1_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersB1_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersB1_vs_aveMu {
      }
      hist nClustersB2_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersB2_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersB2_vs_aveMu {
      }
      hist nClustersECA_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersECA_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersECA_vs_aveMu {
      }
      hist nClustersECC_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersECC_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersECC_vs_aveMu {
      }
      hist nLooseVtx_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nLooseVtx_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nLooseVtx_vx_aveMu {
      }
      hist nTightVtx_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nTightVtx_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nTightVtx_vs_aveMu {
      }
    }
    dir EF_rd0_filled_NoAlg {
      output = Global/Luminosity/EF_rd0_filled_NoAlg
      hist aveMu_vs_LB {
      display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist actualMu_vs_LB {
      display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist aveMu {
      }
      hist actualMu {
      }
      hist nClustersAll_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersAll_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersAll_vs_aveMu {
      }
      hist nClustersB0_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersB0_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersB0_vs_aveMu {
      }
      hist nClustersB1_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersB1_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersB1_vs_aveMu {
      }
      hist nClustersB2_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersB2_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersB2_vs_aveMu {
      }
      hist nClustersECA_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersECA_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersECA_vs_aveMu {
      }
      hist nClustersECC_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersECC_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nClustersECC_vs_aveMu {
      }
      hist nLooseVtx_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nLooseVtx_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nLooseVtx_vx_aveMu {
      }
      hist nTightVtx_perMu_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nTightVtx_vs_LB {
        display = Draw=HIST][,TCanvas(1200,600),StatBox
      }
      hist nTightVtx_vs_aveMu {
      }
    }
  }
#  dir DQTTopLeptonJetsFinder {
#    reference = CentrallyManagedReferences
#    dir DQTTopLeptonJetsFinder {
#      output = Global/TopLeptonJets
#      hist graph_electron3jet {
#        algorithm = Global_GraphPrint
#      }
#      hist graph_electron4jet {
#        algorithm = Global_GraphPrint
#      }
#      hist graph_muon3jet {
#        algorithm = Global_GraphPrint
#      }
#      hist graph_muon4jet {
#        algorithm = Global_GraphPrint
#      }
#      hist graph_electron3jet_tag {
#        algorithm = Global_GraphPrint
#      }
#      hist graph_electron4jet_tag {
#        algorithm = Global_GraphPrint
#      }
#      hist graph_muon3jet_tag {
#        algorithm = Global_GraphPrint
#      }
#      hist graph_muon4jet_tag {
#        algorithm = Global_GraphPrint
#      }
#      hist graph_LeptonJets {
#      }
#      hist graph_LeptonJets@DQShift {
#        output = Global/DQShift
#      }
#      hist m_3jetmass_electron3jet {
#      }
#      hist m_3jetmass_electron4jet {
#      }
#      hist m_3jetmass_muon3jet {
#      }
#      hist m_3jetmass_muon4jet {
#      }
#      hist m_3jetmass_electron3jet_tag {
#      }
#      hist m_3jetmass_electron4jet_tag {
#      }
#      hist m_3jetmass_muon3jet_tag {
#      }
#      hist m_3jetmass_muon4jet_tag {
#      }
#    }
#  }
#  dir DQTGlobalTopDilFinder {
#    reference = CentrallyManagedReferences
#    dir DQTGlobalTopDilFinder {
#      output = Global/TopDilepton
#      hist graph_DiEle2jet {
#        algorithm = Global_GraphPrint
#      }
#      hist graph_DiEle3jet {
#        algorithm = Global_GraphPrint
#      }
#      hist graph_DiEle4jet {
#        algorithm = Global_GraphPrint
#      }
#      hist graph_DiMuon2jet {
#        algorithm = Global_GraphPrint
#      }
#      hist graph_DiMuon3jet {
#        algorithm = Global_GraphPrint
#      }
#      hist graph_DiMuon4jet {
#        algorithm = Global_GraphPrint
#      }
#      hist graph_EleMuon2jet {
#        algorithm = Global_GraphPrint
#      }
#      hist graph_EleMuon3jet {
#        algorithm = Global_GraphPrint
#      }
#      hist graph_EleMuon4jet {
#        algorithm = Global_GraphPrint
#      }
#      hist graph_DiLepton {
#      }
#      hist graph_DiLepton@DQShift {
#        output = Global/DQShift
#      }
#      hist m_ht_DiEle2jet {
#      }
#      hist m_ht_DiEle3jet {
#      }
#      hist m_ht_DiEle4jet {
#      }
#      hist m_ht_DiMuon2jet {
#      }
#      hist m_ht_DiMuon3jet {
#      }
#      hist m_ht_DiMuon4jet {
#      }
#      hist m_ht_EleMuon2jet {
#      }
#      hist m_ht_EleMuon3jet {
#      }
#      hist m_ht_EleMuon4jet {
#      }
#      hist m_ntag_DiEle {
#      }
#      hist m_ntag_DiMuon {
#      }
#      hist m_ntag_EleMuon {
#      }
#    }
#  }
#  dir DQTEFF {
#    reference = CentrallyManagedReferences
#    dir IDMuons {
#      output = Global/Efficiency/IDMuons
#      hist all_in_dir {
#      }
#    }
#    dir IDTile {
#      output = Global/Efficiency/IDTile
#      hist all_in_dir {
#      }
#    }
#    dir TileMuons {
#      output = Global/Efficiency/TileMuons
#      hist all_in_dir {
#      }
#    }
#  }
  dir DQTCaloCluster {
    reference = CentrallyManagedReferences
    dir DQTCaloCluster {
      output = Global/CaloCluster
      hist all_in_dir {
      } 
    }       
  }
  dir DQTGlobalWZFinder {
    reference = CentrallyManagedReferences
    dir DQTGlobalWZFinder {
      output = Global/WZFinder
      hist all_in_dir {
      } 
      hist m_JPsi_Counter_mu {
        algorithm = Global_NonPositiveSlope
      }
      hist m_Kshort_Counter_pi {
        algorithm = Global_NonPositiveSlope
      }
      hist m_Upsilon_Counter_mu {
        algorithm = Global_NonPositiveSlope
      }
      hist m_Z_Counter_el {
        algorithm = Global_NonPositiveSlope
      }
      hist m_Z_Counter_mu {
        algorithm = Global_NonPositiveSlope
      }
      hist m_JPsi_Counter_mu_triggerAware {
        algorithm = Global_NonPositiveSlope
      }
      hist m_Kshort_Counter_pi_triggerAware {
        algorithm = Global_NonPositiveSlope
      }
      hist m_Upsilon_Counter_mu_triggerAware {
        algorithm = Global_NonPositiveSlope
      }
      hist m_Z_Counter_el_triggerAware {
        algorithm = Global_NonPositiveSlope
      }
      hist m_Z_Counter_mu_triggerAware {
        algorithm = Global_NonPositiveSlope
      }
    }       
  }
  dir DQTMuonIDTrack {
    reference = CentrallyManagedReferences
    dir Trk {
      output = Global/MuonInnerDetector
      hist all_in_dir {
      }
      hist m_trk_Phi0sGM {
      }
      hist m_trk_EtasGM {
      }       
      hist m_trk_pOverQsGM {
      }  
      hist m_trk_ChargeDiff {
        display = LogY
      }
      hist m_trk_PtID {
        display = LogY
      }       
      hist m_trk_PtMuon {
        display = LogY
      }                
      hist m_trk_PtDiff {
      }                      
      hist m_JPsi_MassID {
      }
      hist m_JPsi_Counter {
        display = AxisRange(0,1000,"X")
      }
      hist m_JPsi_Mass2D {
      }
      hist m_Upsilon_MassID {
      }
      hist m_Upsilon_Mass2D {
        display = AxisRange(5000,14000,"Y")
      }
      hist m_Z_MassID {
      }
      hist m_Z_Mass2D {
      }
      hist m_trk_Phi0sGM@DQShift {
        output = Global/DQShift 
      }
      hist m_trk_EtasGM@DQShift {
        output = Global/DQShift 
      }       
      hist m_trk_pOverQsGM@DQShift {
        output = Global/DQShift 
      }  
      hist m_trk_ChargeDiff@DQShift {
        output = Global/DQShift 
        display = LogY
      }
      hist m_trk_PtID@DQShift {
        output = Global/DQShift 
        display = LogY
      }       
      hist m_trk_PtMuon@DQShift {
        output = Global/DQShift 
        display = LogY
      }                
      hist m_trk_PtDiff@DQShift {
        output = Global/DQShift 
      }                      
      hist m_JPsi_MassID@DQShift {
        output = Global/DQShift
      }
      hist m_JPsi_Counter@DQShift {
        output = Global/DQShift
        display = AxisRange(0,1000,"X")
      }
      hist m_JPsi_Mass2D@DQShift {
        output = Global/DQShift
      }
      hist m_Upsilon_MassID@DQShift {
        output = Global/DQShift
      }
      hist m_Upsilon_Mass2D@DQShift {
        output = Global/DQShift
        display = AxisRange(5000,14000,"Y")
      }
      hist m_Z_MassID@DQShift {
        output = Global/DQShift
      }
      hist m_Z_Mass2D@DQShift {
        output = Global/DQShift
      }
    }       
  }
  dir DQTRateMonTool {
    reference = CentrallyManagedReferences
    dir DQTRateMonTool {
      output = Global/DQShift
      hist e_gm_presence {
        display = LogY
      }
      hist n_e_over_n_gm {
      }
      hist n_j_over_n_e {
      }
      hist n_j_over_n_gm {
      }
      hist n_e_over_n_gm_Profile {
        display = AxisRange(0,1000,"X")
        algorithm = Global_ZeroSlope
      }
      hist n_j_over_n_e_Profile {
        display = AxisRange(0,1000,"X")
        algorithm = Global_ZeroSlope
      }
      hist n_j_over_n_gm_Profile {
        display = AxisRange(0,1000,"X")
        algorithm = Global_ZeroSlope
      }
      hist triggerMonitor1 {
        algorithm = All_Bins_Filled
      }
      hist triggerMonitor2 {
        algorithm = All_Bins_Filled
      }
    }
  }
  dir DQTSynch {
    reference = CentrallyManagedReferences
    dir BCID { 
      output = Global/Synchronization/BCID
      hist m_diff_CTP_SCT_BCID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }         
      hist m_diff_CTP_TRT_BCID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }
      hist m_diff_CTP_LAR_BCID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      } 
      hist m_diff_CTP_Tile_BCID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }            
      hist m_diff_CTP_RPC_BCID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }
      hist m_diff_SCT_TRT_BCID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }         
      hist m_diff_SCT_LAR_BCID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }
      hist m_diff_SCT_Tile_BCID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      } 
      hist m_diff_SCT_RPC_BCID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }            
      hist m_diff_TRT_LAR_BCID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }
      hist m_diff_TRT_Tile_BCID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }         
      hist m_diff_TRT_RPC_BCID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }
      hist m_diff_LAR_Tile_BCID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      } 
      hist m_diff_LAR_RPC_BCID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }            
      hist m_diff_Tile_RPC_BCID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }
      hist m_diff_Pixel_SCT_BCID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }
      hist m_diff_Pixel_TRT_BCID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }      
      hist m_diff_Pixel_LAR_BCID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }
      hist m_diff_Pixel_Tile_BCID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }     
      hist m_diff_Pixel_RPC_BCID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }
      hist m_diff_Pixel_CTP_BCID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      } 
      hist m_diff_CTP_SCT_BCID {
        display = LogY
      }         
      hist m_diff_CTP_TRT_BCID_Rebin {
        display = LogY
      }
      hist m_diff_CTP_LAR_BCID_Rebin {
        display = LogY
      } 
      hist m_diff_CTP_Tile_BCID_Rebin {
        display = LogY
      }            
      hist m_diff_CTP_RPC_BCID_Rebin {
        display = LogY
      }
      hist m_diff_SCT_TRT_BCID_Rebin {
        display = LogY
      }         
      hist m_diff_SCT_LAR_BCID_Rebin {
        display = LogY
      }
      hist m_diff_SCT_Tile_BCID_Rebin {
        display = LogY
      } 
      hist m_diff_SCT_RPC_BCID_Rebin {
        display = LogY
      }            
      hist m_diff_TRT_LAR_BCID_Rebin {
        display = LogY
      }
      hist m_diff_TRT_Tile_BCID_Rebin {
        display = LogY
      }         
      hist m_diff_TRT_RPC_BCID_Rebin {
        display = LogY
      }
      hist m_diff_LAR_Tile_BCID_Rebin {
        display = LogY
      } 
      hist m_diff_LAR_RPC_BCID_Rebin {
        display = LogY
      }            
      hist m_diff_Tile_RPC_BCID_Rebin {
        display = LogY
      }
      hist m_diff_Pixel_SCT_BCID_Rebin {
        display = LogY
      }
      hist m_diff_Pixel_TRT_BCID_Rebin {
        display = LogY
      }      
      hist m_diff_Pixel_LAR_BCID_Rebin {
        display = LogY
      }
      hist m_diff_Pixel_Tile_BCID_Rebin {
        display = LogY
      }     
      hist m_diff_Pixel_RPC_BCID_Rebin {
        display = LogY
      }
      hist m_diff_Pixel_CTP_BCID_Rebin {
        display = LogY
      }          
      hist m_BCID {
        algorithm = Global_ID_NoOffDiagonal
      }         
      hist m_BCID_rate {
      }                                  
      hist m_BCID@DQShift {
        output = Global/DQShift 
        algorithm = Global_ID_NoOffDiagonal
      }                                           
      hist all_in_dir {
      }       
    }  
    dir L1ID { 
      output = Global/Synchronization/L1ID
      hist m_diff_CTP_SCT_L1ID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }
      hist m_diff_CTP_TRT_L1ID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }  
      hist m_diff_CTP_LAR_L1ID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }
      hist m_diff_CTP_Tile_L1ID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }    
      hist m_diff_CTP_RPC_L1ID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }
      hist m_diff_SCT_TRT_L1ID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }  
      hist m_diff_SCT_LAR_L1ID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }
      hist m_diff_SCT_Tile_L1ID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }    
      hist m_diff_SCT_RPC_L1ID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }
      hist m_diff_TRT_LAR_L1ID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }        
      hist m_diff_TRT_Tile_L1ID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }
      hist m_diff_TRT_RPC_L1ID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }    
      hist m_diff_LAR_Tile_L1ID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }
      hist m_diff_LAR_RPC_L1ID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }                
      hist m_diff_Tile_RPC_L1ID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }
      hist m_diff_Pixel_SCT_L1ID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }  
      hist m_diff_Pixel_TRT_L1ID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }
      hist m_diff_Pixel_LAR_L1ID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      } 
      hist m_diff_Pixel_Tile_L1ID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }
      hist m_diff_Pixel_RPC_L1ID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }  
      hist m_diff_Pixel_CTP_L1ID {
        display = LogY
        algorithm = Global_Bins_Filled_OutsideRange
      }       
      hist m_diff_CTP_SCT_L1ID {
        display = LogY
      }
      hist m_diff_CTP_TRT_L1ID_Rebin {
        display = LogY        
      }  
      hist m_diff_CTP_LAR_L1ID_Rebin {
        display = LogY       
      }
      hist m_diff_CTP_Tile_L1ID_Rebin {
        display = LogY        
      }    
      hist m_diff_CTP_RPC_L1ID_Rebin {
        display = LogY       
      }
      hist m_diff_SCT_TRT_L1ID_Rebin {
        display = LogY        
      }  
      hist m_diff_SCT_LAR_L1ID_Rebin {
        display = LogY        
      }
      hist m_diff_SCT_Tile_L1ID_Rebin {
        display = LogY       
      }    
      hist m_diff_SCT_RPC_L1ID_Rebin {
        display = LogY        
      }
      hist m_diff_TRT_LAR_L1ID_Rebin {
        display = LogY
      }        
      hist m_diff_TRT_Tile_L1ID_Rebin {
        display = LogY        
      }
      hist m_diff_TRT_RPC_L1ID_Rebin {
        display = LogY        
      }    
      hist m_diff_LAR_Tile_L1ID_Rebin {
        display = LogY        
      }
      hist m_diff_LAR_RPC_L1ID_Rebin {
        display = LogY        
      }                
      hist m_diff_Tile_RPC_L1ID_Rebin {
        display = LogY        
      }
      hist m_diff_Pixel_SCT_L1ID_Rebin {
        display = LogY        
      }  
      hist m_diff_Pixel_TRT_L1ID_Rebin {
        display = LogY       
      }
      hist m_diff_Pixel_LAR_L1ID_Rebin {
        display = LogY        
      } 
      hist m_diff_Pixel_Tile_L1ID_Rebin {
        display = LogY        
      }
      hist m_diff_Pixel_RPC_L1ID_Rebin {
        display = LogY       
      }  
      hist m_diff_Pixel_CTP_L1ID_Rebin {
        display = LogY        
      }   
      hist m_L1ID {
        algorithm = Global_ID_NoOffDiagonal
      }         
      hist m_L1ID@DQShift {
        output = Global/DQShift 
        algorithm = Global_ID_NoOffDiagonal
      }         
      hist all_in_dir {
      }
    }
    dir Bfield {
      output = Global/DQShift
      hist m_Bfield_solenoid {
        algorithm = Global_Solenoid_Bins_Filled_OutsideRange
      }       
      hist m_Bfield_toroid {
        algorithm = Global_Toroid_Bins_Filled_OutsideRange
      }
    }
  }
  dir DQTDataFlow {
    output = Global/DataFlow
    hist eventflag_run.* {
      regex = 1
      algorithm = GLOBAL_GatherData
    }
    hist eventflag_run_Core@DQShift {
      output = Global/DQShift
      algorithm = Global_Graph_Empty
    }
    hist m_release_stage_lowStat {
      algorithm = Global_Bins_Diff_FromAvg_Identical
    }
    hist eventflag_summary_lowStat {
    }
  }

  dir DQTBackgroundMon {
    reference = CentrallyManagedReferences
    algorithm = BKG_GatherData/ref
    dir BackgroundMon {
      output = Global/Background
      hist all_in_dir {
      }
#      dir Filled {
#        output = Global/Background/Filled
#        hist all_in_dir {
#        }
#      }
#      dir Empty {
#        output = Global/Background/Empty
#        hist all_in_dir {
#        }
#      }
#      dir UnpairIso {
#        output = Global/Background/UnpairIso
#        hist all_in_dir {
#        }
#      }
#      dir UnpairNonIso {
#        output = Global/Background/UnpairNonIso
#        hist all_in_dir {
#        }
#      }
    }
  }
}

dir LAr {
    output = Global/CollisionsTiming
    dir RawChannel {
        dir EMECA {
            hist EMECA_A-C_side_time_difference@Global {
                algorithm = Global_TripleGaussCollFit_1D_EMEC
            }
            hist EMECA_lumi_block_v_time_difference@Global {
                algorithm = Global_TripleGaussCollFit_2D_EMEC
            }
        }
        dir FCALA {
            hist FCALA_A-C_side_time_difference@Global {
                algorithm = Global_TripleGaussCollFit_1D_FCAL
            }
            hist FCALA_lumi_block_v_time_difference@Global {
                algorithm = Global_TripleGaussCollFit_2D_FCAL
            }
        }
    }
}

dir Tile {
    dir MBTS {
        dir Cell {
            hist TimeDiff_A-C@Global {
                output = Global/CollisionsTiming
                algorithm = Global_TripleGaussCollFit_1D_MBTS
            }
            hist TimeDiff_A-C_LB@Global {
                output = Global/CollisionsTiming
                algorithm = Global_TripleGaussCollFit_2D_MBTS
            }
        }
    }
}


#############
# Algorithms
#############

algorithm GLOBAL_GatherData {
  libname = libdqm_algorithms.so
  name = GatherData
  algorithm ref {
    reference = CentrallyManagedReferences
  }
}

algorithm BKG_GatherData {
  libname = libdqm_algorithms.so
  name = GatherData
  algorithm ref {
    reference = CentrallyManagedReferences
  }
}

algorithm Global_Bins_Filled_OutsideRange {
        libname = libdqm_algorithms.so
        name = BinsFilledOutRange
        thresholds = NBinsThresh  
        xmin = -0.5
        xmax =  0.5
        MinStat = 1
}

algorithm Global_Solenoid_Bins_Filled_OutsideRange { 
        libname = libdqm_algorithms.so 
        name = BinsFilledOutRange 
        thresholds = NBinsThresh   
        xmin = 1.9 
        xmax =  2.0 
        MinStat = 1 
} 
 
algorithm Global_Toroid_Bins_Filled_OutsideRange { 
        libname = libdqm_algorithms.so 
        name = BinsFilledOutRange 
        thresholds = NBinsThresh   
        xmin = -0.5 
        xmax = -0.399 
        MinStat = 1 
} 

algorithm Global_CheckHisto_RMS {
        libname = libdqm_algorithms.so
        name = CheckHisto_RMS
        thresholds = NBinsThresh  
        xmin = 1.9
        xmax =  2.0
        MinStat = 1
}

algorithm Global_Bins_Diff_FromAvg_Identical {
	libname = libdqm_algorithms.so
	name = Bins_Diff_FromAvg
	thresholds = Global_Identical
        MinStat = 1
	NSigma = 0
	ignoreval = 0
	MaxDiffAbs = 0.5
}

algorithm Global_TripleGaussCollFit {
  libname = libdqm_algorithms.so
  name = Gaus3_default_Fit
  MinSignificance = 1
  allowFitMeanZeroPeak = 1
#  allowFitMeanNonzeroPeaks = 1
  allowFitResolution = 1
  thresholds = Global_TripleGauss_Dummy
}

algorithm Global_TripleGaussCollFit_1D_FCAL {
  libname = libdqm_algorithms.so
  name = Gaus3_default_Fit
  MinSignificance = 1
  allowFitMean = 1
#  allowFitMeanNonzeroPeaks = 1
  meanNonzeroPeaks = 34.1
  allowFitResolution = 1
  thresholds = Global_TripleGauss_Dummy
}

algorithm Global_TripleGaussCollFit_2D_FCAL {
  libname = libdqm_algorithms.so
  name = Gaus3_default_Fit
  MinSignificance = 1
  allowFitMean = 1
#  meanZeroPeak = 0
  meanNonzeroPeaks = 34.1
  resolutionAll = 2.4
  #reportSignificance = 1
  thresholds = Global_TripleGauss_Dummy
}

algorithm Global_TripleGaussCollFit_1D_EMEC {
  libname = libdqm_algorithms.so
  name = Gaus3_default_Fit
  MinSignificance = 1
  allowFitMean = 1
  allowFitMeanNonzeroPeaks = 1
  #meanNonzeroPeaks = 23
  #meanZeroPeak = -1
  #resolutionAll = 3
  allowFitResolution = 1
  thresholds = Global_TripleGauss_Dummy
}

algorithm Global_TripleGaussCollFit_2D_EMEC {
  libname = libdqm_algorithms.so
  name = Gaus3_default_Fit
  MinSignificance = 1
  allowFitMean = 1
  meanNonzeroPeaks = 22
  resolutionAll = 3
  #reportSignificance = 1
  thresholds = Global_TripleGauss_Dummy
}

algorithm Global_TripleGaussCollFit_1D_MBTS {
  libname = libdqm_algorithms.so
  name = Gaus3_default_Fit
  MinSignificance = 1
  allowFitMean = 1
#  allowFitMeanNonzeroPeaks = 1
  meanNonzeroPeaks = 22.7
  resolutionAll = 1.7
  allowFitResolution = 1
  thresholds = Global_TripleGauss_Dummy
}

algorithm Global_TripleGaussCollFit_2D_MBTS {
  libname = libdqm_algorithms.so
  name = Gaus3_default_Fit
  MinSignificance = 1
#  meanZeroPeaks = 0
  allowFitMean = 1
  meanNonzeroPeaks = 22.7
  resolutionAll = 1.7
  #reportSignificance = 1
  thresholds = Global_TripleGauss_Dummy
}

algorithm Global_ID_NoOffDiagonal {
        libname = libdqm_algorithms.so
        name = Bins_GreaterThan_Threshold
        thresholds = Global_ID_NDiagonal
        BinThreshold = 0
        MinStat = 7
}

compositeAlgorithm NotEmpty&LinearFit {
        libname = libdqm_algorithms.so
        subalgs = Histogram_Not_Empty,Simple_pol1_Fit
}

#compositeAlgorithm  NotEmpty&LinearFitTwice {
#        libname = libdqm_algorithms.so
#        subalgs = Histogram_Not_Empty,Simple_pol1_Fit,Simple_pol1_Fit_Clone
#}

algorithm Global_ZeroSlope {
        name = NotEmpty&LinearFit
#        name = NotEmpty&LinearFitTwice
        Simple_pol1_Fit|thresholds = Global_SlopeNotGreaterThanZeroThresh
#        Simple_pol1_Fit_Clone|thresholds = Global_SlopeNotLessThanZeroThresh
        MinStat = 100
        MinSignificance = 3
}

algorithm Global_NonPositiveSlope {
        name = NotEmpty&LinearFit
        Simple_pol1_Fit|thresholds = Global_NonPositiveSlope
        MinStat = 100
        MinSignificance = 3
	ignoreFirstLastBin = 1
}



algorithm Global_Graph_Empty {
	libname = libdqm_algorithms.so
	name = Graph_Empty
}

algorithm Global_GraphPrint {
	libname = libdqm_algorithms.so
	name = GraphPrint
}


#############
# Thresholds
#############

thresholds NBinsThresh {
  limits NBins {
    warning = 0  
    error = 1
  }
}

thresholds Global_Identical {
  limits NBins {
    warning = 1
    error = 1
  }
}

thresholds Global_TripleGauss_Dummy {
  limits N_zero_gaus {
    warning = 30
    error = 0
  }
}

thresholds Global_ID_NDiagonal {
  limits NBins {
    warning = 7
    error = 7
  }
}

thresholds Global_NonPositiveSlope {
  limits pol1[1] {
     warning = 0
     error = 3
  }
}

thresholds Global_SlopeNotGreaterThanZeroThresh {
  limits pol1[1] {
     warning = 0
     error = 999
  }
}

thresholds Global_SlopeNotLessThanZeroThresh {
  limits pol1[1] {
     warning = 0
     error = -999
  }
}

