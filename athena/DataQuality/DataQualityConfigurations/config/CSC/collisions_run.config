# **********************************************************************
# $Id: collisions_run.config 708157 2015-11-16 15:40:52Z panagoul $
# **********************************************************************

###########################################################
# CSC
###########################################################

#############
# Output
#############

output top_level {
  algorithm = WorstCaseSummary  
  #algorithm = CSCSimpleSummary  

  output MuonDetectors {

    #### -- CSC Begin
    output CSC {
      algorithm = CSCWorstCaseSummary
      #algorithm = CSCSimpleSummary
      output Shifter {
        algorithm = CSCWorstCaseSummary
        #algorithm = CSCSimpleSummary
        output CSCEA {
          output PrepRawData {
          }
          output Cluster {
          }
        } ## end CSCEA

        output CSCEC {
          output PrepRawData {
          }
          output Cluster {
          }
        } ## end CSCEC
      } ## end Shifter
      
      output Expert {
        weight = 0
        output CSCEA {
          output MuonSegments {
          }
          output RawData {
          }
        } ## end CSCEA

        output CSCEC {
          output MuonSegments {
          }
          output RawData {
          }
        } ## end CSCEC
      } ## end Shifter
    }
    #### -- CSC End	

  } #MuonDetectors
  

}

#######################
# Histogram Assessments
#######################

dir Muon {
   
  dir MuonRawDataMonitoring {

    #### -- CSC Begin
    dir CSC {
      dir Overview {
        ## these values are applied unless overridden
        reference = CentrallyManagedReferences
        output = MuonDetectors/CSC
        algorithm = CSC_Histogram_Not_Empty&GatherData
        dir CSCEA {
          dir Cluster {
#/run_180124/Muon/MuonRawDataMonitoring/CSC/Overview/CSCEA/Cluster
            output = MuonDetectors/CSC/Shifter/CSCEA/Cluster
            hist h2csc_clus_qmax_signal_EA {
              display = TCanvas(650,500),SetGridx,SetGridy,<AxisRange(0,4000,"X")>,LogZ
            }
            hist h1csc_clus_qmax_signal_EA_count {
              display = TCanvas(650,500),SetGridx,SetGridy,<AxisRange(0,4000,"X")>
              #algorithm = CSCCollisionsOviewKSTest
              algorithm = CSC_ClusSamplingTime_SideBand
            }
#            //hist h1csc_clus_qmax_signal_EA_occupancy {
#            //  display = TCanvas(850,500),SetGridx,SetGridy,<AxisRange(0.8,16.9,"X")>,LogY
#            //  algorithm = CSC_OccupancyOutlierFraction
#            //}
            hist h1csc_clus_occupancy_signal_EA {
              display = TCanvas(850,500),SetGridx,SetGridy,<AxisRange(0.8,16.9,"X")>,LogY
              algorithm = CSC_OccupancyOutlierFraction
            }
            hist h2csc_clus_qsum_signal_EA {
              display = TCanvas(650,500),SetGridx,SetGridy,<AxisRange(0,4000,"X")>,LogZ
            }
            hist h1csc_clus_qsum_signal_EA_count {
              display = TCanvas(650,500),SetGridx,SetGridy,<AxisRange(0,4000,"X")>
              algorithm = CSC_Histogram_Not_Empty&GatherData
            }
#            hist h1csc_clus_qsum_signal_EA_occupancy {
#              display = TCanvas(850,400),SetGridx,SetGridy,<AxisRange(0.8,16.9,"X")>,LogY
#              algorithm = CSC_OccupancyOutlierFraction
#            }
#            hist h1csc_clus_precision_time_signal_EA {
#              display = TCanvas(650,500),SetGridx,SetGridy,LogY
#              algorithm = CSC_ClusSamplingTime_SideBand
#            }
            hist h1csc_clus_qsum_signal_EA_lfitmean {
              display = TCanvas(850,400),SetGridx,SetGridy,<AxisRange(0.8,16.9,"X")>,LogY
              algorithm = CSC_Histogram_Not_Empty&GatherData
            }
          } ## end Cluster
          dir RDO {
            output = MuonDetectors/CSC/Expert/CSCEA/RawData
            hist h2csc_rdo_hitmap_signal_EA {
              display = TCanvas(650,500),SetGridx,SetGridy,LogZ
            }
            hist h2csc_rdo_etacluswidth_signal_EA {
              display = TCanvas(650,500),SetGridx,SetGridy,<AxisRange(0.8,16.9,"Y")>,LogZ
            }
            hist h2csc_rdo_phicluswidth_signal_EA {
              display = TCanvas(650,500),SetGridx,SetGridy,<AxisRange(0.8,16.9,"Y")>,LogZ
            }
            hist h1csc_rdo_hitmap_signal_EA_count {
              display = TCanvas(850,600),SetGridx,SetGridy,LogY
              #algorithm = CSCCollisionsOviewKSTest
              algorithm = CSC_Histogram_Not_Empty&GatherData
            }
            hist h1csc_rdo_hitmap_signal_EA_occupancy {
              display = TCanvas(850,400),SetGridx,SetGridy,LogY
              algorithm = CSC_OccupancyOutlierFraction
            }
          } ## end RDO
          dir PRD {
            output = MuonDetectors/CSC/Shifter/CSCEA/PrepRawData
            hist h2csc_prd_hitmap_signal_EA {
              display = TCanvas(650,500),SetGridx,SetGridy,LogZ
            }
            hist h1csc_prd_hitmap_signal_EA_count {
              display = TCanvas(850,600),SetGridx,SetGridy,LogY
              #algorithm = CSCCollisionsOviewKSTest
              algorithm = CSC_Histogram_Not_Empty&GatherData
            }
            hist h1csc_prd_hitmap_signal_EA_occupancy {
              display = TCanvas(850,400),SetGridx,SetGridy,LogY
              algorithm = CSC_OccupancyOutlierFraction
            }
            hist h2csc_prd_occvslb_EA {
              display = TCanvas(650,500),SetGridx,SetGridy,LogZ
            }
          } ## end PRD

        } ## end CSCEA


        dir CSCEC {
          dir Cluster {
            output = MuonDetectors/CSC/Shifter/CSCEC/Cluster
            hist h2csc_clus_qmax_signal_EC {
              display = TCanvas(650,500),SetGridx,SetGridy,<AxisRange(0,4000,"X")>,LogZ
            }
            hist h1csc_clus_qmax_signal_EC_count {
              display = TCanvas(650,500),SetGridx,SetGridy,<AxisRange(0,4000,"X")
              algorithm = CSC_Histogram_Not_Empty&GatherData
            }
#            //hist h1csc_clus_qmax_signal_EC_occupancy {
#            //  display = TCanvas(850,500),SetGridx,SetGridy,<AxisRange(0.8,16.9,"X")>,LogY
#            //  algorithm = CSC_OccupancyOutlierFraction
#            //}
            hist h1csc_clus_occupancy_signal_EC {
              display = TCanvas(850,500),SetGridx,SetGridy,<AxisRange(0.8,16.9,"X")>,LogY
              algorithm = CSC_OccupancyOutlierFraction
            }
            hist h2csc_clus_qsum_signal_EC {
              display = TCanvas(650,500),SetGridx,SetGridy,<AxisRange(0,4000,"X")>,LogZ
            }
            hist h1csc_clus_qsum_signal_EC_count {
              display = TCanvas(650,500),SetGridx,SetGridy,<AxisRange(0,4000,"X")>
              #algorithm = CSCCollisionsOviewKSTest
              algorithm = CSC_Histogram_Not_Empty&GatherData
            }
#            hist h1csc_clus_qsum_signal_EC_occupancy {
#              display = TCanvas(850,400),SetGridx,SetGridy,<AxisRange(0.8,16.9,"X")>,LogY
#              algorithm = CSC_OccupancyOutlierFraction
#            }
#            hist h1csc_clus_precision_time_signal_EC {
#              #output = MuonDetectors/CSC/CSCEC
#              display = TCanvas(650,500),SetGridx,SetGridy,LogY
#              algorithm = CSC_ClusSamplingTime_SideBand
#            }
            hist h1csc_clus_qsum_signal_EC_lfitmean {
              display = TCanvas(850,400),SetGridx,SetGridy,<AxisRange(0.8,16.9,"X")>,LogY
              algorithm = CSC_Histogram_Not_Empty&GatherData
            }
          } ## end Cluster
          dir RDO {
            output = MuonDetectors/CSC/Expert/CSCEC/RawData
            hist h2csc_rdo_hitmap_signal_EC {
              display = TCanvas(650,500),SetGridx,SetGridy,LogZ
            }
            hist h2csc_rdo_etacluswidth_signal_EC {
              display = TCanvas(650,500),SetGridx,SetGridy,<AxisRange(0.8,16.9,"Y")>,LogZ
            }
            hist h2csc_rdo_phicluswidth_signal_EC {
              display = TCanvas(650,500),SetGridx,SetGridy,<AxisRange(0.8,16.9,"Y")>,LogZ
            }
            hist h1csc_rdo_hitmap_signal_EC_count {
              display = TCanvas(850,600),SetGridx,SetGridy,LogY
              #algorithm = CSCCollisionsOviewKSTest
              algorithm = CSC_Histogram_Not_Empty&GatherData
            }
            hist h1csc_rdo_hitmap_signal_EC_occupancy {
              display = TCanvas(850,400),SetGridx,SetGridy,LogY
              algorithm = CSC_OccupancyOutlierFraction
            }
          } ## end RDO
          dir PRD {
            output = MuonDetectors/CSC/Shifter/CSCEC/PrepRawData
            hist h2csc_prd_hitmap_signal_EC {
              display = TCanvas(650,500),SetGridx,SetGridy,LogZ
            }
            hist h1csc_prd_hitmap_signal_EC_count {
              display = TCanvas(850,600),SetGridx,SetGridy,LogY
              #algorithm = CSCCollisionsOviewKSTest
              algorithm = CSC_Histogram_Not_Empty&GatherData
            }
            hist h1csc_prd_hitmap_signal_EC_occupancy {
              display = TCanvas(850,400),SetGridx,SetGridy,LogY
              algorithm = CSC_OccupancyOutlierFraction
            }
            hist h2csc_prd_occvslb_EC {
              display = TCanvas(650,500),SetGridx,SetGridy,LogZ
            }
          } ## end PRD

        } ## end CSCEC
      } ## end Overview 
    } ## end CSC
    #### -- CSC End
    
  } ## closing MuonRawDataMonitoring

  dir MuonSegmentMonitoring {

    #### -- CSC Begin
    dir EndCapA {
      dir Overview {
        ## these values are applied unless overridden
        reference = CentrallyManagedReferences
        output = MuonDetectors/CSC
        algorithm = CSC_Histogram_Not_Empty&GatherData
        dir MuonSegments {
          dir CSC {
            output = MuonDetectors/CSC/Expert/CSCEA/MuonSegments
            hist Muon_Segm_Efficiency_EA {
               display = TCanvas(650,500),SetGridx,SetGridy,<AxisRange(0.8,16.9,"X")>,LogY
               algorithm = CSC_Histogram_Not_Empty&GatherData
            }
            hist Muon_Segm_QSumEtaGoodClusPerLayer_EA {
              display = TCanvas(650,500),SetGridx,SetGridy,<AxisRange(0,4000,"X")>
            }
            hist Muon_Segm_TimeEtaGoodClusPerLayer_EA {
              display = TCanvas(650,500),SetGridx,SetGridy,<AxisRange(0,200,"X")>
            }
            hist Muon_Segm_QSumPhiGoodClusPerLayer_EA {
              display = TCanvas(650,500),SetGridx,SetGridy,<AxisRange(0,4000,"X")>
            }
            hist Muon_Segm_TimePhiGoodClusPerLayer_EA {
              display = TCanvas(650,500),SetGridx,SetGridy,<AxisRange(0,200,"X")>
            }
          } ## End CSC
        } ## End MuonSegments
      } ## End Overview
    } ## End EndCapA
    dir EndCapC {
      dir Overview {
        ## these values are applied unless overridden
        reference = CentrallyManagedReferences
        output = MuonDetectors/CSC
        algorithm = CSC_Histogram_Not_Empty&GatherData
        dir MuonSegments {
          dir CSC {
            output = MuonDetectors/CSC/Expert/CSCEC/MuonSegments
            hist Muon_Segm_Efficiency_EC {
              display = TCanvas(650,500),SetGridx,SetGridy,<AxisRange(0.8,16.9,"X")>,LogY
              algorithm = CSC_Histogram_Not_Empty&GatherData
            }
            hist Muon_Segm_QSumEtaGoodClusPerLayer_EC {
              display = TCanvas(650,500),SetGridx,SetGridy,<AxisRange(0,4000,"X")>
            }
            hist Muon_Segm_TimeEtaGoodClusPerLayer_EC {
              display = TCanvas(650,500),SetGridx,SetGridy,<AxisRange(0,200,"X")>
            }
            hist Muon_Segm_QSumPhiGoodClusPerLayer_EC {
              display = TCanvas(650,500),SetGridx,SetGridy,<AxisRange(0,4000,"X")>
            }
            hist Muon_Segm_TimePhiGoodClusPerLayer_EC {
              display = TCanvas(650,500),SetGridx,SetGridy,<AxisRange(0,200,"X")>
            }
          } ## End CSC
        } ## End MuonSegments
      } ## End Overview
    } ## End EndCapC
    #### -- CSC End

  } ## closing MuonSegmentMonitoring


}

#############
# Algorithms
#############

compositeAlgorithm CSC_Histogram_Not_Empty&GatherData {
  subalgs = GatherData,Histogram_Not_Empty
    libnames = libdqm_algorithms.so
}
algorithm CSC_Histogram_Not_Empty&GatherData {
  name = CSC_Histogram_Not_Empty&GatherData
}
algorithm CSC_Histogram_Not_Empty {
  libname = libdqm_algorithms.so
    name = Histogram_Not_Empty
}

## -- CSC Begin
## precision cluster timing distribution
## what fraction is (<= 50 ns || >= 150 ns)
algorithm CSC_ClusSamplingTime_SideBand {
  libname = libdqm_algorithms.so
    name = SideBand_Relative
    thresholds = th_CSC_ClusSamplingTime
    Min = 1
    Max = 149
    UseUnderflow = 0
    UseOverflow = 0
}

## avg occupancy N sigma away from mean
## ignoring empty bins..

#algorithm CSC_OccupancyNSigmaAway {
#  libname = libdqm_algorithms.so
#  name = Bins_Diff_FromAvg
#  NSigma = 5
#  ignoreval = 0
#  thresholds = th_CSC_OccupancyThreshold
#}

algorithm CSC_OccupancyOutlierFraction {
  libname = libdqm_algorithms.so
    name = OutlierTest_Grubbs
    SkipBinModulo = 5
    Significance = 0.04
    MinStatPerBin = 5
    Min = 0.8
    Max = 17.0
    IsMinStatOutlier = 1
    thresholds = th_CSC_OccupancyThreshold
}

algorithm CSCCollisionsOviewKSTest {
  libname = libdqm_algorithms.so
    name = KolmogorovTest_Prob
    thresholds = th_CSC_KSTest
    reference = stream=physics_Main:CentrallyManagedReferences_Main;CentrallyManagedReferences
}

algorithm CSCSimpleSummary {
  libname = libdqm_summaries.so
    name = SimpleSummary
}

algorithm CSCWorstCaseSummary {
  libname = libdqm_summaries.so
    name = WorstCaseSummary
}

## -- CSC End

#############
# Thresholds
#############

## -- CSC Begin
thresholds th_CSC_ClusSamplingTime {
  limits Threshold {
    MinStat = 100
## good thresholds
   #warning = 0.1
   #error = 0.25

   ## loose thresholds (latency setting adjustment needed)
   warning = 0.6
   error = 0.9
  }
}

thresholds th_CSC_OccupancyThreshold {
  limits Threshold {
    MinStat = 100
    ## good thresholds
    warning = 0.1
    error = 0.3
  }
}

thresholds th_CSC_KSTest {
  limits P {
    warning = 0.4
    error = 0.1
  }
}
## -- CSC End
