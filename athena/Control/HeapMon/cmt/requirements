package HeapMon

author Mous Tatarkhanov <tmmous@berkeley.edu>

use AtlasPolicy      AtlasPolicy-*
use AtlasPython      AtlasPython-*     External
use AtlasGPerfTools  AtlasGPerfTools-* External
#use GaudiInterface 	GaudiInterface-* 	External

private
use AtlasROOT   		AtlasROOT-*   		External
end_private

# Add cmake compatibility (doesn't do anything on CMT side of things)
apply_pattern cmake_add_command command="find_package(ROOT COMPONENTS RIO Tree)"

application MemoryScanner MemoryScanner.cxx

#apply_pattern component_library

# the memory marker relies on gcc (tag gcc is set in ExternalPolicy, which
# comes in from AtlasPolicy) internals: only build on that platform (there
# will be a warning on other platforms, but we don't have any others right
# now, so no worries :) )

# although "gcc" as tag should do, that doesn't work on gcc344 (even as the
# tag is defined according to "cmt show all_tags"), so use Linux (works, as
# empirically determined :P )
macro python_extension_fragment "" \
   Linux "python_extension -dependencies -header=python_extension_header" \
   Darwin "python_extension -dependencies -header=python_extension_header"
make_fragment $(python_extension_fragment)
       
# hack: empty document will be ignored; anything else doesn't work with CMT
document python_extension MemoryMarker files="*.c" MemoryMarker.c

# force order between installing header files and build of .c files
macro_append MemoryMarker_dependencies " install_includes "

# libraries for retrieving debug info
macro_append MemoryMarker_linkopts "" \
  use_bfd                          " -aarchive -L/usr/local/lib -L/usr/lib -lbfd -liberty "

macro_append cflags "" \
   use_bfd                          " -DHEPHAESTUS_USE_BFD "

# install python module files (actually, the .so is done in the fragment)
apply_pattern declare_python_modules files="*.py"


private

# always use new ABI and force optimization, even in debug mode
macro_append cppflags " -fuse-cxa-atexit "
macro_append cflags " -O3 "
