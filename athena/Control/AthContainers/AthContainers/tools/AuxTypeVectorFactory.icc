/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

// $Id$
/**
 * @file AthContainers/tools/AuxTypeVectorFactory.icc
 * @author scott snyder <snyder@bnl.gov>
 * @date May, 2014
 * @brief Factory objects that creates vectors using @c AuxTypeVector.
 */


namespace SG {


/**
 * @brief Create a vector object of this type.
 * @param size Initial size of the new vector.
 * @param capacity Initial capacity of the new vector.
 */
template <class T>
IAuxTypeVector*
AuxTypeVectorFactory<T>::create (size_t size, size_t capacity) const
{
  return new AuxTypeVector<T> (size, capacity);
}


/**
 * @brief Create a vector object of this type from a data blob.
 * @param data The vector object.
 * @param isPacked If true, @c data is a @c PackedContainer.
 * @param ownFlag If true, the newly-created IAuxTypeVector object
 *                will take ownership of @c data.
 *
 * This is for types which are packable.
 */
template <class T>
IAuxTypeVector*
AuxTypeVectorFactory<T>::createFromData (void* data,
                                         bool isPacked,
                                         bool ownFlag,
                                         std::true_type) const
{
  if (isPacked) {
    typedef typename SG::AuxDataTraits<T>::vector_type unpacked_vector_type;
    typedef typename unpacked_vector_type::value_type element_type;
    typedef SG::PackedContainer<element_type> vector_type;
    return new AuxTypeVectorHolder<T, vector_type >
      (reinterpret_cast<vector_type*>(data), ownFlag);
  }
  else {
    typedef typename AuxTypeVectorHolder<T>::vector_type vector_type;
    return new AuxTypeVectorHolder<T> (reinterpret_cast<vector_type*>(data), true);
  }
}


/**
 * @brief Create a vector object of this type from a data blob.
 * @param data The vector object.
 * @param isPacked If true, @c data is a @c PackedContainer.
 * @param ownFlag If true, the newly-created IAuxTypeVector object
 *                will take ownership of @c data.
 *
 * This is for types which are not packable.
 */
template <class T>
IAuxTypeVector*
AuxTypeVectorFactory<T>::createFromData (void* data,
                                         bool isPacked,
                                         bool ownFlag,
                                         std::false_type) const
{
  if (isPacked) std::abort();
  typedef typename AuxTypeVectorHolder<T>::vector_type vector_type;
  return new AuxTypeVectorHolder<T>
    (reinterpret_cast<vector_type*>(data), ownFlag);
}


/**
 * @brief Create a vector object of this type from a data blob.
 * @param data The vector object.
 * @param isPacked If true, @c data is a @c PackedContainer.
 * @param ownFlag If true, the newly-created IAuxTypeVector object
 *                will take ownership of @c data.
 *
 * If the element type is T, then @c data should be a pointer
 * to a std::vector<T> object, which was obtained with @c new.
 * But if @c isPacked is @c true, then @c data
 * should instead point at an object of type @c SG::PackedContainer<T>.
 *
 * Returns a newly-allocated object.
 * FIXME: Should return a unique_ptr.
 */
template <class T>
IAuxTypeVector*
AuxTypeVectorFactory<T>::createFromData (void* data,
                                         bool isPacked,
                                         bool ownFlag) const
{
  return createFromData (data, isPacked, ownFlag,
                         typename DataModel_detail::can_pack<T>::type());
}


/**
 * @brief Copy an element between vectors.
 * @param dst Pointer to the start of the destination vector's data.
 * @param dst_index Index of destination element in the vector.
 * @param src Pointer to the start of the source vector's data.
 * @param src_index Index of source element in the vector.
 *
 * @c dst and @ src can be either the same or different.
 */
template <class T>
void AuxTypeVectorFactory<T>::copy (void* dst,        size_t dst_index,
                                    const void* src,  size_t src_index) const
{
  return AuxTypeVector<T>::copy (dst, dst_index, src, src_index);
}


/**
 * @brief Swap an element between vectors.
 * @param a Pointer to the start of the first vector's data.
 * @param aindex Index of the element in the first vector.
 * @param b Pointer to the start of the second vector's data.
 * @param bindex Index of the element in the second vector.
 *
 * @c a and @ b can be either the same or different.
 */
template <class T>
void AuxTypeVectorFactory<T>::swap (void* a, size_t aindex,
                                    void* b, size_t bindex) const
{
  return AuxTypeVector<T>::swap (a, aindex, b, bindex);
}


/**
 * @brief Clear an element within a vector (static method).
 * @param dst Pointer to the start of the vector's data.
 * @param dst_index Index of the element in the vector.
 */
template <class T>
void AuxTypeVectorFactory<T>::clear (void* dst, size_t dst_index) const
{
  return AuxTypeVector<T>::clear (dst, dst_index);
}


/**
 * @brief Return the size of an element of this vector type.
 */
template <class T>
size_t AuxTypeVectorFactory<T>::getEltSize() const
{
  return sizeof (typename AuxTypeVector<T>::vector_type::value_type);
}


/**
 * @brief Return the @c type_info of the vector.
 */
template <class T>
const std::type_info* AuxTypeVectorFactory<T>::tiVec() const
{
  return &typeid (typename AuxTypeVector<T>::vector_type);
}


/**
 * @brief True if the vectors created by this factory work by dynamic
 *        emulation (via @c TVirtualCollectionProxy or similar); false
 *        if the std::vector code is used directly.
 */
template <class T>
bool AuxTypeVectorFactory<T>::isDynamic() const 
{
  return false;
}


} // namespace SG
