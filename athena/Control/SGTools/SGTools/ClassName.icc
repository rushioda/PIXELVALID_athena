/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

// $Id: ClassName.icc,v 1.1 2009-01-15 19:07:29 binet Exp $
/**
 * @file  DataModel/ClassName.icc
 * @author scott snyder
 * @date Jul 2005
 * @brief An interface for getting the name of a class as a string.
 *        Implementation file.
 */


#include "GaudiKernel/System.h"


/**
 * @brief Return the name of class @c T as a string.
 */
template <class T>
std::string ClassName<T>::name()
{
  return System::typeinfoName (typeid (T));
}

// /**
//  * @brief Specialization of @c ClassName for @c std::vector.
//  *
//  * This overrides the default implementation of @c ClassName
//  * to hide @c std::vector's second template parameter.
//  */
// #include <vector>
// template <class T>
// std::string ClassName<std::vector<T> >::name()
// {
//   std::string out = "std::vector<";
//   out += ClassName<T>::name();
//   if (out[out.size()-1] == '>')
//     out += ' ';
//   out += '>';
//   return out;
// }

// /**
//  * @brief Specialization of @c ClassName for @c std::list.
//  *
//  * This overrides the default implementation of @c ClassName
//  * to hide @c std::list's second template parameter.
//  */
// #include <list>
// template <class T>
// std::string ClassName<std::list<T> >::name()
// {
//   std::string out = "std::list<";
//   out += ClassName<T>::name();
//   if (out[out.size()-1] == '>')
//     out += ' ';
//   out += '>';
//   return out;
// }

// /**
//  * @brief Specialization of @c ClassName for @c std::map.
//  *
//  * This overrides the default implementation of @c ClassName
//  * to hide @c std::map's 4th template parameter (and optionally the 3rd too)
//  */
// #include <map>
// template <class K, class V, class C>
// std::string ClassName<std::map<K, V, C> >::name()
// {
//   std::string out = "std::map<";
//   out += ClassName<K>::name()+ "," + ClassName<V>::name();
//   std::string comp = ClassName<C>::name();
//   if (comp.size() > 10 && comp.substr(0, 10) != "std::less<") {
//     out += ","+ClassName<C>::name();
//   }
//   if (out[out.size()-1] == '>')
//     out += ' ';
//   out += '>';
//   return out;
// }


