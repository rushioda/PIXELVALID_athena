// This file's extension implies that it's C, but it's really -*- C++ -*-.

/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

/***************************************************************************
 implementation of DataProxy_cast operator
 -----------------------------------------
 ATLAS Collaboration
***************************************************************************/

// $Id: DataProxy.icc,v 1.6 2008-07-14 22:16:25 calaf Exp $

//<<<<<< INCLUDES                                                       >>>>>>
#include "SGTools/DataBucketBase.h"
#include "SGTools/ClassID_traits.h"
#include "SGTools/StorableConversions.h"
#ifndef NDEBUG
#  include "AthenaKernel/getMessageSvc.h"
#  include "GaudiKernel/MsgStream.h"
#endif


class DataObject;

template <typename DATA>
DATA* SG::DataProxy_cast(SG::DataProxy* proxy) {
  DATA* result(0);

  if (0 != proxy && proxy->isValid()) {
    DataObject* pObject(proxy->accessData());

    if (0 != pObject) {
      const CLID& dataID(ClassID_traits<DATA>::ID());
      result = SG::Storable_cast<DATA>(pObject, true, proxy, proxy->isConst());
      if (0 == result) { 
        //if result is 0, probably DATA is neither the type the object was
        // stored with, nor it inherits from it. 
        // Before giving up let's check its transient CLIDs
        DataBucketBase* db(0);
        if (proxy->transientAddress()->transientID(dataID) &&
            0 != (db = dynamic_cast<DataBucketBase*>(pObject)) )
          {
            //it is a symlink after all. Let's hard cast and keep our fingers Xed
            // But first: if this is a non-const proxy, then the cast
            // may have failed because it needed to go via a copying conversion
            // that's not allowed for non-const objects.  So try the conversion
            // again as const; if that works, then don't do the hard cast.
            if (!proxy->isConst() &&
                SG::Storable_cast<DATA>(pObject, true, proxy, true) != 0)
              {
#ifndef NDEBUG
                MsgStream gLog(Athena::getMessageSvc(), "SG::DataProxy_cast");
                gLog << MSG::WARNING 
                     << "Request for a non-const object via copying conversion; "
                     << "requested CLID = " << dataID 
                     << ", proxy primary ID is " << proxy->clID() << endmsg   ;
#endif
              }
            else {
              // ok, hard cast.
              result = static_cast<DATA*>(db->object());
            }
          }
        else { 
#ifndef NDEBUG
          MsgStream gLog(Athena::getMessageSvc(), "SG::DataProxy_cast");
          gLog << MSG::WARNING 
               << "Request for an invalid object; requested CLID = " 
               << dataID 
               << ", proxy primary ID is " << proxy->clID() << endmsg   ;
#endif
        } //try symlink
      } //result 0
    } else { // invalid pObject
#ifndef NDEBUG
      MsgStream gLog(Athena::getMessageSvc(), "SG::DataProxy_cast");
      gLog << MSG::WARNING 
           << "this proxy " << MSG::hex << proxy
           << MSG::dec << " has a NULL data object ptr" << endmsg;
#endif
    }
  } else {//	invalid proxy
#if 0
#ifndef NDEBUG
    MsgStream gLog(Athena::getMessageSvc(), "SG::DataProxy_cast");
    gLog << MSG::WARNING 
         << "this proxy " << MSG::hex << proxy
         << MSG::dec << " [" << proxy->clID() << "/" << proxy->name()
         << "] is in an invalid state" << endmsg;
#endif
#endif
  }
  return result;
}


