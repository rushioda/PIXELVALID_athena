/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

#ifndef JIVEXML_TRACKRETRIEVER_H
#define JIVEXML_TRACKRETRIEVER_H

#include "JiveXML/IDataRetriever.h"
#include "AthenaBaseComps/AthAlgTool.h"
#include "GaudiKernel/ToolHandle.h"

//Forward declarations
namespace Trk { 
  class IResidualPullCalculator; 
  class ITrackSummaryTool;
}
class AtlasDetectorID;

namespace JiveXML{

  /**
   * @class TrackRetriever
   * @brief Retrieves all @c Trk::TrackCollection objects
   *
   *  - @b Properties
   *    - <em> PriorityTrackCollection</em><tt> = 'ExtendedTracks' </tt>:  @copydoc m_PriorityTrackCollection
   *    - <em> OtherTrackCollections</em><tt> = [ ] </tt>: @copydoc m_OtherTrackCollections
   *    - <em> TrackTruthCollections</em><tt> = [ ] </tt>: @copydoc m_TrackTruthCollections
   *    - <em> DoWriteHLT</em><tt> = False </tt>: @copydoc m_doWriteHLT
   *    - <em> DoWriteResiduals </em><tt> = True </tt>: @copydoc m_doWriteResiduals
   *    - <em> ResidualPullCalculator</em><tt> = PublicToolHandle('Trk::ResidualPullCalculator/ResidualPullCalculator')</tt>: @copydoc m_residualPullCalculator
   *    - <em> DoHitsSorting</em><tt> = True </tt>: @copydoc m_doHitsSorting   
   *    - <em> DoHitsDetails</em><tt> = True </tt>: @copydoc m_doHitsDetails   
   *
   *  - @b Retrieved @b Data
   *    - @e id : internal track ID counter
   *    - @e chi2 : @f$\chi^2@f$ of track fit
   *    - @e numDoF : number of degrees of freedom for the fit
   *    - @e trackAuthor : track author as defined in TrkTrack/TrackInfo.h
   *    - @e barcode : associated truth track barcode
   *    - @e numHits : number of hits associated to that track
   *    - @e covMatrix : entries of the covariance matrix
	 *    - @e pt : transverse momentum
	 *    - @e d0 : transverse impact parameter
	 *    - @e z0 : longitudinal impact parameter
	 *    - @e phi0 : initial phi direction at vertex
	 *    - @e cotTheta : initial @f$\cos(\theta)@f$ at vertex
   *    - @e numPolyline : number of polyline points
   *    - <em> polylineX, polylineY, polylineZ </em>: polyline coordinates
   *    - @e numTsos : number of associated hits (Track State on Surface)
   *    - @e isOutlier : wether the hit is classified as outlier
   *    - @e driftSign : the drift sign of the hit
   *    - @e tsosDetType : detector type (one of 'PIX','SIL','TRT','MDT','CSC','RPC','TGC','unident')
   *    - @e tsosResLoc1 : local first coordinate of residual
   *    - @e tsosResLoc2 : local second coordinate of residual
   *    - @e tsosPullLoc1 : local first coordinate of pull
   *    - @e tsosPullLoc2 : local second coordinate of pull
   *    .
   */

  class TrackRetriever : virtual public IDataRetriever,
                                 public AthAlgTool {
   
    public:

      /// Standard Constructor
      TrackRetriever(const std::string& type,const std::string& name,const IInterface* parent);
      
      /// Retrieve all the data
      virtual StatusCode retrieve(ToolHandle<IFormatTool> &FormatTool); 

      /// Return the name of the data type
      virtual std::string dataTypeName() const { return typeName; };

      ///Default AthAlgTool methods
      StatusCode initialize();

    private:
      ///The data type that is generated by this retriever
      const std::string typeName;

      //@name Property members
      //@{
      /// First track collections to retrieve, shown as default in Atlantis
      std::string m_PriorityTrackCollection;
      /// Track collections to retrieve in the sequence they are given, all if empty
      std::vector<std::string> m_OtherTrackCollections;
      /// Track collection from which to retrieve the truth associations for
      /// the priority track collection
      std::string m_TrackTruthCollection;
      /// Whether to write HLTAutoKey objects
      bool m_doWriteHLT;
      /// Whether to write TrackResiduals 
      bool m_doWriteResiduals;
      /// Whether to perform hits (TSoS) sorting
      bool m_doHitsSorting;
      /// Whether to write hits (TSoS) details 
      bool m_doHitsDetails;
      /// ToolHandle to ResidualPullCaclulator tool
      ToolHandle<Trk::IResidualPullCalculator> m_residualPullCalculator;
      /// Used to find out the corresponding sub-det from ROT->identify().
      const AtlasDetectorID* m_idHelper;
      /// TrackSummaryTool for number of Pix/SCT/TRT hits
      ToolHandle< Trk::ITrackSummaryTool > m_trackSumTool; //!<  Pointer to Trk::ITrackSummaryTool
      //@}

  };

}
#endif
