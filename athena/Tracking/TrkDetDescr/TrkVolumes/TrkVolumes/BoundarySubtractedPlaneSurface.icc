/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

///////////////////////////////////////////////////////////////////
// BoundarySubtractedPlaneSurface.icc, (c) ATLAS Detector software
///////////////////////////////////////////////////////////////////


template <class Tvol> inline BoundarySubtractedPlaneSurface<Tvol>& 
      BoundarySubtractedPlaneSurface<Tvol>::operator=(const BoundarySubtractedPlaneSurface<Tvol>& bps)
{
  if (this!=&bps){
    delete BoundarySurface<Tvol>::m_insideVolume;
    delete BoundarySurface<Tvol>::m_outsideVolume;
    BoundarySurface<Tvol>::m_insideVolumeArray.remRef();
    BoundarySurface<Tvol>::m_outsideVolumeArray.remRef();
    delete Surface::m_transform;
    delete Surface::m_center;
    delete Surface::m_normal;
    delete SubtractedPlaneSurface::m_bounds;
    BoundarySurface<Tvol>::m_insideVolume = bps.m_insideVolume;
    BoundarySurface<Tvol>::m_outsideVolume = bps.m_outsideVolume;
    BoundarySurface<Tvol>::m_insideVolumeArray = bps.m_insideVolumeArray;
    BoundarySurface<Tvol>::m_outsideVolumeArray  = bps.m_outsideVolumeArray;
    Surface::m_transform = (bps.m_transform) ? new Amg::Transform3D(*bps.m_transform) : 0;
    Surface::m_center     = (bps.m_center)    ? new Amg::Vector3D(*bps.m_center) : 0;
    Surface::m_normal    = (bps.m_normal)    ? new Amg::Vector3D(*bps.m_normal) : 0 ;
    Surface::m_associatedDetElement = bps.m_associatedDetElement;        // copy by pointer as PlaneSurface does not have ownership 
    Surface::m_associatedDetElementId = bps.m_associatedDetElementId;
    m_bounds =  bps.m_bounds->clone();
  }
  return *this;

}

template <class Tvol> inline const Tvol* BoundarySubtractedPlaneSurface<Tvol>::attachedVolume(const TrackParameters& parms, PropDirection dir) const
{
  const Tvol* attVolume = 0;
  if ( (this->surfaceRepresentation().normal()).dot(dir*parms.momentum()) > 0.){
    attVolume = BoundarySurface<Tvol>::m_outsideVolume;
    if (BoundarySurface<Tvol>::m_outsideVolumeArray.getPtr()){
      attVolume = BoundarySurface<Tvol>::m_outsideVolumeArray.getPtr()->object(parms.localPosition());
    } 
  } else {
    attVolume = BoundarySurface<Tvol>::m_insideVolume;
    if (BoundarySurface<Tvol>::m_insideVolumeArray.getPtr()){
      attVolume = BoundarySurface<Tvol>::m_insideVolumeArray.getPtr()->object(parms.localPosition());
    }
  }
 return attVolume;  
}

template <class Tvol> inline const Tvol* BoundarySubtractedPlaneSurface<Tvol>::attachedVolume(const Amg::Vector3D& pos,
                                                                    const Amg::Vector3D& mom,
                                                                    PropDirection dir) const
{
  const Tvol* attVolume = 0;
  if ( (this->surfaceRepresentation().normal()).dot(dir*mom) > 0.){
    attVolume = BoundarySurface<Tvol>::m_outsideVolume;
    if (BoundarySurface<Tvol>::m_outsideVolumeArray.getPtr()){
      attVolume = BoundarySurface<Tvol>::m_outsideVolumeArray.getPtr()->object(pos);
    } 
  } else {
    attVolume = BoundarySurface<Tvol>::m_insideVolume;
    if (BoundarySurface<Tvol>::m_insideVolumeArray.getPtr()){
      attVolume = BoundarySurface<Tvol>::m_insideVolumeArray.getPtr()->object(pos);
    }
  }
 return attVolume;  
}

