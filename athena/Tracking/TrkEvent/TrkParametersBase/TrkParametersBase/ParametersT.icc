/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

///////////////////////////////////////////////////////////////////
// ParametersT.icc, (c) ATLAS Detector software
///////////////////////////////////////////////////////////////////

// Trk
#include "TrkEventPrimitives/ParamDefs.h"
//Gaudi
#include "GaudiKernel/MsgStream.h"
//STD
#include <iostream>
#include <iomanip>
#include <limits>
namespace TrkParametersBase{
	static constexpr double INVALID=std::numeric_limits<double>::quiet_NaN();
	static constexpr double INVALID_P(10e9);
	static constexpr double INVALID_QOP(10e-9);
	static const Amg::Vector2D INVALID_POSITION(INVALID,INVALID);
}

// default constructor
template <int DIM, class T, class S> Trk::ParametersT<DIM, T, S>::ParametersT():
    ParametersBase<DIM,T>(),
    m_surface(0)  
{}

// Constructor with local arguments - uses global <-> local for parameters 
template <int DIM, class T, class S> Trk::ParametersT<DIM, T, S>::ParametersT 
    (double loc1, double loc2, double phi, double theta, double qop, 
     const S& surface,
	 AmgSymMatrix(DIM)* covariance) :
    ParametersBase<DIM,T>(covariance),
    m_surface( surface.isFree() ? surface.clone() : &surface )
{      
    // check qoverp is physical
    double p=0.0;
    if (qop!=0.) {
      p = fabs(1./qop);
    } else {
      // qop is unphysical. No momentum measurement.
      p = TrkParametersBase::INVALID_P;
      qop = TrkParametersBase::INVALID_QOP;
    }
    // fill the parameters  
    ParametersBase<DIM,T>::m_parameters << loc1, loc2, phi, theta, qop;
    // decide the sign of the charge
    if (qop < 0.) ParametersBase<DIM,T>::m_chargeDefinition.flipSign();
     
    // now calculate the momentum
    ParametersBase<DIM,T>::m_momentum = Amg::Vector3D(p*cos(phi)*sin(theta),
                                                      p*sin(phi)*sin(theta),
                                                      p*cos(theta));
    m_surface->localToGlobal(ParametersBase<DIM,T>::localPosition(), 
                             ParametersBase<DIM,T>::m_momentum, 
                             ParametersBase<DIM,T>::m_position);
}

// Constructor with local arguments - uses global <-> local for parameters
template <int DIM, class T, class S> Trk::ParametersT<DIM, T, S>::ParametersT 
    (const AmgVector(DIM)& parameters,
     const S& surface,
     AmgSymMatrix(DIM)* covariance) :
   ParametersBase<DIM,T>(covariance),
   m_surface( surface.isFree() ? surface.clone() : &surface )
{  
  // decide the sign of the charge
  ParametersBase<DIM,T>::m_parameters = parameters;
  double qop = ParametersBase<DIM,T>::m_parameters[Trk::qOverP];
  if (qop<0.) 
    ParametersBase<DIM,T>::m_chargeDefinition.flipSign();
  
  // check qoverp is physical
  double p=0.0;
  if (qop!=0.) {
    p = fabs(1./qop);
  } else {
    // qop is unphysical. No momentum measurement.
    p = TrkParametersBase::INVALID_P;
    qop = TrkParametersBase::INVALID_QOP;
  }
  
  // fill momentum & then position using the surface
  ParametersBase<DIM,T>::m_momentum = Amg::Vector3D(p*cos(ParametersBase<DIM,T>::m_parameters[Trk::phi])*sin(ParametersBase<DIM,T>::m_parameters[Trk::theta]),
                             p*sin(ParametersBase<DIM,T>::m_parameters[Trk::phi])*sin(ParametersBase<DIM,T>::m_parameters[Trk::theta]),
                             p*cos(ParametersBase<DIM,T>::m_parameters[Trk::theta]));
  m_surface->localToGlobal(ParametersBase<DIM,T>::localPosition(), 
                           ParametersBase<DIM,T>::m_momentum, 
                           ParametersBase<DIM,T>::m_position);
}
     
// Constructor with mixed arguments 1 - uses global <-> local for parameters 
template <int DIM, class T, class S> Trk::ParametersT<DIM, T, S>::ParametersT 
    (const Amg::Vector3D& position,
     double phi, double theta, double qop,
     const S& surface,
     AmgSymMatrix(DIM)* covariance) :
  ParametersBase<DIM,T>(position, covariance),
  m_surface( surface.isFree() ? surface.clone() : &surface )
{  
   // decide the sign of the charge
   if (qop<0.) ParametersBase<DIM,T>::m_chargeDefinition.flipSign();
   // fill momentum & then position using the surface
   double p=0.0;
   if (qop!=0.) {
     p = fabs(1./qop);
   } else {
     // qop is unphysical. No momentum measurement.
     p = TrkParametersBase::INVALID_P;
     qop = TrkParametersBase::INVALID_QOP;
   }
   ParametersBase<DIM,T>::m_momentum = Amg::Vector3D(p*cos(phi)*sin(theta),
                                                     p*sin(phi)*sin(theta),
                                                     p*cos(theta));
   // get the local parameters via the surface
   Amg::Vector2D lPosition;
   const bool ok = m_surface->globalToLocal(ParametersBase<DIM,T>::m_position, 
                            ParametersBase<DIM,T>::m_momentum, lPosition);
   if (not ok) lPosition = TrkParametersBase::INVALID_POSITION;
   // fill the vector now
   ParametersBase<DIM,T>::m_parameters << lPosition[Trk::loc1], lPosition[Trk::loc2], phi, theta, qop;   
}
          
template <int DIM, class T, class S> Trk::ParametersT<DIM, T, S>::ParametersT 
    (const AmgVector(DIM)& parameters,
     SurfaceUniquePtrT<const S> surface,
     AmgSymMatrix(DIM)* covariance) :
      ParametersT (parameters, surface.release(), covariance)
{  
}
         
// Constructor with mixed arguments 2 - uses global <-> local for parameters 
template <int DIM, class T, class S> Trk::ParametersT<DIM, T, S>::ParametersT 
    (double loc1, double loc2,
     const Amg::Vector3D& momentum,
     double charge,
     const S& surface,
     AmgSymMatrix(DIM)* covariance) : 
   ParametersBase<DIM,T>(covariance),
   m_surface( surface.isFree() ? surface.clone() : &surface )
 {
    // decide the sign of the charge
    if (charge < 0.) ParametersBase<DIM,T>::m_chargeDefinition.flipSign();
    // fill momentum & then position using the surface
    ParametersBase<DIM,T>::m_momentum = momentum;
    m_surface->localToGlobal(Amg::Vector2D(loc1,loc2), 
                             ParametersBase<DIM,T>::m_momentum, 
                             ParametersBase<DIM,T>::m_position);
    // fill the vector now
    ParametersBase<DIM,T>::m_parameters << loc1, loc2, 
    ParametersBase<DIM,T>::m_momentum.phi(), 
    ParametersBase<DIM,T>::m_momentum.theta(), 
    double(ParametersBase<DIM,T>::m_chargeDefinition)/ParametersBase<DIM,T>::m_momentum.norm();  
}
     
// Constructor with global arguments - uses global <-> local for parameters */
template <int DIM, class T, class S> Trk::ParametersT<DIM, T, S>::ParametersT 
    (const Amg::Vector3D& position,
     const Amg::Vector3D& momentum,
	 double charge,
	 const S& surface,
     AmgSymMatrix(DIM)* covariance) :  
  ParametersBase<DIM,T>(position, momentum, covariance),
  m_surface( surface.isFree() ? surface.clone() : &surface )
{
    // decide the sign of the charge
    if (charge < 0.) ParametersBase<DIM,T>::m_chargeDefinition.flipSign();
    // get the local parameters via the surface
    Amg::Vector2D lPosition;
    const bool ok = m_surface->globalToLocal(ParametersBase<DIM,T>::m_position, 
                             ParametersBase<DIM,T>::m_momentum, lPosition);
   if (not ok) lPosition = TrkParametersBase::INVALID_POSITION;
    // fill the vector now
    ParametersBase<DIM,T>::m_parameters << lPosition[Trk::loc1], lPosition[Trk::loc2], 
    ParametersBase<DIM,T>::m_momentum.phi(), 
    ParametersBase<DIM,T>::m_momentum.theta(), 
    double(ParametersBase<DIM,T>::m_chargeDefinition)/ParametersBase<DIM,T>::m_momentum.norm();
}

// Copy constructor
template <int DIM, class T, class S> Trk::ParametersT<DIM, T, S>::ParametersT (const ParametersT& rhs):
  ParametersBase<DIM,T>(rhs),
  m_surface(rhs.m_surface->isFree() ? rhs.m_surface->clone() : rhs.m_surface) {}

template <int DIM, class T, class S> Trk::ParametersT<DIM, T, S>& Trk::ParametersT<DIM, T, S>::operator=
    (const Trk::ParametersT<DIM, T, S>& rhs)
{
	if (this!=&rhs)
	{
      if ( m_surface->isFree() ) delete m_surface;
      m_surface = 0;
      // call the base class assignment operator
      Trk::ParametersBase<DIM,T>::operator=(rhs);
      m_surface           = ( rhs.m_surface->isFree() ? rhs.m_surface->clone() : rhs.m_surface );
	}
	return(*this);
}

template <int DIM, class T, class S>
Trk::ParametersT<DIM, T, S>& Trk::ParametersT<DIM, T, S>::operator=
    (Trk::ParametersT<DIM, T, S>&& rhs)
{
  if (this!=&rhs)
  {
    if ( m_surface && m_surface->isFree() ) delete m_surface;
    m_surface = rhs.m_surface;
    rhs.m_surface = nullptr;

    // call the base class assignment operator
    Trk::ParametersBase<DIM,T>::operator=(std::move(rhs));
  }
  return(*this);
}

// Destructor
template <int DIM, class T, class S> Trk::ParametersT<DIM, T, S>::~ParametersT ()
{
    if ( m_surface && m_surface->isFree() ) delete m_surface;
    m_surface = 0;                  
}

// PROTECTED Constructor with local arguments - persistency only, ownership of surface given
template <int DIM, class T, class S> Trk::ParametersT<DIM, T, S>::ParametersT 
    (const AmgVector(DIM)& parameters,
     const S* surface,
     AmgSymMatrix(DIM)* covariance) :
     ParametersBase<DIM,T>(covariance),
     m_surface(surface)
{  
  ParametersBase<DIM,T>::m_parameters = parameters;

  float qop = ParametersBase<DIM,T>::m_parameters[Trk::qOverP]; 
  // decide the sign of the charge 
  if (qop<0.) ParametersBase<DIM,T>::m_chargeDefinition.flipSign(); 

  double p=0.0;
  if (qop!=0.) { 
      p = fabs(1./qop);
  } else {
    // qop is unphysical. No momentum measurement. 
    p = TrkParametersBase::INVALID_P; 
    qop = TrkParametersBase::INVALID_QOP; 
  }
  // fill momentum & then position using the surface
  ParametersBase<DIM,T>::m_momentum = Amg::Vector3D(p*cos(ParametersBase<DIM,T>::m_parameters[Trk::phi])*sin(ParametersBase<DIM,T>::m_parameters[Trk::theta]),
                             p*sin(ParametersBase<DIM,T>::m_parameters[Trk::phi])*sin(ParametersBase<DIM,T>::m_parameters[Trk::theta]),
                             p*cos(ParametersBase<DIM,T>::m_parameters[Trk::theta]));
  if (m_surface)
    m_surface->localToGlobal(ParametersBase<DIM,T>::localPosition(), 
                             ParametersBase<DIM,T>::m_momentum, 
                             ParametersBase<DIM,T>::m_position);
  else {
    ParametersBase<DIM,T>::m_momentum.setZero();
    ParametersBase<DIM,T>::m_position.setZero();
  }
}

// return the measurementFrame */
template <int DIM, class T, class S> const Amg::RotationMatrix3D Trk::ParametersT<DIM, T, S>::measurementFrame() const
{ return associatedSurface().measurementFrame(ParametersBase<DIM,T>::m_position,  ParametersBase<DIM,T>::m_momentum); }

// Dedicated update method for non-curvilinear parameters - private and controlled by friendship 
template <int DIM, class T, class S> void Trk::ParametersT<DIM, T, S>::updateParameter
    (DefinedParameter updatedParameter,
     AmgSymMatrix(DIM)* updatedCovariance) const
{
    // update the parameters vector
    ParametersBase<DIM,T>::m_parameters[updatedParameter.second] = updatedParameter.first;
    // update the covariance
    if (updatedCovariance){
        if (updatedCovariance !=ParametersBase<DIM,T>:: m_covariance)
            delete ParametersBase<DIM,T>::m_covariance;
        ParametersBase<DIM,T>::m_covariance = updatedCovariance;
    }
    //position or momentum update needed
    if (updatedParameter.second == Trk::loc1 || updatedParameter.second == Trk::loc2){
        m_surface->localToGlobal(ParametersBase<DIM,T>::localPosition(), 
                                 ParametersBase<DIM,T>::m_momentum, 
                                 ParametersBase<DIM,T>::m_position);
    } else {
        // momentum update is needed
        double phi   = ParametersBase<DIM,T>::m_parameters[Trk::phi];
        double theta = ParametersBase<DIM,T>::m_parameters[Trk::theta];
        double p     = ParametersBase<DIM,T>::charge()/ParametersBase<DIM,T>::m_parameters[Trk::qOverP];
        ParametersBase<DIM,T>::m_momentum = Amg::Vector3D(p*cos(phi)*sin(theta),
                                                          p*sin(phi)*sin(theta),
                                                          p*cos(theta));
    }
}

// Dedicated update method for non-curvilinear parameters - private and controlled by friendship 
template <int DIM, class T, class S> void Trk::ParametersT<DIM, T, S>::updateParameters
    (const AmgVector(DIM)& updatedParameters,
     AmgSymMatrix(DIM)* updatedCovariance) const
{
    // valid to use != here, because value is either copied or modified,
    bool updatePosition = (updatedParameters[Trk::loc1] != ParametersBase<DIM,T>::m_parameters[Trk::loc1]) ||
                          (updatedParameters[Trk::loc2] != ParametersBase<DIM,T>::m_parameters[Trk::loc2]);
    bool updateMomentum = (updatedParameters[Trk::phi] != ParametersBase<DIM,T>::m_parameters[Trk::phi]) ||
                          (updatedParameters[Trk::theta] != ParametersBase<DIM,T>::m_parameters[Trk::theta]) ||
                          (updatedParameters[Trk::qOverP] != ParametersBase<DIM,T>::m_parameters[Trk::qOverP]);
    // update the parameters vector
    ParametersBase<DIM,T>::m_parameters = updatedParameters;
    // update the covariance
    if (updatedCovariance){
        if (updatedCovariance !=ParametersBase<DIM,T>:: m_covariance)
            delete ParametersBase<DIM,T>::m_covariance;
        ParametersBase<DIM,T>::m_covariance = updatedCovariance;
    }
    //position or momentum update needed
    if (updatePosition){
        m_surface->localToGlobal(ParametersBase<DIM,T>::localPosition(), 
                                 ParametersBase<DIM,T>::m_momentum, 
                                 ParametersBase<DIM,T>::m_position);
    } 
    // momentum update is needed    
    if (updateMomentum){
       double phi   = ParametersBase<DIM,T>::m_parameters[Trk::phi];
       double theta = ParametersBase<DIM,T>::m_parameters[Trk::theta];
       double p     = ParametersBase<DIM,T>::charge()/ParametersBase<DIM,T>::m_parameters[Trk::qOverP];
       ParametersBase<DIM,T>::m_momentum = Amg::Vector3D(p*cos(phi)*sin(theta),
                                                         p*sin(phi)*sin(theta),
                                                         p*cos(theta));
    }
}

