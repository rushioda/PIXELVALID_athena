#!/usr/bin/env python
#
# usage: define_dq2_sample [-n <sampleName>] <dq2-sample> [<numberCollectionsPerFile>] [<dq2-destination>] [<gridcopyPrefix>]
#
# see list of dq2 destinations with cmd: dq2-destinations 
#

import sys
import os
import string, commands
from datetime import datetime
import socket

from dq2.info import TiersOfATLAS

def ListFromDq2(infileprefix,dq2destiny,dq2sample):
  searchcmd = "dq2-ls -L "+dq2destiny+ " -p -f "+dq2sample
  os.system(searchcmd+" | grep root | grep -v tgz > /tmp/filelist.temp")
  #print searchcmd+" > /tmp/filelist.temp"
  FileList=open("/tmp/filelist.temp","r").readlines()
  FileList1=[]
  for file in FileList:
    file = file.strip()
    if (file.find("srm://")==0):
      gridcopyfile = infileprefix+file
      FileList1.append(gridcopyfile)
  os.system("rm /tmp/filelist.temp")
  return FileList1,searchcmd


def writeSampleFile(sampleName,filename,filelist,searchcmd="",noCollPerFile=-1,printFlags=True):

  fileNames = []
  timenow = datetime.today().strftime("%d%b%y.%Hh%M")

  # multiple files
  if (noCollPerFile>0):
    fidx = 0
    idx = 0
    while(idx<len(filelist)):
      if (idx % noCollPerFile == 0): 
        if (fidx!=0): file.close()
        filenameI = filename.replace(".def","_"+str(fidx)+".def")
        file = open(filenameI,'w')
        file.write("# created "+timenow+"\n")
        file.write("# searchcmd: "+searchcmd+"\n")
        file.write("TITLE: "+sampleName+"_"+str(fidx)+"\n")
        file.write("FLAGS: GridCopy=1"+"\n")
        fileNames.append(filenameI)
        fidx += 1
      file.write(filelist[idx] + "\n")
      idx += 1
    file.close()
  # one file
  else:
    file = open(filename,'w')
    fileNames.append(filename)    
    if (printFlags):
      file.write("# created "+timenow+"\n")
      file.write("# searchcmd: "+searchcmd+"\n")
      file.write("TITLE: "+sampleName+"\n")
      file.write("FLAGS: GridCopy=1"+"\n")
    for line in filelist:
      file.write(line + "\n")
    file.close()
      
  return fileNames


## main
if __name__ == "__main__":

  (retcode,output) = commands.getstatusoutput("which dq2-ls")
  if (retcode!=0):
    print sys.argv[0], "ERROR: dq2-ls not found, be sure to run DQ2 setup script first."
    sys.exit(1)

  if (len(sys.argv)<2):
    print "usage: ", sys.argv[0], "[-n <sampleName>] <dq2-sample> [<numberCollectionsPerFile>] [<dq2-destination>] [<gridcopyPrefix>]"
    print "(to see list of dq2-destinations, use: dq2-destinations)"
    sys.exit(1)

  sampleName = ""
  idx = 0

  if (sys.argv[1] == "-n"):
    if (len(sys.argv)<4):
      print "usage: ", sys.argv[0], "[-n <sampleName>] <dq2-sample> [<numberCollectionsPerFile>] [<dq2-destination>] [<gridcopyPrefix>]"
      print "(to see list of dq2-destinations, use: dq2-destinations)"
      sys.exit(1)
    else: 
      sampleName = sys.argv[2]
      idx = 2

  print "Running: ", sys.argv[0]

  # dq2 directory
  dq2sample = sys.argv[idx+1]
  #while ( len(dq2sample)>=1 and (dq2sample.rfind("/")==(len(dq2sample)-1)) ): 
  #  dq2sample = dq2sample.rstrip("/")
  print ">> dq2 sample:            ", dq2sample

  # sample
  if (len(sampleName)==0):
    dq2Split = dq2sample.split("/")
    sampleName = dq2Split[len(dq2Split)-2]
  if (len(sampleName)==0): 
    sampleName = "default"
  sampleDir = "samples/"
  os.system("mkdir -p "+sampleDir)
  sampleFile = sampleDir+sampleName+".def"

  # number of collections per file 
  noCollPerFile = -1
  if (len(sys.argv) >= idx+3):
    noCollPerFile = int(sys.argv[idx+2])

  # dq2destiny - with restrictions to avoid cross-domain data transfers 
  dq2destiny = "CERN-PROD_MCDISK"
  if (len(sys.argv) >= idx+4):
    dq2destiny = sys.argv[idx+3]

  hostDomain = string.join(socket.gethostbyaddr(socket.gethostname())[0].split('.')[-2:], '.')
  toaDomain = TiersOfATLAS.getSiteProperty(dq2destiny, 'domain')

  if not toaDomain:
    print "ERROR: DQ2 site is unknown: %s" % dq2destiny
    sys.exit(2)

  ## allowing unige.ch to access CERN-PROD
  if dq2destiny.startswith('CERN-PROD'):
    if hostDomain == 'unige.ch':
      pass

  ## check the match of client and dq2destiny domain
  if hostDomain not in toaDomain:
      print "ERROR: client domain (%s) not close to dataset location (%s)" % (hostDomain, dq2destiny)
      sys.exit(2)

  # prefix
  infileprefix = "gridcopy://"
  if (len(sys.argv) >= idx+5):
    infileprefix = sys.argv[idx+4]

  # no of collections
  fileList,searchcmd = ListFromDq2(infileprefix,dq2destiny,dq2sample)
  print ">> collections found:     ", len(fileList)

  # write output to file
  if (len(fileList)>0):
    sampleFiles = writeSampleFile(sampleName,sampleFile,fileList,searchcmd,noCollPerFile)
    print ">> max. collections/file: ", noCollPerFile, " (-1 = inf.)"
    print ">> dq2 destination:       ", dq2destiny
    print ">> filename prefix:       ", infileprefix
    print ">> sample output file(s): \n", sampleFiles
    print "\n NOTE: To prevent unnecessary network traffic, you are kindly asked to use\n       the FileStager only for running over nearby grid collections.\n"

