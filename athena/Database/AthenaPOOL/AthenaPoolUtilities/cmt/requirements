package AthenaPoolUtilities

author RD Schaffer <R.D.Schaffer@cern.ch>
author Christian Arnault <arnault@lal.in2p3.fr>
author Kyle Cranmer <cranmer@cern.ch>
author Kristo Karr <Kristo.Karr@cern.ch>

use AtlasPolicy           AtlasPolicy-*
use AtlasCORAL            AtlasCORAL-*       External
use AthenaKernel          AthenaKernel-*     Control
use CLIDSvc               CLIDSvc-*          Control
use DataModel             DataModel-*        Control
use PersistentDataModel   PersistentDataModel-*  Database
use DBDataModel           DBDataModel-*      Database/AthenaPOOL

apply_tag NEEDS_CORAL_BASE

#-----------------------------------------------------------------------------
#
# Pattern for creating pool converters
#
# apply_pattern poolcnv [typesWithNamespace="..."] [multChanTypes="..."] files="..." \
#                       [extraFilesToCompile="..."]
#
#  where:
#
#   typesWithNamespace     optional list of types, used to specify the namespace.
#		           For example:  "NS1::MyType1 NS1::MyType2 NS2::MyType3"
#                          Needed for those files where the file name is the
#                          types w/o namespace.
#
#   multChanTypes          optional list of types which are CondMultChanCollections 
#
#   files                  gives the list of header files with the declarations
#		           of the data objects, i.e. the ones with the CLASS_DEF
#		           macro 
#
#   extraFilesToCompile    gives an optional list of extra files to compile into 
#                          the converter library, e.g. 
#                          extraFilesToCompile="-s=../src/myExtraDir *.cxx"
#
#     CONVENTION: there must be ONLY ONE class defined in each header file.
#
#  > With this pattern, 
#
#     + directory ../pool/src
#     + a library lib<package>PoolCnv.so 
#
#     will be created for the package
#
#  > Two constituents <package>PoolCnvGen and  <package>PoolCnv are generated 
#    by this pattern
#
#  > Two macros can also be used to specify additional options for the poolcnv
#    generator:
#
#     $(poolcnv_options)             global options
#     $(<package>_poolcnv_options)   options specific to this package
#
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
#
# Definitions for the poolcnv generator
make_fragment poolcnv.mk -header=poolcnv_header.mk -trailer=poolcnv_trailer.mk -dependencies

make_fragment ExampleClassCnv.cxx
make_fragment ExampleClassCnv.h
make_fragment ExampleMultChanClassCnv.h
make_fragment ExamplePackageCnv_load.cxx
make_fragment ExamplePackageCnv_entries.cxx
make_fragment ExamplePackageCnv_entries.h
make_fragment ExamplePackageCnv_entries_element.cxx
make_fragment ExampleItemList_joboptions.py
make_fragment ExampleItemList_joboptionsHdr.py

pattern poolcnv \
  private ; \
  use AthenaPoolCnvSvc AthenaPoolCnvSvc-00-* Database/AthenaPOOL ; \
  use GaudiInterface   GaudiInterface-*      External ; \
  document poolcnv.mk <package>PoolCnvGen <files> ; \
  macro_append cppflags  ""  separate-debug&target-opt&target-linux  " -g " ; \
  library <package>PoolCnv -suffix=_poolcnv     "*.cxx -s=../pool *.cxx <extraFilesToCompile> " ; \
  macro_append types_with_namespace_            " <typesWithNamespace> " ; \
  macro  cnv_pfx                                "<cnv_pfx>" ; \
  macro_append mult_chan_types_                 " <multChanTypes> " ; \
  macro        poolcnv_include_extras           " ../src" ; \
  include_dirs                                  " $(poolcnv_include_extras) " ; \
  macro_append <package>PoolCnv_dependencies    " <package>PoolCnvGen " ; \
  macro        <package>PoolCnv_shlibflags      "$(componentshr_linkopts) -L$(bin) $(use_linkopts) " ; \
  macro        dummy_for_library                "<library>" ; \
  macro_append <package>_named_libraries        " <package>PoolCnv " ; \
  apply_pattern generate_componentslist library=<package>PoolCnv group=<group> ; \
# macro_append <package>_joboptions ' -s=../pool *.py ' ; \
  macro_append install_pool_joboptions_dependencies " <package>PoolCnvGen" ; \
  document data_installer install_pool_joboptions prefix=jobOptions "-s=../pool *.py" ; \
  apply_pattern optdebug_library name=<package>PoolCnv ; \
  end_private

private
use AtlasReflex           AtlasReflex-*            External
use TestPolicy            TestPolicy-*

private
apply_pattern install_runtime method=-symlink

apply_pattern declare_joboptions files="*.py"

# The following use is to get the lcgdict pattern.
# This is "hidden" behind "private" and "no_auto_imports" to keep 
# clients of IOVDbTestConditions from seeing excess dependencies
private
use AtlasReflex	     AtlasReflex-*        External -no_auto_imports

# Pattern to build the dict lib. User should create a single header
# file: <package>Dict.h which includes all other .h files. See EventInfoDict
apply_pattern lcgdict dict=AthenaPoolUtilities  selectionfile=selection.xml headerfiles="../AthenaPoolUtilities/AthenaPoolUtilitiesDict.h"

# Declare this package as a cmake metalibrary so that the libraries and header files from
# package it depends on are available to its clients. Transparent to CMT
apply_pattern cmake_add_command command=metalibrary
