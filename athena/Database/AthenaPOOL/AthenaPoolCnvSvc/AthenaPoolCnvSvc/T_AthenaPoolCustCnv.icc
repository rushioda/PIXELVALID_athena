/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

/** @file T_AthenaPoolCustCnv.icc
 *  @brief This file contains the implementation for the templated T_AthenaPoolCustCnv class.
 *  @author Peter van Gemmeren <gemmeren@anl.gov>
 **/

#include "AthenaPoolCnvSvc/IAthenaPoolCnvSvc.h"

#include "GaudiKernel/StatusCode.h"
#include "GaudiKernel/DataObject.h"
#include "GaudiKernel/IOpaqueAddress.h"
#include "GaudiKernel/IRegistry.h"

#include "StorageSvc/DbReflex.h"

#include "CLIDSvc/CLASS_DEF.h"
#include "SGTools/ClassName.h"
#include "PersistentDataModel/Token.h"
#include "SGTools/StorableConversions.h"

//__________________________________________________________________________
template <class TRANS, class PERS>
T_AthenaPoolCustCnv<TRANS, PERS>::T_AthenaPoolCustCnv(ISvcLocator* pSvcLocator) : T_AthenaPoolCnvBase<TRANS>(pSvcLocator) {
}
//______________________________________________________________________________
template <class TRANS, class PERS>
StatusCode T_AthenaPoolCustCnv<TRANS, PERS>::initialize() {
   ATH_MSG_DEBUG("initialize() in T_AthenaPoolCustCnv " << classID());
   if (!T_AthenaPoolCnvBase<TRANS>::initialize().isSuccess()) {
      ATH_MSG_FATAL("Failed to initialize AthenaPoolConverter base class.");
      return(StatusCode::FAILURE);
   }
   return(this->m_athenaPoolCnvSvc->registerCleanUp(this));
}
//__________________________________________________________________________
template <class TRANS, class PERS>
const CLID& T_AthenaPoolCustCnv<TRANS, PERS>::classID() {
   return(ClassID_traits<TRANS>::ID());
}
//__________________________________________________________________________
template <class TRANS, class PERS>
template <class P>
void T_AthenaPoolCustCnv<TRANS, PERS>::setPlacementForP(P& /*p*/, const std::string& key) {
   const std::string typenm = ClassName<P>::name();
   this->setPlacementWithType(typenm, key);
}
//__________________________________________________________________________
template <class TRANS, class PERS>
template <class P>
StatusCode T_AthenaPoolCustCnv<TRANS, PERS>::objectToPool(P* pObj, const Token*& token, const std::string& key) {
   const std::string className = ClassName<P>::name();
   // Check dictionary
   // Allow for multiple class names
   if (this->m_className != className) {
      this->m_className = className;
      // Different class name - get description
      auto itClass = this->m_classDescs.find(className);
      if (itClass == this->m_classDescs.end()) {
         // For new class names, check dictionary
         this->m_classDesc = RootType( typeid(P) );
         this->m_classDescs[className] = this->m_classDesc;
      } else {
         // Set to correct class description
         this->m_classDesc = (*itClass).second;
      }
   }
   setPlacementForP(*pObj, key);
   token = this->m_athenaPoolCnvSvc->registerForWrite(this->m_placement, pObj, this->m_classDesc);
   return(StatusCode::SUCCESS);
}
//__________________________________________________________________________
template <class TRANS, class PERS>
template <class P>
StatusCode T_AthenaPoolCustCnv<TRANS, PERS>::poolToObject(const Token*& token, P*& pObj) {
   pObj = 0;
   const std::string className = ClassName<P>::name();
   void* voidPtr = 0;
   try {
      this->m_athenaPoolCnvSvc->setObjPtr(voidPtr, token);
   } catch (std::exception &e) {
      ATH_MSG_ERROR("poolToObject: caught error: " << e.what());
      return(StatusCode::FAILURE);
   }
   if (voidPtr == 0) {
      ATH_MSG_ERROR("poolToObject: Could not get object for Token = " << (token != 0 ? token->toString() : ""));
      return(StatusCode::FAILURE);
   }
   pObj = reinterpret_cast<P*>(voidPtr);
   if (pObj == 0) {
      ATH_MSG_ERROR("poolToObject: Failed to cast object for Token = " << (token != 0 ? token->toString() : ""));
      return(StatusCode::FAILURE);
   }
   return(StatusCode::SUCCESS);
}
//__________________________________________________________________________
template <class TRANS, class PERS>
StatusCode T_AthenaPoolCustCnv<TRANS, PERS>::DataObjectToPool(DataObject* pObj, const std::string& key) {
   const std::string className = ClassName<TRANS>::name();
   bool skipDHE = false;
   TRANS* obj = 0;
   PERS* persObj = 0;
   SG::fromStorable(pObj, obj);
   if (obj == 0) {
      if (pObj->clID() == 1) { 
         if (pObj->registry() != 0 && pObj->registry()->address() != 0) { 
            ATH_MSG_DEBUG("Failed to cast DataObject to transient type, doing pers to pers"); 
            if (!this->compareClassGuid(pool::DbReflex::guid(this->m_classDesc))) { 
               ATH_MSG_ERROR("Can not evolve schema in pers to pers copy"); 
               return(StatusCode::FAILURE); 
            } 
            if (!poolToObject<PERS>(this->m_i_poolToken, persObj).isSuccess()) { 
               ATH_MSG_ERROR("Failed to read persistent DataType"); 
               return(StatusCode::FAILURE); 
            } 
         } else { 
            ATH_MSG_DEBUG("Failed to cast DataObject to transient type, using empty default"); 
            skipDHE = true; 
            persObj = new PERS(); 
         } 
      } else { 
         ATH_MSG_ERROR("failed to cast to T for class (type/key) " << className << "/" << pObj->name());
         return(StatusCode::FAILURE);
      } 
   } else {
      if (!transToPers(obj, persObj).isSuccess()) {
         ATH_MSG_ERROR("Failed to convert to persistent DataType for class (type/key) " << className << "/" << pObj->name());
         return(StatusCode::FAILURE);
      }
   }
   const Token* token = 0; 
   StatusCode status = objectToPool<PERS>(persObj, token, key); 
   if (skipDHE) { 
      delete token; token = 0; 
      this->setToken("\n"); 
   } else { 
      this->m_o_poolToken = token; token = 0; 
   } 
   return(status); 
}
//__________________________________________________________________________
template <class TRANS, class PERS>
StatusCode T_AthenaPoolCustCnv<TRANS, PERS>::PoolToDataObject(DataObject*& pObj, const Token* token) {
   TRANS* transObj = 0;
   PERS* obj = 0;
   if (!poolToObject<PERS>(token, obj).isSuccess()) {
      ATH_MSG_ERROR("Failed to read persistent DataType");
      return(StatusCode::FAILURE);
   }
   if (!persToTrans(transObj, obj).isSuccess()) {
      delete transObj; transObj = 0;
      delete obj; obj = 0;
      ATH_MSG_ERROR("Failed to convert to transient DataType");
      return(StatusCode::FAILURE);
   }
   delete obj; obj = 0;
   pObj = SG::asStorable(transObj);
   return(StatusCode::SUCCESS);
}
//__________________________________________________________________________
// Set the token (in std::string representation) and classID for
// the object that will be read next.  Required by compareClassGuid()
template <class TRANS, class PERS>
inline void T_AthenaPoolCustCnv<TRANS, PERS>::setToken(const std::string& token_str) {
   if (this->m_i_poolToken == 0) this->m_i_poolToken = new Token;
   if (this->m_i_poolToken != 0) {
      const_cast<Token*>(this->m_i_poolToken)->fromString(token_str);
      m_classID = this->m_i_poolToken->classID();
   } else {
      m_classID = Guid::null();
   }
}
//__________________________________________________________________________
// Compare POOL class GUID with the one from object being read
// To be used in createTransient()
template <class TRANS, class PERS>
inline bool T_AthenaPoolCustCnv<TRANS, PERS>::compareClassGuid(const pool::Guid &guid) const {
   return(guid == m_classID);
}
