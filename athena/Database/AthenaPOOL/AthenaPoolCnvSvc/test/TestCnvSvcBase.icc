/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

// $Id$
/**
 * @file AthenaPoolCnvSvc/test/TestCnvSvcBase.icc
 * @author scott snyder <snyder@bnl.gov>
 * @date Jan, 2016
 * @brief Helper for AthenaPoolCnvSvc unit tests.
 */


#include "AthenaPoolCnvSvc/IAthenaPoolCnvSvc.h"
#include "AthenaBaseComps/AthService.h"
#include "StorageSvc/DbType.h"


class TestCnvSvcBase
  : public IAthenaPoolCnvSvc, public AthService
{
public:
  TestCnvSvcBase (const std::string& name, ISvcLocator* svcloc)
    : AthService (name, svcloc),
      m_name (name)
  {}
  
  virtual StatusCode disconnectOutput() override
  { std::abort(); }
   virtual const std::string& getOutputConnectionSpec() const override
  { std::abort(); }
  virtual std::string getOutputContainer(const std::string& /*typeName*/,
                                         const std::string& /*key*/ = "") const override
  { std::abort(); }
  virtual pool::DbType technologyType() const override
  { std::abort(); }
  virtual IPoolSvc* getPoolSvc() override
  { std::abort(); }
  virtual const Token* registerForWrite(const Placement* /*placement*/,
                                        const void* /*obj*/,
                                        const RootType& /*classDesc*/) const override
  { std::abort(); }
  virtual bool useDetailChronoStat() const override
  { std::abort(); }
  virtual StatusCode createAddress(long /*svcType*/,
                                   const CLID& /*clid*/,
                                   const std::string* /*par*/,
                                   const unsigned long* /*ip*/,
                                   IOpaqueAddress*& /*refpAddress*/) override
  { std::abort(); }
  virtual StatusCode createAddress(long /*svcType*/,
                                   const CLID& /*clid*/,
                                   const std::string& /*refAddress*/,
                                   IOpaqueAddress*& /*refpAddress*/) override
  { std::abort(); }
  virtual StatusCode convertAddress(const IOpaqueAddress* /*pAddress*/,
                                    std::string& /*refAddress*/) override
  
  { std::abort(); }
  virtual StatusCode makeServer(int /*num*/) override
  { std::abort(); }
  virtual StatusCode makeClient(int /*num*/) override
  { std::abort(); }
  virtual StatusCode cleanUp() override
  { std::abort(); }
  virtual StatusCode setInputAttributes(const std::string& /*fileName*/) override
  { std::abort(); }

  virtual StatusCode initialize() override
  { std::abort(); }
  virtual StatusCode finalize() override
  { std::abort(); }
  virtual const CLID& objType() const override
  { std::abort(); }
  virtual long repSvcType() const override
  { std::abort(); }
  virtual StatusCode setDataProvider(IDataProviderSvc* /*pService*/) override
  { std::abort(); }
  virtual SmartIF<IDataProviderSvc>& dataProvider() const override
  { std::abort(); }
  virtual StatusCode setConversionSvc(IConversionSvc* /*pService*/) override
  { std::abort(); }
  virtual SmartIF<IConversionSvc>& conversionSvc()    const override
  { std::abort(); }
  virtual StatusCode setAddressCreator(IAddressCreator* /*creator*/) override
  { std::abort(); }
  virtual SmartIF<IAddressCreator>& addressCreator()    const override
  { std::abort(); }
  virtual StatusCode createObj(IOpaqueAddress* /*pAddress*/, DataObject*& /*refpObject*/) override
  { std::abort(); }
  virtual StatusCode fillObjRefs(IOpaqueAddress* /*pAddress*/, DataObject* /*pObject*/) override
  { std::abort(); }
  virtual StatusCode updateObj(IOpaqueAddress* /*pAddress*/, DataObject* /*refpObject*/) override
  { std::abort(); }
  virtual StatusCode updateObjRefs(IOpaqueAddress* /*pAddress*/, DataObject* /*pObject*/) override
  { std::abort(); }
  virtual StatusCode createRep(DataObject* /*pObject*/, IOpaqueAddress*& /*refpAddress*/) override
  { std::abort(); }
  virtual StatusCode fillRepRefs(IOpaqueAddress* /*pAddress*/, DataObject* /*pObject*/) override
  { std::abort(); }
  virtual StatusCode updateRep(IOpaqueAddress* /*pAddress*/, DataObject* /*pObject*/)  override
  { std::abort(); }
  virtual StatusCode updateRepRefs(IOpaqueAddress* /*pAddress*/, DataObject* /*pObject*/) override
  { std::abort(); }
  virtual StatusCode addConverter(const CLID& /*clid*/) override
  { std::abort(); }
  virtual StatusCode removeConverter(const CLID& /*clid*/) override
  { std::abort(); }
  virtual IConverter* converter(const CLID& /*clid*/) override
  { std::abort(); }
  virtual StatusCode connectOutput(const std::string& /*outputFile*/) override
  { std::abort(); }
  virtual StatusCode readData() const override
  { std::abort(); }
  virtual const std::string& name() const override
  { return m_name; }
  virtual StatusCode addConverter(IConverter* /*pConverter*/) override
  { std::abort(); }
  virtual StatusCode connectOutput(const std::string& /*outputFile*/,
                                   const std::string& /*openMode*/) override
  { std::abort(); }
  virtual StatusCode commitOutput(const std::string& /*outputFile*/,
                                  bool /*do_commit*/) override
  { std::abort(); }


  
  virtual StatusCode queryInterface(const InterfaceID &ti, void** pp) override
  {
    if (ti == IID_IAthenaPoolCnvSvc) {
      *pp = this;
      return StatusCode::SUCCESS;
    }
    return Service::queryInterface (ti, pp);
  }
  
  virtual StatusCode registerCleanUp(IAthenaPoolCleanUp* /*cnv*/) override
  {
    return StatusCode::SUCCESS;
  }

  std::string m_name;
};


