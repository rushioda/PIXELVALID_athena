# Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration

import atnXML
import string,os,getopt,sys,re,glob
import os.path, shutil
import xml.dom.minidom as dom
import traceback

def atnTestProc(dirName, fileName):
  relhome=os.environ['NICOS_RELHOME']  
  hname=os.environ['NICOS_HOSTNAME']
  nicos_inttests_dir=os.environ['NICOS_INTTESTS_DIR']
  try:
    nicos_atlas_project=os.environ['NICOS_ATLAS_PROJECT']
  except:
    nicos_atlas_project=""
  cmtstructuringstyle=os.environ['CMTSTRUCTURINGSTYLE']
  star_sign='/*'
  if cmtstructuringstyle == 'without_version_directory': star_sign=""
  path_to_xml=os.path.join(dirName, fileName)
  gen_tests_dir="gen_tests"
  allowed_types=['athena','script','kv','makecheck']

  if not relhome:
      print "atnTestProcessing: variable NICOS_RELHOME is not defined"
      sys.exit()

  if not os.path.isdir(relhome):
      print "atnTestProcessing: release dir does not exist:",relhome
      sys.exit()

  nicos_inttests_path=os.path.join(relhome, nicos_inttests_dir)
  nicos_gen_tests_path=os.path.join(nicos_inttests_dir, gen_tests_dir)
  if not os.path.isdir(nicos_inttests_path):
      os.makedirs(nicos_inttests_path)
  if not os.path.isdir(nicos_gen_tests_path):
      os.makedirs(nicos_gen_tests_path)
  prevdir=os.getcwd()
  os.chdir(nicos_gen_tests_path)

  xmlFile = open(path_to_xml)
#  print "FFFFFFFFFFFFFF ",path_to_xml
  try:
      xmlDoc = dom.parse(xmlFile)
  except:
    print "====ATN:atnTestProcessing:dom parse:EXCEPTION===="
    print "problematic file: ", path_to_xml
    traceback.print_exc(file=sys.stdout)
    print "===========ATN:end of EXCEPTION print=========="
    TD = atnXML.testData()
    return None, TD
  TD = atnXML.testData() 
  atnXML.fillTestData(xmlDoc.getElementsByTagName('atn'), TD)

  sign = 1
  for at in allowed_types:
      if TD.testAttr['type'] == at: sign = 0

  if sign:
      print "atnTestProcessing: test", fileName, "has incorrect type", TD.testAttr['type']
      return None, TD

  if TD.testAttr['type'] == 'athena':
      scriptName=re.split(r'\.',fileName)[0] + '.sh'
      path_to_script=os.path.join(nicos_gen_tests_path, scriptName)
      f=open(scriptName, 'w')
      f.write('#!/bin/sh\n')
      f.write('# -----------------------------------------------------------\n')
      f.write('# Test Script generated by atnTestProcessing.py\n')
      f.write('# -----------------------------------------------------------\n')
      for m in TD.expectations['errorMessage']:
        if m:
          strng = '# ERROR_MESSAGE :' + m  + '\n'
          f.write(strng)
      for m in TD.expectations['warningMessage']:
        if m:
          strng = '# WARNING_MESSAGE :' + m + '\n'
          f.write(strng)
      for m in TD.expectations['successMessage']:
        if m:
          strng = '# SUCCESS_MESSAGE :' + m + '\n'
          f.write(strng)
      if TD.properties['mailto']:
          strng = '# MAILTO :' + TD.properties['mailto'] + '\n'
          f.write(strng)
      if TD.testAttr['suite']:
          strng = '# TEST_SUITE :' + TD.testAttr['suite'] + '\n'
          f.write(strng)
      f.write('echo " ======================================================"\n')
      opts=string.join(TD.options,' ')
      strng = 'echo " Starting test athena job "' + opts + '\n'
      f.write(strng)
      strng = 'echo " on machine "' + hname + '\n'
      f.write(strng)
      f.write('echo " ======================================================"\n')
      strng='athena.py ' + opts  + '\n'
      f.write(strng)
      f.write('stat=$?\n') 
      f.write('if [ "$stat" != "0" ]; then\n')
      f.write('echo " ======================================================"\n')
      strng = 'echo " FAILURE (ERROR) : athena job ' + opts + ' returned $stat' + '"\n'
      f.write(strng)
      f.write('exit $stat\n')      
      f.write('echo " ======================================================"\n')
      f.write('fi\n')
  elif TD.testAttr['type'] == 'makecheck':
      scriptName=re.split(r'\.',fileName)[0] + '.sh'
      path_to_script=os.path.join(nicos_gen_tests_path, scriptName)
      f=open(scriptName, 'w')
      f.write('#!/bin/sh\n')
      f.write('# -----------------------------------------------------------\n')
      f.write('# Test Script generated by atnTestProcessing.py\n')
      f.write('# -----------------------------------------------------------\n')
      for m in TD.expectations['errorMessage']:
        if m:
          strng = '# ERROR_MESSAGE :' + m  + '\n'
          f.write(strng)
      for m in TD.expectations['warningMessage']:
        if m:
          strng = '# WARNING_MESSAGE :' + m + '\n'
          f.write(strng)
      for m in TD.expectations['successMessage']:
        if m:
          strng = '# SUCCESS_MESSAGE :' + m + '\n'
          f.write(strng)
      if TD.properties['mailto']:
          strng = '# MAILTO :' + TD.properties['mailto'] + '\n'
          f.write(strng)
      if TD.testAttr['suite']:
          strng = '# TEST_SUITE :' + TD.testAttr['suite'] + '\n'
          f.write(strng)
      f.write('echo " ======================================================"\n')
      opts=string.join(TD.options,' ')
      strng = 'echo " Starting make check "' + opts + '\n'
      f.write(strng)
      strng = 'echo " on machine "' + hname + '\n'
      f.write(strng)
      f.write('echo " ======================================================"\n')
      if TD.properties['package_atn']:
          strng='cd ${NICOS_RELHOME}/'+TD.properties['package_atn']+star_sign+'/cmt'+'\n'
      else:
          ddd1=dirName
          pathcmt=ddd1 + '/cmt'
          for xdd in [1, 2, 3]:
            ddd1=os.path.dirname(ddd1)
            pathcmt1=ddd1 + '/cmt'
            if os.path.isdir(pathcmt1):
              pathcmt=pathcmt1
              break
#          print "PSPSPSPSSPSP ", pathcmt  
          strng='cd ' + pathcmt + '\n' 
      f.write(strng)
      if TD.properties['prescript']:
          strng = TD.properties['prescript'] + '\n'
          f.write(strng)
      strng='source setup.sh ' + '\n'
      f.write(strng)
      strng='make check ' + opts  + '\n'
      f.write(strng)
      f.write('stat=$?\n')
      f.write('if [ "$stat" != "0" ]; then\n')
      f.write('echo " ======================================================"\n')
      strng = 'echo " FAILURE (ERROR) : athena job ' + opts + ' returned $stat' + '"\n'
      f.write(strng)
      f.write('exit $stat\n')
      f.write('echo " ======================================================"\n')
      f.write('fi\n')
      if TD.properties['postscript']:
          strng = TD.properties['postscript'] + '\n'
          f.write(strng)
  elif TD.testAttr['type'] == 'kv':
      scriptName=re.split(r'\.',fileName)[0] + '.sh'
      path_to_script=os.path.join(nicos_gen_tests_path, scriptName)
      f=open(scriptName, 'w')
      f.write('#!/bin/sh\n')
      f.write('# -----------------------------------------------------------\n')
      f.write('# Test Script generated by atnTestProcessing.py\n')
      f.write('# -----------------------------------------------------------\n')
      for m in TD.expectations['errorMessage']:
        if m:
          strng = '# ERROR_MESSAGE :' + m  + '\n'
          f.write(strng)
      strng1='[FAIL'
      strng = '# ERROR_MESSAGE :' + strng1 + '\n'
      f.write(strng)       
      TD.addError(strng1)
      for m in TD.expectations['warningMessage']:
        if m:
          strng = '# WARNING_MESSAGE :' + m + '\n'
          f.write(strng)
      for m in TD.expectations['successMessage']:
        if m:
          strng = '# SUCCESS_MESSAGE :' + m + '\n'
          f.write(strng)
      strng1 = '[  OK'
      strng = '# SUCCESS_MESSAGE :' + strng1 + '\n'
      f.write(strng)
      TD.addSuccess(strng1)
      if TD.properties['mailto']:
          strng = '# MAILTO :' + TD.properties['mailto'] + '\n'
          f.write(strng)
      if TD.testAttr['suite']:
          strng = '# TEST_SUITE :' + TD.testAttr['suite'] + '\n'
          f.write(strng)
      f.write('echo " ======================================================"\n')
      opts=string.join(TD.options,' ')
      strng = 'echo " Starting KV test "' + opts + '\n'
      f.write(strng)
      strng = 'echo " on machine "' + hname + '\n'
      f.write(strng)
      f.write('echo " ======================================================"\n')
      strng = 'export JOBTRANSFORMSROOT=${NICOS_RELHOME}/Tools/JobTransforms' + star_sign + '\n'; f.write(strng)
      strng = 'ATLAS_ROOT=`dirname ${NICOS_PROJECT_HOME}`' + '\n'; f.write(strng)
      strng = 'release="${NICOS_PROJECT_RELNAME}"' + '\n'; f.write(strng)
      strng = 'release_base=`basename ${NICOS_PROJECT_HOME}`' + '\n'; f.write(strng)
      project_opt=""
      if ( nicos_atlas_project != "" ):
          project_opt="--project Atlas" + nicos_atlas_project + " " 
      strng=\
      'eval ${NICOS_RELHOME}/Tools/KitValidation'+star_sign+'/share/KitValidation ' + \
      '--bw -vgkn --context="dist" --no-auto ' + \
      '-p ${ATLAS_ROOT} ' + \
      '-r ${release} ' + \
      '-b ${release_base} ' + \
      project_opt + \
      '--kvt=' + opts + '\n'  
      f.write(strng)
      f.write('stat=$?\n')
      f.write('if [ "$stat" != "0" ]; then\n')
      f.write('echo " ======================================================"\n')
      strng = 'echo " FAILURE (ERROR) : KV test ' + opts + ' returned $stat' + '"\n'
      f.write(strng)
      f.write('exit $stat\n')
      f.write('echo " ======================================================"\n')
      f.write('fi\n')
  else:
      path_to_script=TD.options[0]
  os.chdir(prevdir)
  return path_to_script, TD
    
 
