package AthenaPoolTest

author	  RD Schaffer <R.D.Schaffer@cern.ch>

private

use AtlasPolicy	         AtlasPolicy-*
use GaudiInterface       GaudiInterface-*       External
use AthenaKernel         AthenaKernel-*         Control
use StoreGate            StoreGate-*            Control
use EventInfo            EventInfo-*            Event
use EventInfoMgt         EventInfoMgt-*         Event
use AthenaBaseComps      AthenaBaseComps-*      Control

# Track test
use Identifier           Identifier-*           DetectorDescription
use TrkParameters        TrkParameters-*        Tracking/TrkEvent
# use TrkParametersBase    TrkParametersBase-*    Tracking/TrkEvent
use TrkTrack             TrkTrack-*             Tracking/TrkEvent
use TrkMaterialOnTrack   TrkMaterialOnTrack-*   Tracking/TrkEvent
use TrkEventPrimitives   TrkEventPrimitives-*   Tracking/TrkEvent
use TrkCompetingRIOsOnTrack TrkCompetingRIOsOnTrack-* Tracking/TrkEvent
use TrkSurfaces          TrkSurfaces-*          Tracking/TrkDetDescr
use TrkVertexOnTrack           TrkVertexOnTrack-*              Tracking/TrkEvent
use GeoPrimitives      GeoPrimitives-*    DetectorDescription

#InDet RIO_OnTrack test
use InDetReadoutGeometry InDetReadoutGeometry-* InnerDetector/InDetDetDescr
use InDetPrepRawData    InDetPrepRawData-*   InnerDetector/InDetRecEvent
use InDetRIO_OnTrack    InDetRIO_OnTrack-*   InnerDetector/InDetRecEvent
use InDetCompetingRIOsOnTrack InDetCompetingRIOsOnTrack-* InnerDetector/InDetRecEvent

# InDet RDO test
use InDetRawData    InDetRawData-*    InnerDetector/InDetRawEvent
use InDetIdentifier InDetIdentifier-* InnerDetector/InDetDetDescr

# LAr test
use LArRecEvent     LArRecEvent-*    LArCalorimeter
use CaloIdentifier  CaloIdentifier-* Calorimeter 
use CaloEvent       CaloEvent-*      Calorimeter 
# use CaloUtils       CaloUtils-*      Calorimeter 
use CaloDetDescr    CaloDetDescr-*   Calorimeter 

# AthenaPoolTest Data
use AthenaPoolTestData   AthenaPoolTestData-*    AtlasTest/DatabaseTest

# EventInfo test
use GeoModelInterfaces   GeoModelInterfaces-*   DetectorDescription/GeoModel

# AthenaPoolUtilities
use AthenaPoolUtilities  AthenaPoolUtilities-*  Database/AthenaPOOL

# Test infrastructure
use TestPolicy           TestPolicy-*

apply_pattern component_library

library AthenaPoolTest " AthenaPoolTestDataReader.cxx          \
                       	 AthenaPoolTestDataWriter.cxx          \
                         AthenaPoolTestAttrWriter.cxx          \
                         AthenaPoolTestAttrReader.cxx          \
#			 # CaloClusterFakeWriter.cxx             \
#			 # CaloClusterFakeReader.cxx             \
                       	 InDetRawDataFakeReader.cxx            \
                       	 InDetRawDataFakeWriter.cxx            \
                       	 LArCellContFakeWriter.cxx             \
                       	 LArCellContFakeReader.cxx             \
                         EventInfoWriter.cxx                   \
                         EventInfoReader.cxx                   \
                         PileUpEventInfoWriter.cxx             \
                         PileUpEventInfoReader.cxx             \
                         TrkTrackFakeReader.cxx               \
                         TrkTrackFakeWriter.cxx               \
                         FakeTrackBuilder.cxx               \
                       	 components/*.cxx "   

apply_pattern declare_joboptions files="-s=../share *.py"


# Setup automatic testing which runs with gmake check

# We define here a macro which can be used to run the tests only on
# optimized mode.
macro test_pattern_opt_only "athenarun_test" \
      debug        ""



# Write/read out some simple objects:
# AthenaPoolTestWrite
apply_pattern athenarun_test name="AthenaPoolTestWrite" pre_script="../test/pre_check.sh AthenaPoolTestWrite " options="AthenaPoolTest/AthenaPoolTestWrite.py" post_script="../test/post_check_with_select.sh AthenaPoolTestWrite ^..AthenaPoolTestD " 

# AthenaPoolTestRead
apply_pattern athenarun_test name="AthenaPoolTestRead" pre_script="../test/pre_check.sh AthenaPoolTestRead " options="AthenaPoolTest/AthenaPoolTestRead.py" post_script="../test/post_check_with_select.sh AthenaPoolTestRead AthenaPoolTestD " 
# Ensure AthenaPoolTestRead test runs after AthenaPoolTestWrite test completes
macro_append AthenaPoolTestRead_test_dependencies " AthenaPoolTestWrite_test "

# Add on test of navigation still using simple objects:
# AthenaPoolTestWrite - Step2 - rewrite part in another file
apply_pattern athenarun_test name="AthenaPoolTestStep2Write" pre_script="../test/pre_check.sh AthenaPoolTestStep2Write " options="AthenaPoolTest/AthenaPoolTestStep2Write.py" post_script="../test/post_check_with_select.sh AthenaPoolTestStep2Write ^..AthenaPoolTestD " 
macro_append AthenaPoolTestStep2Write_test_dependencies " AthenaPoolTestRead_test "

# AthenaPoolTestReadNav - read back from Step2 - part in one file,
# part in another file
apply_pattern athenarun_test name="AthenaPoolTestReadNav" pre_script="../test/pre_check.sh AthenaPoolTestReadNav " options="AthenaPoolTest/AthenaPoolTestReadNav.py" post_script="../test/post_check_with_select.sh AthenaPoolTestReadNav AthenaPoolTestD " 
macro_append AthenaPoolTestReadNav_test_dependencies " AthenaPoolTestStep2Write_test "

# # Copy the Step2 file
# apply_pattern athenarun_test name="AthenaPoolTestCopy" pre_script="../test/pre_check.sh AthenaPoolTestCopy " options="AthenaPoolTest/AthenaPoolTestCopy.py" post_script="../test/post_check_with_select.sh AthenaPoolTestCopy ^..Stream1 " 

# # Remove the Step2 file and read the copy
# apply_pattern athenarun_test name="AthenaPoolTestReadAfterCopy" pre_script="../test/pre_check.sh AthenaPoolTestReadAfterCopy SimplePoolFile1.root " options="AthenaPoolTest/AthenaPoolTestReadAfterCopy.py" post_script="../test/post_check_with_select.sh AthenaPoolTestReadAfterCopy AthenaPoolTestD " 

# # Write/read out PileUpEventInfo:
# # PileUpEventInfoWrite
# apply_pattern athenarun_test name="PileUpEventInfoWrite" pre_script="../test/pre_check.sh PileUpEventInfoWrite " options="AthenaPoolTest/PileUpEventInfoWrite.py" post_script="../test/post_check_with_select.sh PileUpEventInfoWrite ^..PileUpEventInfo " 

# # PileUpEventInfoRead
# apply_pattern athenarun_test name="PileUpEventInfoRead" pre_script="../test/pre_check.sh PileUpEventInfoRead " options="AthenaPoolTest/PileUpEventInfoRead.py" post_script="../test/post_check_with_select.sh PileUpEventInfoRead ^..PileUpEventInfo " 



# Atlfast NOT YET WORKING
# AtlfastPoolWrite
# problems: apply_pattern athenarun_test name="AtlfastPoolWrite" pre_script="../test/pre_check.sh AtlfastPoolWrite " options="AthenaPoolTest/AtlfastPoolWriteOptions.py" post_script="../test/post_check_with_select.sh AtlfastPoolWrite " 

# AtlfastPoolRead
#problems: apply_pattern athenarun_test name="AtlfastPoolRead" pre_script="../test/atlfast_write_pre_check.sh AtlfastPoolRead " options="AthenaPoolTest/AtlfastPoolReadOptions.py" post_script="../test/post_check_with_select.sh AtlfastPoolRead " 



# Test write/read of indet rdos:
# InDetRawDataWriter
apply_pattern athenarun_test name="InDetRawDataWriter" pre_script="../test/pre_check.sh InDetRawDataWriter " options="AthenaPoolTest/InDetRawDataWriter_jobOptions.py" post_script="../test/post_check_with_select.sh InDetRawDataWriter InDetRawDataFak " 
macro_append InDetRawDataWriter_test_dependencies " AthenaPoolTestReadNav_test "

# InDetRawDataRead
apply_pattern athenarun_test name="InDetRawDataRead" pre_script="../test/pre_check.sh InDetRawDataRead " options="AthenaPoolTest/InDetRawDataReader_jobOptions.py" post_script="../test/post_check_with_select.sh InDetRawDataRead InDetRawDataFak " 
macro_append InDetRawDataRead_test_dependencies " InDetRawDataWriter_test "


# Test write/read of LAr cell
# LArCellContWriter
apply_pattern athenarun_test name="LArCellContWriter" pre_script="../test/pre_check.sh LArCellContWriter " options="AthenaPoolTest/LArCellContWriter_jobOptions.py" post_script="../test/post_check_with_select.sh LArCellContWriter LArCellContFake " 
macro_append LArCellContWriter_test_dependencies " InDetRawDataRead_test "

# LArCellContRead
apply_pattern athenarun_test name="LArCellContRead" pre_script="../test/pre_check.sh LArCellContRead " options="AthenaPoolTest/LArCellContReader_jobOptions.py" post_script="../test/post_check_with_select.sh LArCellContRead LArCellContFake " 
macro_append LArCellContRead_test_dependencies " LArCellContWriter_test "


# # Test of explicit collection write/read
# # LArCellContWriteReg
# apply_pattern $(test_pattern_opt_only) name="LArCellContWriteReg" pre_script="../test/pre_check.sh LArCellContWriteReg " options="AthenaPoolTest/LArCellContWriter_jobOptionsReg.py" post_script="../test/post_check_with_select.sh LArCellContWriteReg LArCellContFake  " 

# # LArCellContReadReg
# apply_pattern $(test_pattern_opt_only) name="LArCellContReadReg" pre_script="../test/pre_check.sh LArCellContReadReg " options="AthenaPoolTest/LArCellContReader_jobOptionsReg.py" post_script="../test/post_check_with_select.sh LArCellContReadReg LArCellContFake " 


# #LFN test
# # LArCellContWriteStep1
# apply_pattern athenarun_test name="LArCellContWriteStep1" pre_script="../test/pre_check.sh LArCellContWriteStep1 " options="AthenaPoolTest/LArCellContWriter_jobOptionsStep1.py" post_script="../test/post_check_with_select.sh LArCellContWriteStep1 LArCellContFake " 

# # LArCellContWriteStep2
# apply_pattern athenarun_test name="LArCellContWriteStep2" pre_script="../test/pre_check.sh LArCellContWriteStep2 " options="AthenaPoolTest/LArCellContWriter_jobOptionsStep2.py" post_script="../test/post_check_with_select.sh LArCellContWriteStep2 LArCellContFake " 

# # LArCellContReadByLFN
# apply_pattern athenarun_test name="LArCellContReadByLFN" pre_script="../test/lfn_test_pre_check.sh LArCellContReadByLFN " options="AthenaPoolTest/LArCellContReader_jobOptionsByLFN.py" post_script="../test/post_check_with_select.sh LArCellContReadByLFN LArCellContFake " 


# # write/read test of calo clusters
# # CaloClusterWriter
# apply_pattern athenarun_test name="CaloClusterWriter" pre_script="../test/pre_check.sh CaloClusterWriter" options="AthenaPoolTest/CaloClusterWriter_jobOptions.py" post_script="../test/post_check_with_select.sh CaloClusterWriter ^..CaloClusterFakeWriter" 
# macro_append CaloClusterWriter_test_dependencies " LArCellContRead_test "

# # CaloClusterReader
# apply_pattern athenarun_test name="CaloClusterReader" pre_script="../test/pre_check.sh CaloClusterReader " options="AthenaPoolTest/CaloClusterReader_jobOptions.py" post_script="../test/post_check_with_select.sh CaloClusterReader ^..CaloClusterFakeWriter" 
# macro_append CaloClusterReader_test_dependencies " CaloClusterWriter_test "


# # Test ElementLinks across files
# # CaloClusterStep1Writer
# apply_pattern athenarun_test name="CaloClusterStep1Writer" pre_script="../test/pre_check.sh CaloClusterStep1Writer" options="AthenaPoolTest/CaloClusterStep1Writer_jobOptions.py" post_script="../test/post_check_with_select.sh CaloClusterStep1Writer Fake " 

# # CaloClusterStep2Writer
# apply_pattern athenarun_test name="CaloClusterStep2Writer" pre_script="../test/pre_check.sh CaloClusterStep2Writer" options="AthenaPoolTest/CaloClusterStep2Writer_jobOptions.py" post_script="../test/post_check_with_select.sh CaloClusterStep2Writer Fake " 

# # CaloCluster2StepReader
# apply_pattern athenarun_test name="CaloCluster2StepReader" pre_script="../test/pre_check.sh CaloCluster2StepReader " options="AthenaPoolTest/CaloCluster2StepReader_jobOptions.py" post_script="../test/post_check_with_select.sh CaloCluster2StepReader Fake " 


# # The following four tests are for writing explicit root collections with an extra ref 
# #   First write an implicit collection, then a second file and an explicit root collection
# #   Then read back with standard ref - Step1, or extra ref - Step2

# # AthenaPoolTestWrite - write out implicit collection with athena pool test data
# apply_pattern athenarun_test name="AthenaPoolTestWrite2" pre_script="../test/pre_check.sh AthenaPoolTestWrite2 " options="AthenaPoolTest/AthenaPoolTestWrite.py" post_script="../test/post_check_with_select.sh AthenaPoolTestWrite2 ^..AthenaPoolTestD " 

# # LArCellContWriteRegStep2 - write out explicit collection with LArCellCont
# apply_pattern $(test_pattern_opt_only) name="LArCellContWriteRegStep2" pre_script="../test/pre_check.sh LArCellContWriteRegStep2 " options="AthenaPoolTest/LArCellContWriter_jobOptionsRegStep2.py" post_script="../test/post_check_with_select.sh LArCellContWriteRegStep2 LArCellContFake  " 

# # LArCellContWriteRegStep3 - write out explicit collection with LArCellCont 
# # in separate step
# apply_pattern $(test_pattern_opt_only) name="LArCellContWriteRegStep3" pre_script="../test/pre_check.sh LArCellContWriteRegStep3 " options="AthenaPoolTest/LArCellContWriter_jobOptionsRegStep3.py" post_script="../test/diff_check.sh LArCellContWriteRegStep3 LArCellContFake " 

# # LArCellContReadRegStep1 - read in LArCellCont
# apply_pattern $(test_pattern_opt_only) name="LArCellContReadRegStep1" pre_script="../test/pre_check.sh LArCellContReadRegStep1 " options="AthenaPoolTest/LArCellContReader_jobOptionsRegStep1.py" post_script="../test/post_check_with_select.sh  LArCellContReadRegStep1 LArCellContFake " 

# # LArCellContReadRegStep2 - read in athena pool test data
# apply_pattern $(test_pattern_opt_only) name="LArCellContReadRegStep2" pre_script="../test/pre_check.sh LArCellContReadRegStep2 " options="AthenaPoolTest/LArCellContReader_jobOptionsRegStep2.py" post_script="../test/post_check_with_select.sh  LArCellContReadRegStep2 LArCellContFake " 


# Check for adding DetDescr tags to event info object:


# EventInfoWrite
apply_pattern athenarun_test name="EventInfoWrite" pre_script="../test/pre_check.sh EventInfoWrite " options="AthenaPoolTest/EventInfoWrite.py" post_script="../test/post_check_with_select.sh EventInfoWrite ^..[TE][av][ge][In][nt][fI][on][Mf][go][rW] " 
# macro_append EventInfoWrite_test_dependencies " CaloClusterReader_test "
macro_append EventInfoWrite_test_dependencies " LArCellContRead_test "

# EventInfoWriteStep2
apply_pattern athenarun_test name="EventInfoWriteStep2" pre_script="../test/pre_check.sh EventInfoWriteStep2 " options="AthenaPoolTest/EventInfoWriteStep2.py" post_script="../test/post_check_with_select.sh EventInfoWriteStep2 ^..[TE][av][ge][In][nt][fI][on][Mf][go][rW] "
macro_append EventInfoWriteStep2_test_dependencies " EventInfoWrite_test "

# EventInfoWriteStep3
apply_pattern athenarun_test name="EventInfoWriteStep3" pre_script="../test/pre_check.sh EventInfoWriteStep3 " options="AthenaPoolTest/EventInfoWriteStep3.py" post_script="../test/post_check_with_select.sh EventInfoWriteStep3 ^..[TE][av][ge][In][nt][fI][on][Mf][go][rW] "
macro_append EventInfoWriteStep3_test_dependencies " EventInfoWriteStep2_test "

# EventInfoWriteStep4
apply_pattern athenarun_test name="EventInfoWriteStep4" pre_script="../test/pre_check.sh EventInfoWriteStep4 " options="AthenaPoolTest/EventInfoWriteStep4.py" post_script="../test/post_check_with_select.sh EventInfoWriteStep4 ^..[TE][av][ge][In][nt][fI][on][Mf][go][rW] " 
macro_append EventInfoWriteStep4_test_dependencies " EventInfoWriteStep3_test "

# EventInfoWriteStep5
apply_pattern athenarun_test name="EventInfoWriteStep5" pre_script="../test/pre_check.sh EventInfoWriteStep5 " options="AthenaPoolTest/EventInfoWriteStep5.py" post_script="../test/post_check_with_select.sh EventInfoWriteStep5 ^..[TE][av][ge][In][nt][fI][on][Mf][go][rW] " 
macro_append EventInfoWriteStep5_test_dependencies " EventInfoWriteStep4_test "

# EventInfoRead
apply_pattern athenarun_test name="EventInfoRead" pre_script="../test/pre_check.sh EventInfoRead " options="AthenaPoolTest/EventInfoRead.py" post_script="../test/post_check_with_select.sh EventInfoRead ^..[TE][av][ge][In][nt][fI][on][Mf][go][rW] " 
macro_append EventInfoRead_test_dependencies " EventInfoWriteStep5_test "

