package ControlTest
author Paolo Calafiura <Paolo.Calafiura@cern.ch>
use AtlasPolicy     AtlasPolicy-*

use MinimalRunTime  MinimalRunTime-*     Control  -no_auto_imports

#apply_pattern declare_runtime_extras extras="pre.sh"
#apply_pattern declare_scripts files="pre.sh"

use TestPolicy      TestPolicy-*   
use TestTools       TestTools-*          AtlasTest

#FIXME AthenaServices should not be needed but actually is (make check fails)
#use AthenaServices  AthenaServices-*     Control
use AthenaPython    AthenaPython-*       Control -no_auto_imports

#SGTools/SGComps test that can't be run there due to ToyConversion dep
#use SGComps         SGComps-*            Control

private
use GaudiInterface  GaudiInterface-*     External
use CxxUtils        CxxUtils-*           Control
use AthenaKernel    AthenaKernel-*       Control
use AthContainers   AthContainers-*      Control
use AthLinks        AthLinks-*           Control
use SGTools         SGTools-*            Control
use StoreGate       StoreGate-*          Control
use ToyConversion   ToyConversion-*      Control/AthenaExamples
end_private

macro PPSoptignore "" \
      optimized "requestRelease|"


apply_pattern UnitTest_run unit_test=DataProxy \
  extrapatterns="HistogramPersis.* +INFO|EventPersistenc.*INFO|^JobOptionsSvc +INFO|IConversionSvc ptr not set"
apply_pattern UnitTest_run unit_test=ProxyProviderSvc \
              extrapatterns="$(PPSoptignore)^ClassIDSvc +DEBUG|Histogram.* (DEBUG|INFO)|DetectorStore +DEBUG|ToyConversionSvc +DEBUG|EventDataSvc +DEBUG|EventPersis.* +(DEBUG|INFO)|HistoryStore +DEBUG|^JobOptionsSvc +INFO|^DataProxy +VERBOSE|^ProxyProviderSvc +DEBUG|^ServiceManager +DEBUG|Service base class initialized successfully|found service"

#DataModel tests that can't be run there due to StoreGate dep
apply_pattern UnitTest_run unit_test=CircularDep \
  extrapatterns="^JobOptionsSvc +INFO|Service base class initialized successfully"
apply_pattern UnitTest_run unit_test=SGDataLink \
  extrapatterns="^JobOptionsSvc +INFO|Service base class initialized successfully"
apply_pattern UnitTest_run unit_test=ElementLink \
  extrapatterns="^JobOptionsSvc +INFO|Service base class initialized successfully"
apply_pattern UnitTest_run unit_test=ElementLinkVector \
  extrapatterns="^JobOptionsSvc +INFO|Service base class initialized successfully"

#StoreGate tests that are better run here due to the SGComps (PPS) run-time dependency
apply_pattern declare_joboptions files="StoreGateTestCommon.txt *.py"

apply_pattern UnitTest_run unit_test=StoreGateSvcClient extrapatterns="modifiable when retrieved|HistogramPersis.* +INFO|^JobOptionsSvc +INFO|Service base class initialized successfully|VERBOSE committing dataObj|DetectorStore.*error setting up proxy|DetectorStore.*record_impl: failed"
macro_append StoreGateSvcClient_testlinkopts " -lSGtests"
apply_pattern UnitTest_run unit_test=ClearStore \
  extrapatterns="^JobOptionsSvc +INFO|Service base class initialized successfully"
macro_append ClearStore_testlinkopts " -lSGtests"
#macro ClearStore_test_cppflags " -D __PROXYDEBUG"

apply_pattern UnitTest_run unit_test=StoreID \
  extrapatterns="^JobOptionsSvc +INFO|Service base class initialized successfully"

#integration tests
apply_pattern install_applications
apply_pattern install_xmls

#FIXME does not work
#apply_pattern athenarun_test name="<example>" \
#	      pre_script="../cmt/setup.sh"	\	      
#	      options=" AthEx<example>/<example>Options.txt" \
#	      post_script="'${TESTTOOLSROOT}/share/post.sh <example>'"	      
	      
#apply_pattern athexample_run example="FortranAlgorithm"

use AthExFortranAlgorithm AthExFortranAlgorithm-*   Control/AthenaExamples -no_auto_imports
apply_pattern athenarun_test name="FortranAlgorithm" \
	      pre_script="preFortAlgEx.sh"	\	      
	      options="AthExFortranAlgorithm/FortranAlgorithmOptions.py" \
	      post_script="${TESTTOOLSROOT}/share/post.sh FortranAlgorithm $(q)^Py:ConfigurableDb +(WARNING|INFO|ERROR)|Py:Athena +INFO including file |Warning in .TEnvRec::ChangeValue.: duplicate entry|calling initialize_|ToolSvc.finalize.. +INFO| [A-Z]+ 2[0-9][0-9][0-9]$$|^Py:Athena +INFO|[Rr]oo[Ff]it|NIKHEF|DeprecationWarning: object.__new__|^  newobj =|^\*+$$|drop-and-reload|^ *$$|we will keep the configuration around|ApplicationMgr +INFO|Start StoreGateSvc$(q)"

macro SGGoptignore "" \
      optimized "|Retrieved const handle to default object|of type EventInfo|object not modifiable when retrieved|requestRelease"
use AthExStoreGateExample AthExStoreGateExample-*   Control/AthenaExamples -no_auto_imports

apply_pattern athenarun_test name="StoreGateReentrant" \
	      pre_script="../cmt/setup.sh"	\	      
	      options="AthExStoreGateExample/StoreGateExample_Reentrant_jobOptions.py" \
	      post_script="${TESTTOOLSROOT}/share/post.sh StoreGateReentrant $(q)^Py:ConfigurableDb +(WARNING|INFO|ERROR)|Py:Athena +INFO including file |Warning in .TEnvRec::ChangeValue.: duplicate entry|ToolSvc.finalize.. +INFO|^WriteData +INFO in initialize$$| [A-Z]+ 2[0-9][0-9][0-9]$$$(SGGoptignore)|^Py:Athena +INFO|[Rr]oo[Ff]it|NIKHEF|DeprecationWarning: object.__new__|^  newobj =|^\*+$$|drop-and-reload|^ *$$|we will keep the configuration around|object not modifiable when retrieved|Retrieved const handle to default|type EventInfo|^StoreGateSvc +DEBUG|^ of type|object modifiable when retrieved|ApplicationMgr +INFO|Start StoreGateSvc$(q)"

apply_pattern athenarun_test name="StoreGateGen" \
	      pre_script="../cmt/setup.sh"	\	      
	      options="AthExStoreGateExample/StoreGateExample_Gen_jobOptions.py" \
	      post_script="${TESTTOOLSROOT}/share/post.sh StoreGateGen $(q)^Py:ConfigurableDb +(WARNING|INFO|ERROR)|Py:Athena +INFO including file |Warning in .TEnvRec::ChangeValue.: duplicate entry|ToolSvc.finalize.. +INFO|^WriteData +INFO in initialize$$| [A-Z]+ 2[0-9][0-9][0-9]$$$(SGGoptignore)|^Py:Athena +INFO|[Rr]oo[Ff]it|NIKHEF|DeprecationWarning: object.__new__|^  newobj =|^\*+$$|drop-and-reload|^ *$$|we will keep the configuration around|object not modifiable when retrieved|Retrieved const handle to default|type EventInfo|^StoreGateSvc +DEBUG|^ of type|object modifiable when retrieved|ApplicationMgr +INFO|Start StoreGateSvc$(q)"

apply_pattern athenarun_test name="StoreGateDFlow" \
	      pre_script="../cmt/setup.sh"	\	      
	      options="AthExStoreGateExample/dflow_jobo.py" \
	      post_script="${TESTTOOLSROOT}/share/post.sh StoreGateDFlow $(q)^Py:ConfigurableDb +(WARNING|INFO|ERROR)|Py:Athena +INFO including file |Warning in .TEnvRec::ChangeValue.: duplicate entry|ToolSvc.finalize.. +INFO|^WriteData +INFO in initialize$$| [A-Z]+ 2[0-9][0-9][0-9]$$$(SGGoptignore)|^Py:Athena +INFO|[Rr]oo[Ff]it|NIKHEF|DeprecationWarning: object.__new__|^  newobj =|^\*+$$|drop-and-reload|^ *$$|we will keep the configuration around|object not modifiable when retrieved|Retrieved const handle to default|type EventInfo|^StoreGateSvc +DEBUG|^ of type|object modifiable when retrieved|ApplicationMgr +INFO|WARNING could not get proxy for key|Start StoreGateSvc$(q)"

apply_pattern athenarun_test name="test_interactive_athena" \
	      pre_script="../cmt/setup.sh"	\	      
	      options="ControlTest/test_interactive_athena.py" \
	      post_script="${TESTTOOLSROOT}/share/post.sh test_interactive_athena $(q)^Py:ConfigurableDb +(WARNING|INFO|ERROR)|Py:Athena +INFO including file |Warning in .TEnvRec::ChangeValue.: duplicate entry|calling initialize_|ToolSvc.finalize.. +INFO| [A-Z]+ 2[0-9][0-9][0-9]$$|^Py:Athena +INFO|[Rr]oo[Ff]it|NIKHEF|DeprecationWarning: object.__new__|^  newobj =|^\*+$$|drop-and-reload|^ *$$|we will keep the configuration around|ApplicationMgr +INFO|Start StoreGateSvc|already in TClassTable$(q)"

## AthenaCommon/python unit-test
apply_pattern declare_python_modules files="*.py"
