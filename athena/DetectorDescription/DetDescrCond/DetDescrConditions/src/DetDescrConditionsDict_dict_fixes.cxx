/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

// Generated at Sun Jul 17 15:33:29 2005. Do not modify it

#ifdef _WIN32
#pragma warning ( disable : 4786 )
#ifndef LCGDICT_STRING 
#include <string> // Included here since it is sensitive to private->public trick
#endif
#endif
#define private public
#define protected public
#include "../DetDescrConditions/DetDescrConditionsDict.h"
#undef private
#undef protected
#include "ReflectionBuilder/ReflectionBuilder.h"
#include "ReflectionBuilder/CollectionProxy.h"
#include <typeinfo>
using namespace seal::reflect;

//------Dictionary for class AlignTransMember -------------------------------
class AlignableTransform__AlignTransMember_dict { 
  public:
  AlignableTransform__AlignTransMember_dict();
  static void* constructor_4747( void*, const std::vector<void*>& );
  static void  destructor( void* o ) { ((AlignableTransform::AlignTransMember*)o)->~AlignTransMember(); }
  static void* constructor_4749( void* );
  static void* constructor_4750( void*, const std::vector<void*>& );
  static void* method_4751( void* );
  static void* method_4752( void* );
  static void  method_4753( void*, const std::vector<void*>& );
};
AlignableTransform__AlignTransMember_dict::AlignableTransform__AlignTransMember_dict() {
  ClassBuilder _c_("AlignableTransform::AlignTransMember", "", typeid(AlignableTransform::AlignTransMember), sizeof(AlignableTransform::AlignTransMember),std::vector<const std::type_info*>(), false, NOCONTAINER, 0, PUBLIC);
  _c_.addField("m_ident", "Identifier", "", (size_t)(&((AlignableTransform::AlignTransMember*)64)->m_ident)-64, PRIVATE );
  _c_.addField("m_trans", "HepGeom::Transform3D", "", (size_t)(&((AlignableTransform::AlignTransMember*)64)->m_trans)-64, PRIVATE );
  _c_.addMethod("AlignTransMember", "", "AlignableTransform::AlignTransMember", "AlignableTransform::AlignTransMember&", constructor_4747, PUBLIC);
  _c_.addMethod("~AlignTransMember", "", destructor, PUBLIC);
  _c_.addMethod("AlignTransMember", "", "AlignableTransform::AlignTransMember", constructor_4749, PUBLIC);
  _c_.addMethod("AlignTransMember", "", "AlignableTransform::AlignTransMember", "Identifier&; HepGeom::Transform3D&", constructor_4750, PUBLIC);
  _c_.addMethod("identify", "", "Identifier&", method_4751, PUBLIC);
  _c_.addMethod("transform", "", "HepGeom::Transform3D&", method_4752, PUBLIC);
  _c_.addMethod("setTransform", "", "HepGeom::Transform3D&", method_4753, PUBLIC);
  _c_.build();
}

//------Stub functions for class AlignTransMember -------------------------------
void* AlignableTransform__AlignTransMember_dict::constructor_4747( void* mem, const std::vector<void*>& arg) {
  return ::new(mem) AlignableTransform::AlignTransMember(*(const AlignableTransform::AlignTransMember*)arg[0]);
}

void* AlignableTransform__AlignTransMember_dict::constructor_4749( void* mem) {
  return ::new(mem) AlignableTransform::AlignTransMember();
}

void* AlignableTransform__AlignTransMember_dict::constructor_4750( void* mem, const std::vector<void*>& arg) {
  return ::new(mem) AlignableTransform::AlignTransMember(*(const Identifier*)arg[0],
                                                         *(const HepGeom::Transform3D*)arg[1]);
}

void* AlignableTransform__AlignTransMember_dict::method_4751( void* o)
{
  return (void*)&((const AlignableTransform::AlignTransMember*)o)->identify();
}

void* AlignableTransform__AlignTransMember_dict::method_4752( void* o)
{
  return (void*)&((const AlignableTransform::AlignTransMember*)o)->transform();
}

void AlignableTransform__AlignTransMember_dict::method_4753( void* o, const std::vector<void*>& arg)
{
  ((AlignableTransform::AlignTransMember*)o)->setTransform(*(const HepGeom::Transform3D*)arg[0]);
}


namespace {
  struct Dictionaries {
    Dictionaries() {
      AlignableTransform__AlignTransMember_dict();
      Class::resolvePending();
    }
  };
  static Dictionaries instance;
}



// This file has been generated by lcgdict with the --capabilities option
static  const char* clnames[] = {
//--Begin DetDescrConditionsDict
  "LCGDict/AlignableTransform::AlignTransMember",
//--End   DetDescrConditionsDict
//--Final End
};

extern "C" void SEAL_CAPABILITIES (const char**& names, int& n )
{ 
  names = clnames;
  n = sizeof(clnames)/sizeof(char*);
}
