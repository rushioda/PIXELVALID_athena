from AthenaCommon.Constants import INFO
from AthenaCommon.AppMgr import ToolSvc
from AthenaCommon.Logging import logging
from RecExConfig.RecFlags import rec

from egammaRec.Factories import ToolFactory, AlgFactory, getPropertyValue

#---------------------------------------
# egamma specifics          
from egammaCaloTools.egammaCaloToolsFactories import CaloFillRectangularCluster

from AthenaCommon.GlobalFlags import globalflags
isMC = not globalflags.DataSource()=='data'
from IsolationCorrections.IsolationCorrectionsConf import CP__IsolationCorrectionTool as ICT
IsoCorrectionTool = ToolFactory(ICT,
                                name = "NewLeakageCorrTool",
                                IsMC = isMC)

doPFlow = False
PFlowObjectsInConeTool = None
from RecExConfig.RecAlgsFlags import recAlgs
if recAlgs.doEFlow() :

  doPFlow = True

  # tool to collect pflow objects in cone
  from PFlowUtils.PFlowUtilsConf import CP__RetrievePFOTool as RetrievePFOTool
  pfoTool = RetrievePFOTool();
  ToolSvc += pfoTool

  from ParticlesInConeTools.ParticlesInConeToolsConf import xAOD__PFlowObjectsInConeTool
  PFlowObjectsInConeTool = ToolFactory(xAOD__PFlowObjectsInConeTool,
                                       name = "PFlowObjectsInConeTool",
                                       RetrievePFOTool = pfoTool)
  
  from JetRec.JetRecStandard import jtm
  from JetRecTools.JetRecToolsConf import PFlowPseudoJetGetter
  jtm += PFlowPseudoJetGetter(
    name               = "emnpflowget",
    Label              = "EMNPFlow",
    OutputContainer    = "PseudoJetEMNPFlow",
    RetrievePFOTool    = jtm.pflowretriever,
    InputIsEM          = True,
    CalibratePFO       = False,
    SkipNegativeEnergy = True,
    UseNeutral         = True,
    UseCharged         = False
    )

# tool to collect topo clusters in cone
from ParticlesInConeTools.ParticlesInConeToolsConf import xAOD__CaloClustersInConeTool
CaloClustersInConeTool = ToolFactory(xAOD__CaloClustersInConeTool,
                                     CaloClusterLocation = "CaloCalTopoClusters")

# configuration for ED computation
# For the time being, it uses all pflow objects (neutral@EM + charged) for pflow
def configureEDCorrection(tool):
  """Configure tools and algorithm for energy density correction 
     (only if doEnergyDensityCorrection = True)"""
  # Return if doEnergyDensityCorrection is false
  if not getPropertyValue(tool, 'doEnergyDensityCorrection'):
    return
  # Set OutputLevel to INFO or higher if tool has it too
  OutputLevel = min(getPropertyValue(tool, 'OutputLevel'), INFO)
  try:
    from AthenaCommon.AppMgr import ToolSvc
    from AthenaCommon.AlgSequence import AlgSequence
    from EventShapeTools.EventDensityConfig import configEventDensityTool, EventDensityAlg
    from JetRec.JetRecStandard import jtm
    topSequence = AlgSequence()
    if not hasattr(topSequence,'EDtpIsoCentralAlg'):
      tccc = configEventDensityTool("EDtpIsoCentralTool", jtm.emget,
                                    radius          = 0.5,
                                    AbsRapidityMin  = 0.0,
                                    AbsRapidityMax  = 1.5,
                                    OutputContainer = "TopoClusterIsoCentralEventShape",
                                    OutputLevel     = OutputLevel
                                    )
      ToolSvc += tccc
      topSequence += EventDensityAlg("EDtpIsoCentralAlg", EventDensityTool = tccc)

    if not hasattr(topSequence,'EDtpIsoForwardAlg'):
      tfcc = configEventDensityTool("EDtpIsoForwardTool", jtm.emget,
                                    radius          = 0.5,
                                    AbsRapidityMin  = 1.5,
                                    AbsRapidityMax  = 3.0,
                                    OutputContainer = "TopoClusterIsoForwardEventShape",
                                    OutputLevel     = OutputLevel
                                    )
      ToolSvc += tfcc
      topSequence += EventDensityAlg("EDtpIsoForwardAlg", EventDensityTool = tfcc)

    if doPFlow:
      if not hasattr(topSequence,'EDpfIsoCentralAlg'):
        tcpf = configEventDensityTool("EDpfIsoCentralTool", jtm.empflowget,
                                      radius          = 0.5,
                                      AbsRapidityMin  = 0.0,
                                      AbsRapidityMax  = 1.5,
                                      OutputContainer = "ParticleFlowIsoCentralEventShape",
                                      OutputLevel     = OutputLevel
                                      )
        ToolSvc += tcpf
        topSequence += EventDensityAlg("EDpfIsoCentralAlg", EventDensityTool = tcpf)

      if not hasattr(topSequence,'EDpfIsoForwardAlg'):
        tfpf = configEventDensityTool("EDpfIsoForwardTool", jtm.empflowget,
                                      radius          = 0.5,
                                      AbsRapidityMin  = 1.5,
                                      AbsRapidityMax  = 3.0,
                                      OutputContainer = "ParticleFlowIsoForwardEventShape",
                                      OutputLevel     = OutputLevel
                                      )
        ToolSvc += tfpf
        topSequence += EventDensityAlg("EDpfIsoForwardAlg", EventDensityTool = tfpf)

      ## Try a neutral density
      if not hasattr(topSequence,'EDnpfIsoCentralAlg'):
        tcnpf = configEventDensityTool("EDnpfIsoCentralTool", jtm.emnpflowget,
                                       radius          = 0.5,
                                       AbsRapidityMin  = 0.0,
                                       AbsRapidityMax  = 1.5,
                                       OutputContainer = "NeutralParticleFlowIsoCentralEventShape",
                                       OutputLevel     = OutputLevel
                                       )
        ToolSvc += tcnpf
        topSequence += EventDensityAlg("EDnpfIsoCentralAlg", EventDensityTool = tcnpf)

      if not hasattr(topSequence,'EDnpfIsoForwardAlg'):
        tfnpf = configEventDensityTool("EDnpfIsoForwardTool", jtm.emnpflowget,
                                       radius          = 0.5,
                                       AbsRapidityMin  = 1.5,
                                       AbsRapidityMax  = 3.0,
                                       OutputContainer = "NeutralParticleFlowIsoForwardEventShape",
                                       OutputLevel     = OutputLevel
                                       )
        ToolSvc += tfnpf
        topSequence += EventDensityAlg("EDnpfIsoForwardAlg", EventDensityTool = tfnpf)

  except Exception:
    print '\nERROR: could not get handle to ED'
    raise

from CaloIdentifier import SUBCALO 
from IsolationTool.IsolationToolConf import xAOD__CaloIsolationTool, xAOD__TrackIsolationTool
CaloIsolationTool = ToolFactory(xAOD__CaloIsolationTool,name = "MyCaloIsolationTool",
                                postInit                        = [configureEDCorrection],
                                CaloFillRectangularClusterTool  = CaloFillRectangularCluster,
                                ClustersInConeTool              = CaloClustersInConeTool,
                                PFlowObjectsInConeTool          = PFlowObjectsInConeTool,
                                IsoLeakCorrectionTool           = IsoCorrectionTool,
                                EMCaloNums                      = [SUBCALO.LAREM],
                                HadCaloNums                     = [SUBCALO.LARHEC, SUBCALO.TILE],
                                UseEMScale                      = True,
                                OutputLevel                     = 3)

TrackIsolationTool = ToolFactory(xAOD__TrackIsolationTool, name = 'TrackIsolationTool')
from AthenaCommon import CfgMgr
tit = CfgMgr.xAOD__TrackIsolationTool('TrackIsolationTool')
tit.TrackSelectionTool.maxZ0SinTheta = 3
tit.TrackSelectionTool.minPt         = 1000
tit.TrackSelectionTool.CutLevel      = "TightPrimary"

import ROOT, cppyy
# Need to be sure base dict is loaded first.
cppyy.loadDictionary('xAODCoreRflxDict')
cppyy.loadDictionary('xAODPrimitivesDict')
isoPar = ROOT.xAOD.Iso

# In fact the default isolations are the same for eg and muons : prepare the list here
IsoTypes =  [
  [ isoPar.etcone40, ## Be carefull : store them in decreasing dR
    isoPar.etcone30,
    isoPar.etcone20 ],
  [ isoPar.topoetcone20,
    isoPar.topoetcone30,
    isoPar.topoetcone40 ],
  [ isoPar.ptcone40, ## these ones will also trigger the ptvarconeXX. Be carefull : store them in decreasing dR
    isoPar.ptcone30,
    isoPar.ptcone20 ]
  ]
if doPFlow:
  IsoTypes.append(  
    [ isoPar.neflowisol20,
      isoPar.neflowisol30,
      isoPar.neflowisol40 ] )

from IsolationAlgs.IsolationAlgsConf import IsolationBuilder
isoBuilder = AlgFactory(IsolationBuilder,
                        name                  = "IsolationBuilder",
                        CaloCellIsolationTool = CaloIsolationTool,
                        CaloTopoIsolationTool = CaloIsolationTool,
                        PFlowIsolationTool    = CaloIsolationTool,
                        TrackIsolationTool    = TrackIsolationTool, 
			EgIsoTypes            = [[]] if not rec.doEgamma() else IsoTypes,
			MuIsoTypes            = [[]] if not rec.doMuon() else IsoTypes,
                        OutputLevel           = 3)

#Customisation
CustomCuts = [ [ 3, 400, 'TightPrimary' ], [ 3, 500, 'TightPrimary' ] , [ 3, 800, 'TightPrimary' ], [ 3, 1200, 'TightPrimary' ], [ 3, 1000, 'Loose' ]   ]
for icut in CustomCuts:

  from AthenaCommon.AppMgr import ToolSvc
  from AthenaCommon.AlgSequence import AlgSequence
  topSequence = AlgSequence()
  CustomType = icut[2]+'z0'+str(icut[0])+'mmPt'+str(icut[1])+'MeV'
  print 'Building track isolation tool for type ',CustomType
  TrackIsolationCustom = xAOD__TrackIsolationTool(name = 'TrackIsolationTool'+CustomType)
  TrackIsolationCustom.TrackSelectionTool.maxZ0SinTheta = float(icut[0])
  TrackIsolationCustom.TrackSelectionTool.minPt         = float(icut[1])
  TrackIsolationCustom.TrackSelectionTool.CutLevel      = icut[2]
  ToolSvc += TrackIsolationCustom
  isoBuilderCustom = IsolationBuilder(
    name                   = "IsolationBuilder"+CustomType,
    CaloCellIsolationTool  = None,
    CaloTopoIsolationTool  = None,
    PFlowIsolationTool     = None,
    TrackIsolationTool     = TrackIsolationCustom, 
    EgIsoTypes             = [[]] if not rec.doEgamma() else [[]],#[[isoPar.ptcone40,isoPar.ptcone30,isoPar.ptcone20]],
    MuIsoTypes             = [[]] if not rec.doMuon() else [[isoPar.ptcone40,isoPar.ptcone30,isoPar.ptcone20]],
    CustomConfgurationName = CustomType,
    OutputLevel            = 3)
  topSequence += isoBuilderCustom
  

from RecExConfig.Configured import Configured
class isoGetter ( Configured ) :
 
    def configure(self):
        mlog = logging.getLogger ('isoGetter.py::configure:')
        mlog.info('entering')        
        
         # configure iso here:
        try:
            self._isoBuilderHandle = isoBuilder()
        except Exception:
            mlog.error("could not get handle to IsolationBuilder")
            import traceback
            print traceback.format_exc()
            return False
         
        print self._isoBuilderHandle
        return True
 
    def isoBuilderHandle(self):
        return self._BuilderHandle

