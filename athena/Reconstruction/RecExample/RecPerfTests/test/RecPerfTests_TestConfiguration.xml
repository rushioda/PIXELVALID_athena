<?xml version="1.0"?>
<!DOCTYPE unifiedTestConfiguration SYSTEM "http://www.hep.ucl.ac.uk/atlas/AtlasTesting/DTD/unifiedTestConfiguration.dtd">

<unifiedTestConfiguration>
  <atn>
  </atn>
  <kv>
  </kv>

  <rtt xmlns="http://www.hep.ucl.ac.uk/atlas/AtlasTesting/rtt">

    <rttContactPerson>Antonio Limosani (antonio.limosani@sydney.edu.au)</rttContactPerson>
    <refRelease>15.5.0</refRelease>

    <jobList>
      
      <classification>
        <displayClass>OfflineValidation</displayClass>
        <displayProcess>Reco</displayProcess>
        <displayComponent>Det-Combined</displayComponent>
      </classification>


      <jobTransform userJobId="system_reco_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40">
	<doc>Reco_tf runs on 13TeV collision mc ttbar 25 ns</doc>
	<jobTransformJobName>system_reco_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40</jobTransformJobName>
	<jobTransformCmd>
	  export TRF_ECHO=1; xrdcp root://eosatlas//eos/atlas/user/a/atlaspmb/mc/valid1.110401.PowhegPythia_P2012_ttbar_nonallhad.recon.RDO.e3099_s2578_r6220_tid05191878_00/RDO.05191878._000121.pool.root.1 RDO.05191878._000121.pool.root.1; Reco_tf.py --inputRDOFile RDO.05191878._000121.pool.root.1 --maxEvents 100 --outputESDFile myESD.pool.root --outputAODFile myAOD.pool.root --preExec='from PerfMonComps.PerfMonFlags import jobproperties as pmjp;pmjp.PerfMonFlags.doPostProcessing=True;pmjp.PerfMonFlags.doSemiDetailedMonitoringFullPrint=True;rec.doTrigger=False;rec.doForwardDet=False;rec.doInDet=True;rec.doMuon=True;rec.doCalo=True;rec.doEgamma=False;rec.doMuonCombined=False;rec.doJetMissingETTag=False;rec.doTau=False;from RecExConfig.RecAlgsFlags import recAlgs;recAlgs.doMuonSpShower=False;rec.doBTagging=False;recAlgs.doEFlow=False;recAlgs.doEFlowJet=False;recAlgs.doMissingET=False;recAlgs.doMissingETSig=False; from JetRec.JetRecFlags import jetFlags;jetFlags.Enabled=False;'  --ignoreErrors 'True' --conditionsTag=OFLCOND-RUN12-SDR-25 | tee  __log.txt; 
	  echo $? &gt;  __exitcode ; 
	  touch __done ;
	  grep  -i "Reco_tf" jobReport.txt  | head -n1 | awk -F\" '{print $2}' &gt; __command.sh;
	  for f in ntuple*.pmon.gz; do if [ -f "$f" ]; then tar xf $f "*.pmonsd.*" ; fi; done ; 
	  checkxAOD.py myESD.pool.root &gt; myESD.pool.root.checkfile.txt ; 
	  checkxAOD.py myAOD.pool.root &gt; myAOD.pool.root.checkfile.txt ;  
	  export userJobId="system_reco_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40"; 
	  export headDir="/afs/cern.ch/atlas/project/pmb/new_pmb/archive/custom";
	  export OutputDestination=${headDir}/`date +'%d/%m/%Y'`/`echo ${AtlasBuildBranch}`/`basename $ROOTSYS`/${userJobId}; 
	  gzip *txt; 
	  mkdir -p                       ${OutputDestination} ; 
	  rsync -avz  *mem*             ${OutputDestination}/. ; 
	  rsync -avz ntuple*             ${OutputDestination}/. ; 
	  rsync -avz __*                 ${OutputDestination}/. ; 
	  rsync -avz *.checkfile.txt.gz  ${OutputDestination}/. ; 
	</jobTransformCmd>
	<group>TrfRecPerf</group>
	<queue>atlasrttperf</queue>
      </jobTransform>

      <jobTransform userJobId="calo_reco_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40">
	<doc>Reco_tf runs on 13TeV collision mc ttbar 25 ns</doc>
	<jobTransformJobName>calo_reco_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40</jobTransformJobName>
	<jobTransformCmd>
	  export TRF_ECHO=1; xrdcp root://eosatlas//eos/atlas/user/a/atlaspmb/mc/valid1.110401.PowhegPythia_P2012_ttbar_nonallhad.recon.RDO.e3099_s2578_r6220_tid05191878_00/RDO.05191878._000121.pool.root.1 RDO.05191878._000121.pool.root.1; Reco_tf.py --inputRDOFile RDO.05191878._000121.pool.root.1 --maxEvents 100 --outputESDFile myESD.pool.root --outputAODFile myAOD.pool.root --preExec='from PerfMonComps.PerfMonFlags import jobproperties as pmjp;pmjp.PerfMonFlags.doPostProcessing=True;pmjp.PerfMonFlags.doSemiDetailedMonitoringFullPrint=True;rec.doTrigger=False;rec.doForwardDet=False;rec.doInDet=False;rec.doMuon.set_Value_and_Lock(False);rec.doCalo=True;rec.doEgamma=False;rec.doMuonCombined=False;rec.doJetMissingETTag=False;rec.doTau=False;from RecExConfig.RecAlgsFlags import recAlgs;recAlgs.doMuonSpShower=False;rec.doBTagging=False;recAlgs.doEFlow=False;recAlgs.doEFlowJet=False;recAlgs.doMissingET=False;recAlgs.doMissingETSig=False; from JetRec.JetRecFlags import jetFlags;jetFlags.Enabled=False;recAlgs.doTrackParticleCellAssociation=False;rec.doExpressProcessing.set_Value_and_Lock(True);jobproperties.Beam.bunchSpacing.set_Value_and_Lock(25);' --conditionsTag=OFLCOND-RUN12-SDR-25 --ignoreErrors 'True' | tee  __log.txt; 
	  echo $? &gt;  __exitcode ; 
	  touch __done ;
	  grep  -i "Reco_tf" jobReport.txt  | head -n1 | awk -F\" '{print $2}' &gt; __command.sh;
	  for f in ntuple*.pmon.gz; do if [ -f "$f" ]; then tar xf $f "*.pmonsd.*" ; fi; done ; 
	  checkxAOD.py myESD.pool.root &gt; myESD.pool.root.checkfile.txt ; 
	  checkxAOD.py myAOD.pool.root &gt; myAOD.pool.root.checkfile.txt ;  
	  export userJobId="calo_reco_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40"; 
	  export headDir="/afs/cern.ch/atlas/project/pmb/new_pmb/archive/custom";
	  export OutputDestination=${headDir}/`date +'%d/%m/%Y'`/`echo ${AtlasBuildBranch}`/`basename $ROOTSYS`/${userJobId}; 
	  gzip *txt; 
	  mkdir -p                       ${OutputDestination} ; 
	  rsync -avz  *mem*             ${OutputDestination}/. ; 
	  rsync -avz ntuple*             ${OutputDestination}/. ; 
	  rsync -avz __*                 ${OutputDestination}/. ; 
	  rsync -avz *.checkfile.txt.gz  ${OutputDestination}/. ; 
	</jobTransformCmd>
	<group>TrfRecPerf</group>
	<queue>atlasrttperf</queue>
      </jobTransform>

      <jobTransform userJobId="combined_reco_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40">
	<doc>Reco_tf runs on 13TeV collision mc ttbar 25 ns</doc>
	<jobTransformJobName>combined_reco_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40</jobTransformJobName>
	<jobTransformCmd>
	  export TRF_ECHO=1; xrdcp root://eosatlas//eos/atlas/user/a/atlaspmb/mc/valid1.110401.PowhegPythia_P2012_ttbar_nonallhad.recon.RDO.e3099_s2578_r6220_tid05191878_00/RDO.05191878._000121.pool.root.1 RDO.05191878._000121.pool.root.1 ; Reco_tf.py --inputRDOFile RDO.05191878._000121.pool.root.1 --maxEvents 100 --outputESDFile myESD.pool.root --outputAODFile myAOD.pool.root --preExec='from PerfMonComps.PerfMonFlags import jobproperties as pmjp;pmjp.PerfMonFlags.doPostProcessing=True;pmjp.PerfMonFlags.doSemiDetailedMonitoringFullPrint=True;rec.doTrigger=False;' --conditionsTag=OFLCOND-RUN12-SDR-25 --ignoreErrors 'True' | tee  __log.txt; 
	  echo $? &gt;  __exitcode ; 
	  touch __done ;
	  grep  -i "Reco_tf" jobReport.txt  | head -n1 | awk -F\" '{print $2}' &gt; __command.sh;
	  for f in ntuple*.pmon.gz; do if [ -f "$f" ]; then tar xf $f "*.pmonsd.*" ; fi; done ; 
	  checkxAOD.py myESD.pool.root &gt; myESD.pool.root.checkfile.txt ; 
	  checkxAOD.py myAOD.pool.root &gt; myAOD.pool.root.checkfile.txt ;  
	  export userJobId="combined_reco_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40"; 
	  export headDir="/afs/cern.ch/atlas/project/pmb/new_pmb/archive/custom";
	  export OutputDestination=${headDir}/`date +'%d/%m/%Y'`/`echo ${AtlasBuildBranch}`/`basename $ROOTSYS`/${userJobId}; 
	  gzip *txt; 
	  mkdir -p                       ${OutputDestination} ; 
	  rsync -avz  *mem*             ${OutputDestination}/. ; 
	  rsync -avz ntuple*             ${OutputDestination}/. ; 
	  rsync -avz __*                 ${OutputDestination}/. ; 
	  rsync -avz *.checkfile.txt.gz  ${OutputDestination}/. ; 
	</jobTransformCmd>
	<group>TrfRecPerf</group>
	<queue>atlasrttperf</queue>
      </jobTransform>


      <jobTransform userJobId="monitoring_reco_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40">
	<doc>Reco_tf runs on 13TeV collision mc ttbar 25 ns</doc>
	<jobTransformJobName>monitoring_reco_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40</jobTransformJobName>
	<jobTransformCmd>
	  export TRF_ECHO=1; xrdcp root://eosatlas//eos/atlas/user/a/atlaspmb/mc/valid1.110401.PowhegPythia_P2012_ttbar_nonallhad.recon.RDO.e3099_s2578_r6220_tid05191878_00/RDO.05191878._000121.pool.root.1 RDO.05191878._000121.pool.root.1 ; Reco_tf.py --inputRDOFile RDO.05191878._000121.pool.root.1 --maxEvents 100 --outputESDFile myESD.pool.root  --outputAODFile myAOD.pool.root --preExec='rec.doTrigger=False;rec.doMonitoring=True;from PerfMonComps.PerfMonFlags import jobproperties as pmjp;pmjp.PerfMonFlags.doPostProcessing=True;pmjp.PerfMonFlags.doSemiDetailedMonitoringFullPrint=True;' --ignoreErrors 'True' --conditionsTag=OFLCOND-RUN12-SDR-25 | tee  __log.txt; 
	  echo $? &gt;  __exitcode ; 
	  touch __done ;
	  grep  -i "Reco_tf" jobReport.txt  | head -n1 | awk -F\" '{print $2}' &gt; __command.sh;
	  for f in ntuple*.pmon.gz; do if [ -f "$f" ]; then tar xf $f "*.pmonsd.*" ; fi; done ; 
	  checkxAOD.py myESD.pool.root &gt; myESD.pool.root.checkfile.txt ; 
	  checkxAOD.py myAOD.pool.root &gt; myAOD.pool.root.checkfile.txt ;  
	  export userJobId="monitoring_reco_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40"; 
	  export headDir="/afs/cern.ch/atlas/project/pmb/new_pmb/archive/custom";
	  export OutputDestination=${headDir}/`date +'%d/%m/%Y'`/`echo ${AtlasBuildBranch}`/`basename $ROOTSYS`/${userJobId}; 
	  gzip *txt; 
	  mkdir -p                       ${OutputDestination} ; 
	  rsync -avz  *mem*             ${OutputDestination}/. ; 
	  rsync -avz ntuple*             ${OutputDestination}/. ; 
	  rsync -avz __*                 ${OutputDestination}/. ; 
	  rsync -avz *.checkfile.txt.gz  ${OutputDestination}/. ; 
	</jobTransformCmd>
	<group>TrfRecPerf</group>
	<queue>atlasrttperf</queue>
      </jobTransform>


      <jobTransform userJobId="timingtest_rdotordotrigger" >
	<doc>TimingTest_RDOtoRDOTrigger menu on top events see: ATLASRECTS-2408 / ATR-13589</doc>
	<jobTransformJobName>TimingTest_RDOtoRDOTrigger</jobTransformJobName>
	<jobTransformCmd>
	  export TRF_ECHO=1; Reco_tf.py --jobNumber 1 --conditionsTag 'OFLCOND-MC15c-SDR-04' --runNumber 110401 --preInclude 'RecExPers/RecoOutputMetadataList_jobOptions.py' --postExec 'all:CfgMgr.MessageSvc().setError+=["HepMcParticleLink"];from AthenaCommon.AlgSequence import AlgSequence;AlgSequence().LVL1TGCTrigger.TILEMU=True;from AthenaCommon.AppMgr import ServiceMgr;import MuonRPC_Cabling.MuonRPC_CablingConfig;ServiceMgr.MuonRPC_CablingSvc.RPCTriggerRoadsfromCool=False' --pileupFinalBunch  6 --geometryVersion  'ATLAS-R2-2015-03-01-00' --digiSeedOffset2  1 --postInclude 'RecJobTransforms/UseFrontier.py' --digiSeedOffset1  1 --numberOfHighPtMinBias  0.12268057 --autoConfiguration 'everything'  --preExec  'from TriggerJobOpts.TriggerFlags import TriggerFlags;TriggerFlags.readHLTconfigFromXML=False;TriggerFlags.triggerMenuSetup.set_Value_and_Lock("MC_pp_v6_tight_mc_prescale")' --numberOfCavernBkg  0 --numberOfLowPtMinBias  39.8773194 --maxEvents  100 --inputRDOFile /afs/cern.ch/atlas/project/trigger/pesa-sw/validation/references/RDOtoRDOTrigger_template/RDO.07222087._000001.pool.root.1 --outputRDO_TRIGFile  my.RDO_TRIG.pool.root --ignoreErrors 'True' | tee  __log.txt; 
	  echo $? &gt;  __exitcode ; 
	  touch __done ;
	  grep  -i "Reco_tf" jobReport.txt  | head -n1 | awk -F\" '{print $2}' &gt; __command.sh;
	  for f in ntuple*.pmon.gz; do if [ -f "$f" ]; then tar xf $f "*.pmonsd.*" ; fi; done ; 
	  checkxAOD.py my.RDO_TRIG.pool.root &gt; my.RDO_TRIG.pool.root.checkfile.txt ; 
	  export userJobId="timingtest_rdotordotrigger"; 
	  export headDir="/afs/cern.ch/atlas/project/pmb/new_pmb/archive/custom";
	  export OutputDestination=${headDir}/`date +'%d/%m/%Y'`/`echo ${AtlasBuildBranch}`/`basename $ROOTSYS`/${userJobId}; 
	  gzip *txt; 
	  mkdir -p                       ${OutputDestination} ; 
	  rsync -avz  *mem*             ${OutputDestination}/. ; 
	  rsync -avz ntuple*             ${OutputDestination}/. ; 
	  rsync -avz __*                 ${OutputDestination}/. ; 
	  rsync -avz *.checkfile.txt.gz  ${OutputDestination}/. ; 
	</jobTransformCmd>
	<group>TrfRecPerf</group>
	<queue>atlasrttperf</queue>
      </jobTransform>


      <jobTransform userJobId="monitoring_reco_data15_main">
	<doc>Reco_tf runs on 13TeV collision data from the mainxf stream</doc>
	<jobTransformJobName>monitoring_reco_data15_main</jobTransformJobName>
	<jobTransformCmd>
	  export TRF_ECHO=1; xrdcp root://eosatlas//eos/atlas/user/a/atlaspmb/data15_13TeV/data15_13TeV.00284484.physics_Main.daq.RAW._lb0037._SFO-1._0001.data data15_13TeV.00284484.physics_Main.daq.RAW._lb0037._SFO-1._0001.data ;  Reco_tf.py --inputBSFile data15_13TeV.00284484.physics_Main.daq.RAW._lb0037._SFO-1._0001.data  --outputESDFile myESD.pool.root --outputAODFile myAOD.pool.root --AMI q431 --maxEvent 150 --athenaopts='--pmon=sdmonfp' --ignoreErrors 'True' | tee  __log.txt; 
	  echo $? &gt;  __exitcode ; 
	  touch __done ;
	  grep  -i "Reco_tf" jobReport.txt  | head -n1 | awk -F\" '{print $2}' &gt; __command.sh;
	  for f in ntuple*.pmon.gz; do if [ -f "$f" ]; then tar xf $f "*.pmonsd.*" ; fi; done ; 
	  checkxAOD.py myESD.pool.root &gt; myESD.pool.root.checkfile.txt ; 
	  checkxAOD.py myAOD.pool.root &gt; myAOD.pool.root.checkfile.txt ;  
	  export userJobId="monitoring_reco_data15_main"; 
	  export headDir="/afs/cern.ch/atlas/project/pmb/new_pmb/archive/custom";
	  export OutputDestination=${headDir}/`date +'%d/%m/%Y'`/`echo ${AtlasBuildBranch}`/`basename $ROOTSYS`/${userJobId}; 
	  gzip *txt; 
	  mkdir -p                       ${OutputDestination}   ; 
	  rsync -avz  *mem*              ${OutputDestination}/. ; 
	  rsync -avz ntuple*             ${OutputDestination}/. ; 
	  rsync -avz __*                 ${OutputDestination}/. ; 
	  rsync -avz *.checkfile.txt.gz  ${OutputDestination}/. ; 
	</jobTransformCmd>
	<group>TrfRecPerf</group>
	<queue>atlasrttperf</queue>
      </jobTransform>

      <jobTransform userJobId="rawtoall_tier0_reco_data16_main">
	<doc>Reco_tf runs on 13TeV collision data from the main stream</doc>
	<jobTransformJobName>rawtoall_tier0_reco_data16_main</jobTransformJobName>
	<jobTransformCmd>
	    export TRF_ECHO=1; xrdcp root://eosatlas//eos/atlas/user/a/atlaspmb/data16_13TeV/data16_13TeV.00305777.physics_Main.daq.RAW._lb0290._SFO-6._0002.data data16_13TeV.00305777.physics_Main.daq.RAW._lb0290._SFO-6._0002.data ;  Reco_tf.py --autoConfiguration 'everything' --conditionsTag  'CONDBR2-BLKPA-2016-16' --maxEvents -1 --geometryVersion  'ATLAS-R2-2015-04-00-00' --inputBSFile  'data16_13TeV.00305777.physics_Main.daq.RAW._lb0290._SFO-6._0002.data' --outputHISTFile  'myHIST.pool.root' --outputDESDM_SLTTMUFile  'myDESDM_SLTTMU.pool.root' --outputDRAW_RPVLLFile  'myDRAW_RPVLL.pool.root' --outputDESDM_MCPFile  'myDESDM_MCP.pool.root' --outputDRAW_ZMUMUFile  'myDRAW_ZMUMU.pool.root' --outputDESDM_EGAMMAFile  'myDESDM_EGAMMA.pool.root' --outputDESDM_CALJETFile  'myDESDM_CALJET.pool.root' --outputDRAW_TAUMUHFile  'myDRAW_TAUMUH.pool.root' --outputAODFile  'myAOD.pool.root' --outputDESDM_PHOJETFile  'myDESDM_PHOJET.pool.root' --outputDESDM_TILEMUFile  'myDESDM_TILEMU.pool.root' --outputDRAW_EGZFile  'myDRAW_EGZ.pool.root' --outputDESDM_EXOTHIPFile  'myDESDM_EXOTHIP.pool.root' --outputDESDM_SGLELFile  'myDESDM_SGLEL.pool.root' --athenaopts=' --pmon=sdmonfp' --ignoreErrors 'True' --steering doRAWtoALL  | tee  __log.txt; 
	      echo $? &gt;  __exitcode ; 
	      touch __done ;
	      grep  -i "Reco_tf" jobReport.txt  | head -n1 | awk -F\" '{print $2}' &gt; __command.sh;
	      for f in ntuple*.pmon.gz; do if [ -f "$f" ]; then tar xf $f "*.pmonsd.*" ; fi; done ; 
	      checkxAOD.py myAOD.pool.root &gt; myAOD.pool.root.checkfile.txt ;  
	      checkTriggerxAOD.py myAOD.pool.root &gt; myAOD.trig.pool.root.checkfile.txt ;  
	      export userJobId="rawtoall_tier0_reco_data16_main"; 
	      export headDir="/afs/cern.ch/atlas/project/pmb/new_pmb/archive/custom";
	      export OutputDestination=${headDir}/`date +'%d/%m/%Y'`/`echo ${AtlasBuildBranch}`/`basename $ROOTSYS`/${userJobId}; 
	      gzip *txt; 
	      mkdir -p                       ${OutputDestination} ; 
	      rsync -avz  *mem*             ${OutputDestination}/. ; 
	      rsync -avz ntuple*             ${OutputDestination}/. ; 
	      rsync -avz __*                 ${OutputDestination}/. ; 
	      rsync -avz *.checkfile.txt.gz  ${OutputDestination}/. ; 
	    </jobTransformCmd>
	<group>TrfRecPerf</group>
	<queue>atlasrttperf</queue>
	<keepFilePattern>myAOD.pool.root</keepFilePattern>             
      </jobTransform>

      <jobTransform userJobId="rawtoall_tier0_reco_data16_idtide">
	<doc>Reco_tf runs on 13TeV collision data from the main stream</doc>
	<jobTransformJobName>rawtoall_tier0_reco_data16_idtide</jobTransformJobName>
	<jobTransformCmd>
	    export TRF_ECHO=1; xrdcp root://eosatlas//eos/atlas/user/a/atlaspmb/data16_13TeV/data16_13TeV.00305777.physics_Main.daq.RAW._lb0290._SFO-6._0002.data data16_13TeV.00305777.physics_Main.daq.RAW._lb0290._SFO-6._0002.data ;  Reco_tf.py --autoConfiguration 'everything' --conditionsTag  'CONDBR2-BLKPA-2016-16' --maxEvents -1 --geometryVersion  'ATLAS-R2-2015-04-00-00' --inputBSFile  'data16_13TeV.00305777.physics_Main.daq.RAW._lb0290._SFO-6._0002.data' --outputHISTFile  'myHIST.pool.root' --outputDESDM_SLTTMUFile  'myDESDM_SLTTMU.pool.root' --outputDRAW_RPVLLFile  'myDRAW_RPVLL.pool.root' --outputDESDM_MCPFile  'myDESDM_MCP.pool.root' --outputDRAW_ZMUMUFile  'myDRAW_ZMUMU.pool.root' --outputDESDM_EGAMMAFile  'myDESDM_EGAMMA.pool.root' --outputDESDM_CALJETFile  'myDESDM_CALJET.pool.root' --outputDRAW_TAUMUHFile  'myDRAW_TAUMUH.pool.root' --outputAODFile  'myAOD.pool.root' --outputDAOD_IDTIDEFile 'myDAOD_IDTIDE.pool.root' --outputDESDM_PHOJETFile  'myDESDM_PHOJET.pool.root' --outputDESDM_TILEMUFile  'myDESDM_TILEMU.pool.root' --outputDRAW_EGZFile  'myDRAW_EGZ.pool.root' --outputDESDM_EXOTHIPFile  'myDESDM_EXOTHIP.pool.root' --outputDESDM_SGLELFile  'myDESDM_SGLEL.pool.root' --athenaopts=' --pmon=sdmonfp' --ignoreErrors 'True' --steering doRAWtoALL  | tee  __log.txt; 
	      echo $? &gt;  __exitcode ; 
	      touch __done ;
	      grep  -i "Reco_tf" jobReport.txt  | head -n1 | awk -F\" '{print $2}' &gt; __command.sh;
	      for f in ntuple*.pmon.gz; do if [ -f "$f" ]; then tar xf $f "*.pmonsd.*" ; fi; done ; 
	      checkxAOD.py myAOD.pool.root &gt; myAOD.pool.root.checkfile.txt ;  
	      checkTriggerxAOD.py myAOD.pool.root &gt; myAOD.trig.pool.root.checkfile.txt ;  
	      export userJobId="rawtoall_tier0_reco_data16_idtide"; 
	      export headDir="/afs/cern.ch/atlas/project/pmb/new_pmb/archive/custom";
	      export OutputDestination=${headDir}/`date +'%d/%m/%Y'`/`echo ${AtlasBuildBranch}`/`basename $ROOTSYS`/${userJobId}; 
	      gzip *txt; 
	      mkdir -p                       ${OutputDestination} ; 
	      rsync -avz  *mem*             ${OutputDestination}/. ; 
	      rsync -avz ntuple*             ${OutputDestination}/. ; 
	      rsync -avz __*                 ${OutputDestination}/. ; 
	      rsync -avz *.checkfile.txt.gz  ${OutputDestination}/. ; 
	      rsync -avz *mem*               ${OutputDestination}/. ; 
	    </jobTransformCmd>
	<group>TrfRecPerf</group>
	<queue>atlasrttperf</queue>
	<keepFilePattern>myAOD.pool.root</keepFilePattern>             
      </jobTransform>


      <jobTransform userJobId="rawtoall_tier0_reco_data16_alloutputs">
	<doc>Reco_tf runs on 13TeV collision data from the all outputs stream</doc>
	<jobTransformJobName>rawtoall_tier0_reco_data16_alloutputs</jobTransformJobName>
	<jobTransformCmd>
	    export TRF_ECHO=1; xrdcp root://eosatlas//eos/atlas/user/a/atlaspmb/data16_13TeV/data16_13TeV.00305777.physics_Main.daq.RAW._lb0290._SFO-6._0002.data data16_13TeV.00305777.physics_Main.daq.RAW._lb0290._SFO-6._0002.data ;  Reco_tf.py --autoConfiguration 'everything' --conditionsTag  'CONDBR2-BLKPA-2016-16' --maxEvents 100 --geometryVersion  'ATLAS-R2-2015-04-00-00' --inputBSFile  'data16_13TeV.00305777.physics_Main.daq.RAW._lb0290._SFO-6._0002.data' --outputHISTFile  'myHIST.pool.root' --outputDESDM_SLTTMUFile  'myDESDM_SLTTMU.pool.root' --outputDRAW_RPVLLFile  'myDRAW_RPVLL.pool.root' --outputDESDM_MCPFile  'myDESDM_MCP.pool.root' --outputDRAW_ZMUMUFile  'myDRAW_ZMUMU.pool.root' --outputDESDM_EGAMMAFile 'myDESDM_EGAMMA.pool.root' --outputDESDM_CALJETFile  'myDESDM_CALJET.pool.root' --outputDRAW_TAUMUHFile  'myDRAW_TAUMUH.pool.root' --outputAODFile  'myAOD.pool.root' --outputDAOD_IDTIDEFile 'myDAOD_IDTIDE.pool.root' --outputDESDM_PHOJETFile 'myDESDM_PHOJET.pool.root' --outputDESDM_TILEMUFile  'myDESDM_TILEMU.pool.root' --outputDRAW_EGZFile  'myDRAW_EGZ.pool.root' --outputDESDM_EXOTHIPFile  'myDESDM_EXOTHIP.pool.root' --outputDESDM_SGLELFile  'myDESDM_SGLEL.pool.root' --athenaopts=' --pmon=sdmonfp' --ignoreErrors 'True' --steering doRAWtoALL  --preExec 'all:from InDetRecExample.InDetJobProperties import InDetFlags; InDetFlags.cutLevel.set_Value_and_Lock(14); ToolSvc += CfgMgr.xAODMaker__TrackParticleCompressorTool( "xAODTrackParticleCompressorTool", OffDiagCovMatrixBits = 7 ); from JetRec import JetRecUtils;f=lambda s:["xAOD::JetContainer#AntiKt4%sJets"%(s,),"xAOD::JetAuxContainer#AntiKt4%sJetsAux."%(s,),"xAOD::EventShape#Kt4%sEventShape"%(s,),"xAOD::EventShapeAuxInfo#Kt4%sEventShapeAux."%(s,),"xAOD::EventShape#Kt4%sOriginEventShape"%(s,),"xAOD::EventShapeAuxInfo#Kt4%sOriginEventShapeAux."%(s,)]; JetRecUtils.retrieveAODList = lambda : f("EMPFlow")+f("LCTopo")+f("EMTopo")+["xAOD::EventShape#NeutralParticleFlowIsoCentralEventShape","xAOD::EventShapeAuxInfo#NeutralParticleFlowIsoCentralEventShapeAux.", "xAOD::EventShape#NeutralParticleFlowIsoForwardEventShape","xAOD::EventShapeAuxInfo#NeutralParticleFlowIsoForwardEventShapeAux.", "xAOD::EventShape#ParticleFlowIsoCentralEventShape","xAOD::EventShapeAuxInfo#ParticleFlowIsoCentralEventShapeAux.", "xAOD::EventShape#ParticleFlowIsoForwardEventShape","xAOD::EventShapeAuxInfo#ParticleFlowIsoForwardEventShapeAux.", "xAOD::EventShape#TopoClusterIsoCentralEventShape","xAOD::EventShapeAuxInfo#TopoClusterIsoCentralEventShapeAux.", "xAOD::EventShape#TopoClusterIsoForwardEventShape","xAOD::EventShapeAuxInfo#TopoClusterIsoForwardEventShapeAux.","xAOD::CaloClusterContainer#EMOriginTopoClusters","xAOD::ShallowAuxContainer#EMOriginTopoClustersAux.","xAOD::CaloClusterContainer#LCOriginTopoClusters","xAOD::ShallowAuxContainer#LCOriginTopoClustersAux."]; from BTagging.BTaggingFlags import BTaggingFlags;BTaggingFlags.btaggingAODList=["xAOD::BTaggingContainer#BTagging_AntiKt4EMTopo","xAOD::BTaggingAuxContainer#BTagging_AntiKt4EMTopoAux.","xAOD::BTagVertexContainer#BTagging_AntiKt4EMTopoJFVtx","xAOD::BTagVertexAuxContainer#BTagging_AntiKt4EMTopoJFVtxAux.","xAOD::VertexContainer#BTagging_AntiKt4EMTopoSecVtx","xAOD::VertexAuxContainer#BTagging_AntiKt4EMTopoSecVtxAux.-vxTrackAtVertex"]; from ParticleBuilderOptions.AODFlags import AODFlags; AODFlags.ThinGeantTruth.set_Value_and_Lock(True);  AODFlags.ThinNegativeEnergyCaloClusters.set_Value_and_Lock(True); AODFlags.ThinNegativeEnergyNeutralPFOs.set_Value_and_Lock(True); from eflowRec.eflowRecFlags import jobproperties; jobproperties.eflowRecFlags.useAODReductionClusterMomentList.set_Value_and_Lock(True); from TriggerJobOpts.TriggerFlags import TriggerFlags;TriggerFlags.AODEDMSet.set_Value_and_Lock("AODFULL");' --postExec 'ESDtoAOD:CILMergeAOD.removeItem("xAOD::CaloClusterAuxContainer#CaloCalTopoClustersAux.LATERAL.LONGITUDINAL.SECOND_R.SECOND_LAMBDA.CENTER_MAG.CENTER_LAMBDA.FIRST_ENG_DENS.ENG_FRAC_MAX.ISOLATION.ENG_BAD_CELLS.N_BAD_CELLS.BADLARQ_FRAC.ENG_BAD_HV_CELLS.N_BAD_HV_CELLS.ENG_POS.SIGNIFICANCE.CELL_SIGNIFICANCE.CELL_SIG_SAMPLING.AVG_LAR_Q.AVG_TILE_Q.EM_PROBABILITY.PTD.BadChannelList");CILMergeAOD.add("xAOD::CaloClusterAuxContainer#CaloCalTopoClustersAux.N_BAD_CELLS.ENG_BAD_CELLS.BADLARQ_FRAC.AVG_TILE_Q.AVG_LAR_Q.CENTER_MAG.ENG_POS.CENTER_LAMBDA.SECOND_LAMBDA.SECOND_R.ISOLATION.EM_PROBABILITY");StreamAOD.ItemList=CILMergeAOD()' | tee  __log.txt; 
	      echo $? &gt;  __exitcode ; 
	      touch __done ;
	      grep  -i "Reco_tf" jobReport.txt  | head -n1 | awk -F\" '{print $2}' &gt; __command.sh;
	      for f in ntuple*.pmon.gz; do if [ -f "$f" ]; then tar xf $f "*.pmonsd.*" ; fi; done ; 
	      checkxAOD.py myAOD.pool.root &gt; myAOD.pool.root.checkfile.txt ;  
	      checkTriggerxAOD.py myAOD.pool.root &gt; myAOD.trig.pool.root.checkfile.txt ;  
	      export userJobId="rawtoall_tier0_reco_data16_alloutputs"; 
	      export headDir="/afs/cern.ch/atlas/project/pmb/new_pmb/archive/custom";
	      export OutputDestination=${headDir}/`date +'%d/%m/%Y'`/`echo ${AtlasBuildBranch}`/`basename $ROOTSYS`/${userJobId}; 
	      gzip *txt; 
	      mkdir -p                       ${OutputDestination} ; 
	      rsync -avz ntuple*             ${OutputDestination}/. ; 
	      rsync -avz __*                 ${OutputDestination}/. ; 
	      rsync -avz *.checkfile.txt.gz  ${OutputDestination}/. ; 
	      rsync -avz *mem*               ${OutputDestination}/. ; 
	    </jobTransformCmd>
	<group>TrfRecPerf</group>
	<queue>atlasrttperf</queue>
	<keepFilePattern>myAOD.pool.root</keepFilePattern>             
      </jobTransform>


      <jobTransform userJobId="rawtoall_tier0_reco_data16_noidtide">
	<doc>Reco_tf runs on 13TeV collision data from the all outputs bar idtide stream</doc>
	<jobTransformJobName>rawtoall_tier0_reco_data16_noidtide</jobTransformJobName>
	<jobTransformCmd>
	    export TRF_ECHO=1; xrdcp root://eosatlas//eos/atlas/user/a/atlaspmb/data16_13TeV/data16_13TeV.00305777.physics_Main.daq.RAW._lb0290._SFO-6._0002.data data16_13TeV.00305777.physics_Main.daq.RAW._lb0290._SFO-6._0002.data ;  Reco_tf.py --autoConfiguration 'everything' --conditionsTag  'CONDBR2-BLKPA-2016-16' --maxEvents 100 --geometryVersion  'ATLAS-R2-2015-04-00-00' --inputBSFile  'data16_13TeV.00305777.physics_Main.daq.RAW._lb0290._SFO-6._0002.data' --outputHISTFile  'myHIST.pool.root' --outputDESDM_SLTTMUFile  'myDESDM_SLTTMU.pool.root' --outputDRAW_RPVLLFile  'myDRAW_RPVLL.pool.root' --outputDESDM_MCPFile  'myDESDM_MCP.pool.root' --outputDRAW_ZMUMUFile  'myDRAW_ZMUMU.pool.root' --outputDESDM_EGAMMAFile  'myDESDM_EGAMMA.pool.root' --outputDESDM_CALJETFile  'myDESDM_CALJET.pool.root' --outputDRAW_TAUMUHFile  'myDRAW_TAUMUH.pool.root' --outputAODFile  'myAOD.pool.root' --outputDESDM_PHOJETFile  'myDESDM_PHOJET.pool.root' --outputDESDM_TILEMUFile  'myDESDM_TILEMU.pool.root' --outputDRAW_EGZFile  'myDRAW_EGZ.pool.root' --outputDESDM_EXOTHIPFile  'myDESDM_EXOTHIP.pool.root' --outputDESDM_SGLELFile  'myDESDM_SGLEL.pool.root' --athenaopts=' --pmon=sdmonfp' --ignoreErrors 'True' --steering doRAWtoALL  --preExec 'all:from InDetRecExample.InDetJobProperties import InDetFlags; InDetFlags.cutLevel.set_Value_and_Lock(14); ToolSvc += CfgMgr.xAODMaker__TrackParticleCompressorTool( "xAODTrackParticleCompressorTool", OffDiagCovMatrixBits = 7 ); from JetRec import JetRecUtils;f=lambda s:["xAOD::JetContainer#AntiKt4%sJets"%(s,),"xAOD::JetAuxContainer#AntiKt4%sJetsAux."%(s,),"xAOD::EventShape#Kt4%sEventShape"%(s,),"xAOD::EventShapeAuxInfo#Kt4%sEventShapeAux."%(s,),"xAOD::EventShape#Kt4%sOriginEventShape"%(s,),"xAOD::EventShapeAuxInfo#Kt4%sOriginEventShapeAux."%(s,)]; JetRecUtils.retrieveAODList = lambda : f("EMPFlow")+f("LCTopo")+f("EMTopo")+["xAOD::EventShape#NeutralParticleFlowIsoCentralEventShape","xAOD::EventShapeAuxInfo#NeutralParticleFlowIsoCentralEventShapeAux.", "xAOD::EventShape#NeutralParticleFlowIsoForwardEventShape","xAOD::EventShapeAuxInfo#NeutralParticleFlowIsoForwardEventShapeAux.", "xAOD::EventShape#ParticleFlowIsoCentralEventShape","xAOD::EventShapeAuxInfo#ParticleFlowIsoCentralEventShapeAux.", "xAOD::EventShape#ParticleFlowIsoForwardEventShape","xAOD::EventShapeAuxInfo#ParticleFlowIsoForwardEventShapeAux.", "xAOD::EventShape#TopoClusterIsoCentralEventShape","xAOD::EventShapeAuxInfo#TopoClusterIsoCentralEventShapeAux.", "xAOD::EventShape#TopoClusterIsoForwardEventShape","xAOD::EventShapeAuxInfo#TopoClusterIsoForwardEventShapeAux.","xAOD::CaloClusterContainer#EMOriginTopoClusters","xAOD::ShallowAuxContainer#EMOriginTopoClustersAux.","xAOD::CaloClusterContainer#LCOriginTopoClusters","xAOD::ShallowAuxContainer#LCOriginTopoClustersAux."]; from BTagging.BTaggingFlags import BTaggingFlags;BTaggingFlags.btaggingAODList=["xAOD::BTaggingContainer#BTagging_AntiKt4EMTopo","xAOD::BTaggingAuxContainer#BTagging_AntiKt4EMTopoAux.","xAOD::BTagVertexContainer#BTagging_AntiKt4EMTopoJFVtx","xAOD::BTagVertexAuxContainer#BTagging_AntiKt4EMTopoJFVtxAux.","xAOD::VertexContainer#BTagging_AntiKt4EMTopoSecVtx","xAOD::VertexAuxContainer#BTagging_AntiKt4EMTopoSecVtxAux.-vxTrackAtVertex"]; from ParticleBuilderOptions.AODFlags import AODFlags; AODFlags.ThinGeantTruth.set_Value_and_Lock(True);  AODFlags.ThinNegativeEnergyCaloClusters.set_Value_and_Lock(True); AODFlags.ThinNegativeEnergyNeutralPFOs.set_Value_and_Lock(True); from eflowRec.eflowRecFlags import jobproperties; jobproperties.eflowRecFlags.useAODReductionClusterMomentList.set_Value_and_Lock(True); from TriggerJobOpts.TriggerFlags import TriggerFlags;TriggerFlags.AODEDMSet.set_Value_and_Lock("AODFULL");' --postExec 'ESDtoAOD:CILMergeAOD.removeItem("xAOD::CaloClusterAuxContainer#CaloCalTopoClustersAux.LATERAL.LONGITUDINAL.SECOND_R.SECOND_LAMBDA.CENTER_MAG.CENTER_LAMBDA.FIRST_ENG_DENS.ENG_FRAC_MAX.ISOLATION.ENG_BAD_CELLS.N_BAD_CELLS.BADLARQ_FRAC.ENG_BAD_HV_CELLS.N_BAD_HV_CELLS.ENG_POS.SIGNIFICANCE.CELL_SIGNIFICANCE.CELL_SIG_SAMPLING.AVG_LAR_Q.AVG_TILE_Q.EM_PROBABILITY.PTD.BadChannelList");CILMergeAOD.add("xAOD::CaloClusterAuxContainer#CaloCalTopoClustersAux.N_BAD_CELLS.ENG_BAD_CELLS.BADLARQ_FRAC.AVG_TILE_Q.AVG_LAR_Q.CENTER_MAG.ENG_POS.CENTER_LAMBDA.SECOND_LAMBDA.SECOND_R.ISOLATION.EM_PROBABILITY");StreamAOD.ItemList=CILMergeAOD()' | tee  __log.txt; 
	      echo $? &gt;  __exitcode ; 
	      touch __done ;
	      grep  -i "Reco_tf" jobReport.txt  | head -n1 | awk -F\" '{print $2}' &gt; __command.sh;
	      for f in ntuple*.pmon.gz; do if [ -f "$f" ]; then tar xf $f "*.pmonsd.*" ; fi; done ; 
	      checkxAOD.py myAOD.pool.root &gt; myAOD.pool.root.checkfile.txt ;  
	      checkTriggerxAOD.py myAOD.pool.root &gt; myAOD.trig.pool.root.checkfile.txt ;  
	      export userJobId="rawtoall_tier0_reco_data16_noidtide"; 
	      export headDir="/afs/cern.ch/atlas/project/pmb/new_pmb/archive/custom";
	      export OutputDestination=${headDir}/`date +'%d/%m/%Y'`/`echo ${AtlasBuildBranch}`/`basename $ROOTSYS`/${userJobId}; 
	      gzip *txt; 
	      mkdir -p                       ${OutputDestination} ; 
	      rsync -avz ntuple*             ${OutputDestination}/. ; 
	      rsync -avz __*                 ${OutputDestination}/. ; 
	      rsync -avz *.checkfile.txt.gz  ${OutputDestination}/. ; 
	      rsync -avz *mem*               ${OutputDestination}/. ; 
	    </jobTransformCmd>
	<group>TrfRecPerf</group>
	<queue>atlasrttperf</queue>
	<keepFilePattern>myAOD.pool.root</keepFilePattern>             
      </jobTransform>




      <jobTransform userJobId="mp_monitoring_reco_data15_main">
	<doc>Reco_tf runs on 13TeV collision data from the mainxf stream</doc>
	<jobTransformJobName>mp_monitoring_reco_data15_main</jobTransformJobName>
	<jobTransformCmd>
	  export ATHENA_PROC_NUMBER=4
	  export TRF_ECHO=1; xrdcp root://eosatlas//eos/atlas/user/a/atlaspmb/data15_13TeV/data15_13TeV.00284484.physics_Main.daq.RAW._lb0037._SFO-1._0001.data data15_13TeV.00284484.physics_Main.daq.RAW._lb0037._SFO-1._0001.data ;  Reco_tf.py --inputBSFile data15_13TeV.00284484.physics_Main.daq.RAW._lb0037._SFO-1._0001.data  --outputESDFile myESD.pool.root --outputAODFile myAOD.pool.root --AMI q431 --maxEvent 150 --athenaopts='--pmon=sdmonfp' --ignoreErrors 'True' | tee  __log.txt; 
	  echo $? &gt;  __exitcode ; 
	  touch __done ;
	  grep  -i "Reco_tf" jobReport.txt  | head -n1 | awk -F\" '{print $2}' &gt; __command.sh;
	  for f in ntuple*.pmon.gz; do if [ -f "$f" ]; then tar xf $f "*.pmonsd.*" ; fi; done ; 
	  checkxAOD.py myESD.pool.root &gt; myESD.pool.root.checkfile.txt ; 
	  checkxAOD.py myAOD.pool.root &gt; myAOD.pool.root.checkfile.txt ;  
	  export userJobId="mp_monitoring_reco_data15_main"; 
	  export headDir="/afs/cern.ch/atlas/project/pmb/new_pmb/archive/custom";
	  export OutputDestination=${headDir}/`date +'%d/%m/%Y'`/`echo ${AtlasBuildBranch}`/`basename $ROOTSYS`/${userJobId}; 
	  gzip *txt; 
	  mkdir -p                       ${OutputDestination} ; 
	  rsync -avz  *mem*             ${OutputDestination}/. ; 
	  rsync -avz ntuple*             ${OutputDestination}/. ; 
	  rsync -avz __*                 ${OutputDestination}/. ; 
	  rsync -avz *.checkfile.txt.gz  ${OutputDestination}/. ; 
	</jobTransformCmd>
	<group>TrfRecPerf</group>
	<queue>atlasrttperf</queue>
      </jobTransform>

      <jobTransform userJobId="mp8_monitoring_reco_data15_main">
	<doc>Reco_tf runs on 13TeV collision data from the mainxf stream</doc>
	<jobTransformJobName>mp8_monitoring_reco_data15_main</jobTransformJobName>
	<jobTransformCmd>
	  export ATHENA_PROC_NUMBER=8
	  export TRF_ECHO=1; xrdcp root://eosatlas//eos/atlas/user/a/atlaspmb/data15_13TeV/data15_13TeV.00284484.physics_Main.daq.RAW._lb0037._SFO-1._0001.data data15_13TeV.00284484.physics_Main.daq.RAW._lb0037._SFO-1._0001.data ;  Reco_tf.py --inputBSFile data15_13TeV.00284484.physics_Main.daq.RAW._lb0037._SFO-1._0001.data  --outputESDFile myESD.pool.root --outputAODFile myAOD.pool.root --AMI q431 --maxEvent 150 --athenaopts='--pmon=sdmonfp' --ignoreErrors 'True' | tee  __log.txt; 
	  echo $? &gt;  __exitcode ; 
	  touch __done ;
	  grep  -i "Reco_tf" jobReport.txt  | head -n1 | awk -F\" '{print $2}' &gt; __command.sh;
	  for f in ntuple*.pmon.gz; do if [ -f "$f" ]; then tar xf $f "*.pmonsd.*" ; fi; done ; 
	  checkxAOD.py myESD.pool.root &gt; myESD.pool.root.checkfile.txt ; 
	  checkxAOD.py myAOD.pool.root &gt; myAOD.pool.root.checkfile.txt ;  
	  export userJobId="mp8_monitoring_reco_data15_main"; 
	  export headDir="/afs/cern.ch/atlas/project/pmb/new_pmb/archive/custom";
	  export OutputDestination=${headDir}/`date +'%d/%m/%Y'`/`echo ${AtlasBuildBranch}`/`basename $ROOTSYS`/${userJobId}; 
	  gzip *txt; 
	  mkdir -p                       ${OutputDestination} ; 
	  rsync -avz  *mem*             ${OutputDestination}/. ; 
	  rsync -avz ntuple*             ${OutputDestination}/. ; 
	  rsync -avz __*                 ${OutputDestination}/. ; 
	  rsync -avz *.checkfile.txt.gz  ${OutputDestination}/. ; 
	</jobTransformCmd>
	<group>TrfRecPerf</group>
	<queue>atlasrttperf</queue>
      </jobTransform>

      <jobTransform userJobId="rawtoall_monitoring_reco_data15_main">
	<doc>Reco_tf runs on 13TeV collision data from the mainxf stream</doc>
	<jobTransformJobName>rawtoall_monitoring_reco_data15_main</jobTransformJobName>
	<jobTransformCmd>
	  export TRF_ECHO=1; xrdcp root://eosatlas//eos/atlas/user/a/atlaspmb/data15_13TeV/data15_13TeV.00284484.physics_Main.daq.RAW._lb0037._SFO-1._0001.data data15_13TeV.00284484.physics_Main.daq.RAW._lb0037._SFO-1._0001.data ;  Reco_tf.py --inputBSFile data15_13TeV.00284484.physics_Main.daq.RAW._lb0037._SFO-1._0001.data --outputAODFile myAOD.pool.root --outputHISTFile myHIST.pool.root --AMI q431 --maxEvent 150 --athenaopts='--pmon=sdmonfp' --ignoreErrors 'True' --steering doRAWtoALL | tee  __log.txt; 
	  echo $? &gt;  __exitcode ; 
	  touch __done ;
	  grep  -i "Reco_tf" jobReport.txt  | head -n1 | awk -F\" '{print $2}' &gt; __command.sh;
	  for f in ntuple*.pmon.gz; do if [ -f "$f" ]; then tar xf $f "*.pmonsd.*" ; fi; done ; 
	  checkxAOD.py myESD.pool.root &gt; myESD.pool.root.checkfile.txt ; 
	  checkxAOD.py myAOD.pool.root &gt; myAOD.pool.root.checkfile.txt ;  
	  export userJobId="rawtoall_monitoring_reco_data15_main"; 
	  export headDir="/afs/cern.ch/atlas/project/pmb/new_pmb/archive/custom";
	  export OutputDestination=${headDir}/`date +'%d/%m/%Y'`/`echo ${AtlasBuildBranch}`/`basename $ROOTSYS`/${userJobId}; 
	  gzip *txt; 
	  mkdir -p                       ${OutputDestination} ; 
	  rsync -avz  *mem*             ${OutputDestination}/. ; 
	  rsync -avz ntuple*             ${OutputDestination}/. ; 
	  rsync -avz __*                 ${OutputDestination}/. ; 
	  rsync -avz *.checkfile.txt.gz  ${OutputDestination}/. ; 
	</jobTransformCmd>
	<group>TrfRecPerf</group>
	<queue>atlasrttperf</queue>
      </jobTransform>



      <jobTransform userJobId="mp_rawtoall_monitoring_reco_data15_main">
	<doc>Reco_tf runs on 13TeV collision data from the mainxf stream</doc>
	<jobTransformJobName>mp_rawtoall_monitoring_reco_data15_main</jobTransformJobName>
	<jobTransformCmd>
	  export ATHENA_PROC_NUMBER=4
	  export TRF_ECHO=1; xrdcp root://eosatlas//eos/atlas/user/a/atlaspmb/data15_13TeV/data15_13TeV.00284484.physics_Main.daq.RAW._lb0037._SFO-1._0001.data data15_13TeV.00284484.physics_Main.daq.RAW._lb0037._SFO-1._0001.data ;  Reco_tf.py --inputBSFile data15_13TeV.00284484.physics_Main.daq.RAW._lb0037._SFO-1._0001.data --outputAODFile myAOD.pool.root --outputHISTFile myHIST.pool.root --AMI q431 --maxEvent 150 --athenaopts='--pmon=sdmonfp' --ignoreErrors 'True' --steering doRAWtoALL | tee  __log.txt; 
	  echo $? &gt;  __exitcode ; 
	  touch __done ;
	  grep  -i "Reco_tf" jobReport.txt  | head -n1 | awk -F\" '{print $2}' &gt; __command.sh;
	  for f in ntuple*.pmon.gz; do if [ -f "$f" ]; then tar xf $f "*.pmonsd.*" ; fi; done ; 
	  checkxAOD.py myESD.pool.root &gt; myESD.pool.root.checkfile.txt ; 
	  checkxAOD.py myAOD.pool.root &gt; myAOD.pool.root.checkfile.txt ;  
	  export userJobId="mp_rawtoall_monitoring_reco_data15_main"; 
	  export headDir="/afs/cern.ch/atlas/project/pmb/new_pmb/archive/custom";
	  export OutputDestination=${headDir}/`date +'%d/%m/%Y'`/`echo ${AtlasBuildBranch}`/`basename $ROOTSYS`/${userJobId}; 
	  gzip *txt; 
	  mkdir -p                       ${OutputDestination} ; 
	  rsync -avz  *mem*             ${OutputDestination}/. ; 
	  rsync -avz ntuple*             ${OutputDestination}/. ; 
	  rsync -avz __*                 ${OutputDestination}/. ; 
	  rsync -avz *.checkfile.txt.gz  ${OutputDestination}/. ; 
	</jobTransformCmd>
	<group>TrfRecPerf</group>
	<queue>atlasrttperf</queue>
      </jobTransform>

      <jobTransform userJobId="mp8_rawtoall_monitoring_reco_data15_main">
	<doc>Reco_tf runs on 13TeV collision data from the mainxf stream</doc>
	<jobTransformJobName>mp8_rawtoall_monitoring_reco_data15_main</jobTransformJobName>
	<jobTransformCmd>
	  export ATHENA_PROC_NUMBER=8
	  export TRF_ECHO=1; xrdcp root://eosatlas//eos/atlas/user/a/atlaspmb/data15_13TeV/data15_13TeV.00284484.physics_Main.daq.RAW._lb0037._SFO-1._0001.data data15_13TeV.00284484.physics_Main.daq.RAW._lb0037._SFO-1._0001.data ;  Reco_tf.py --inputBSFile data15_13TeV.00284484.physics_Main.daq.RAW._lb0037._SFO-1._0001.data --outputAODFile myAOD.pool.root --outputHISTFile myHIST.pool.root --AMI q431 --maxEvent 150 --athenaopts='--pmon=sdmonfp' --ignoreErrors 'True' --steering doRAWtoALL | tee  __log.txt; 
	  echo $? &gt;  __exitcode ; 
	  touch __done ;
	  grep  -i "Reco_tf" jobReport.txt  | head -n1 | awk -F\" '{print $2}' &gt; __command.sh;
	  for f in ntuple*.pmon.gz; do if [ -f "$f" ]; then tar xf $f "*.pmonsd.*" ; fi; done ; 
	  checkxAOD.py myESD.pool.root &gt; myESD.pool.root.checkfile.txt ; 
	  checkxAOD.py myAOD.pool.root &gt; myAOD.pool.root.checkfile.txt ;  
	  export userJobId="mp8_rawtoall_monitoring_reco_data15_main"; 
	  export headDir="/afs/cern.ch/atlas/project/pmb/new_pmb/archive/custom";
	  export OutputDestination=${headDir}/`date +'%d/%m/%Y'`/`echo ${AtlasBuildBranch}`/`basename $ROOTSYS`/${userJobId}; 
	  gzip *txt; 
	  mkdir -p                       ${OutputDestination} ; 
	  rsync -avz  *mem*             ${OutputDestination}/. ; 
	  rsync -avz ntuple*             ${OutputDestination}/. ; 
	  rsync -avz __*                 ${OutputDestination}/. ; 
	  rsync -avz *.checkfile.txt.gz  ${OutputDestination}/. ; 
	</jobTransformCmd>
	<group>TrfRecPerf</group>
	<queue>atlasrttperf</queue>
      </jobTransform>



      <jobTransform userJobId="trigger_reco_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40">
	<doc>Reco_tf runs on 13TeV collision mc ttbar 25 ns</doc>
	<jobTransformJobName>trigger_reco_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40</jobTransformJobName>
	<jobTransformCmd>
	  export TRF_ECHO=1; xrdcp root://eosatlas//eos/atlas/user/a/atlaspmb/mc/valid1.110401.PowhegPythia_P2012_ttbar_nonallhad.recon.RDO.e3099_s2578_r6220_tid05191878_00/RDO.05191878._000121.pool.root.1 RDO.05191878._000121.pool.root.1 ; Reco_tf.py --inputRDOFile RDO.05191878._000121.pool.root.1 --maxEvents 100 --outputESDFile myESD.pool.root  --outputAODFile myAOD.pool.root --preExec='rec.doTrigger=True;rec.doMonitoring=True;from PerfMonComps.PerfMonFlags import jobproperties as pmjp;pmjp.PerfMonFlags.doPostProcessing=True;pmjp.PerfMonFlags.doSemiDetailedMonitoringFullPrint=True;'  --ignoreErrors 'True' --conditionsTag=OFLCOND-RUN12-SDR-25 | tee  __log.txt; 
	  echo $? &gt;  __exitcode ;
	  touch __done ;
	  grep  -i "Reco_tf" jobReport.txt  | head -n1 | awk -F\" '{print $2}' &gt; __command.sh;
	  for f in ntuple*.pmon.gz; do if [ -f "$f" ]; then tar xf $f "*.pmonsd.*" ; fi; done ; 
	  checkxAOD.py myESD.pool.root &gt; myESD.pool.root.checkfile.txt ; 
	  checkxAOD.py myAOD.pool.root &gt; myAOD.pool.root.checkfile.txt ;  
	  export userJobId="trigger_reco_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40"; 
	  export headDir="/afs/cern.ch/atlas/project/pmb/new_pmb/archive/custom";
	  export OutputDestination=${headDir}/`date +'%d/%m/%Y'`/`echo ${AtlasBuildBranch}`/`basename $ROOTSYS`/${userJobId}; 
	  gzip *txt; 
	  mkdir -p                       ${OutputDestination} ; 
	  rsync -avz  *mem*             ${OutputDestination}/. ; 
	  rsync -avz ntuple*             ${OutputDestination}/. ; 
	  rsync -avz __*                 ${OutputDestination}/. ; 
	  rsync -avz *.checkfile.txt.gz  ${OutputDestination}/. ; 
	</jobTransformCmd>
	<group>TrfRecPerf</group>
	<queue>atlasrttperf</queue>
      </jobTransform>



      <jobTransform userJobId="fullsim_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40">
	<doc>Full Geant4 simulation (MC15 production setup, based on AMI tag s2745 )</doc>
	<jobTransformJobName>fullsim_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40</jobTransformJobName>
	<jobTransformCmd>
	  export TRF_ECHO=1; 
	  Sim_tf.py --conditionsTag 'default:OFLCOND-RUN12-SDR-19' --physicsList 'FTFP_BERT' --truthStrategy 'MC15aPlus' --simulator 'FullG4' --postInclude 'default:RecJobTransforms/UseFrontier.py' --preInclude 'EVNTtoHITS:SimulationJobOptions/preInclude.BeamPipeKill.py,SimulationJobOptions/preInclude.FrozenShowersFCalOnly.py' --DataRunNumber '222525' --geometryVersion 'default:ATLAS-R2-2015-03-01-00_VALIDATION' --inputEVNTFile "/afs/cern.ch/atlas/groups/Simulation/EVNT_files/mc12_valid.110401.PowhegPythia_P2012_ttbar_nonallhad.evgen.EVNT.e3099.01517252._000001.pool.root.1" --outputHITSFile "Hits.pool.root" --maxEvents 20 --preExec='from PerfMonComps.PerfMonFlags import jobproperties as pmjp;pmjp.PerfMonFlags.doPostProcessing=True;pmjp.PerfMonFlags.doSemiDetailedMonitoringFullPrint=True;' --ignoreErrors 'True' | tee  __log.txt; 
	  echo $? &gt;  __exitcode ; 
	  touch __done ;
	  grep  -i "Sim_tf" jobReport.txt  | head -n1 | awk -F\" '{print $2}' &gt; __command.sh;
	  for f in ntuple*.pmon.gz; do if [ -f "$f" ]; then tar xf $f "*.pmonsd.*" ; fi; done ; 
	  export userJobId="fullsim_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40"; 
	  export headDir="/afs/cern.ch/atlas/project/pmb/new_pmb/archive/custom";
	  export OutputDestination=${headDir}/`date +'%d/%m/%Y'`/`echo ${AtlasBuildBranch}`/`basename $ROOTSYS`/${userJobId}; 
	  gzip *txt; 
	  mkdir -p                       ${OutputDestination} ; 
	  rsync -avz  *mem*             ${OutputDestination}/. ; 
	  rsync -avz ntuple*             ${OutputDestination}/. ; 
	  rsync -avz __*                 ${OutputDestination}/. ; 
	  rsync -avz *.checkfile.txt.gz  ${OutputDestination}/. ; 
	</jobTransformCmd>
	<group>TrfRecPerf</group>
	<queue>atlasrttperf</queue>
      </jobTransform>

      <jobTransform userJobId="fastsim_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40">
	<doc>ATLFASTII simulation (MC15 production setup)</doc>
	<jobTransformJobName>fastsim_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40</jobTransformJobName>
	<jobTransformCmd>
	  export TRF_ECHO=1; 
	  Sim_tf.py --conditionsTag 'default:OFLCOND-RUN12-SDR-19' --physicsList 'FTFP_BERT' --truthStrategy 'MC12' --simulator 'ATLFASTII' --postInclude 'default:RecJobTransforms/UseFrontier.py' --preInclude 'EVNTtoHITS:SimulationJobOptions/preInclude.BeamPipeKill.py' --DataRunNumber '222525' --geometryVersion 'default:ATLAS-R2-2015-03-01-00_VALIDATION' --inputEVNTFile "/afs/cern.ch/atlas/groups/Simulation/EVNT_files/mc12_valid.110401.PowhegPythia_P2012_ttbar_nonallhad.evgen.EVNT.e3099.01517252._000001.pool.root.1" --outputHITSFile "Hits.pool.root" --maxEvents 20 --maxEvents 20 --preExec='from PerfMonComps.PerfMonFlags import jobproperties as pmjp;pmjp.PerfMonFlags.doPostProcessing=True;pmjp.PerfMonFlags.doSemiDetailedMonitoringFullPrint=True;' --ignoreErrors 'True' | tee  __log.txt; 
	  echo $? &gt;  __exitcode ; 
	  touch __done ;
	  grep  -i "Sim_tf" jobReport.txt  | head -n1 | awk -F\" '{print $2}' &gt; __command.sh;
	  for f in ntuple*.pmon.gz; do if [ -f "$f" ]; then tar xf $f "*.pmonsd.*" ; fi; done ; 
	  export userJobId="fastsim_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40"; 
	  export headDir="/afs/cern.ch/atlas/project/pmb/new_pmb/archive/custom";
	  export OutputDestination=${headDir}/`date +'%d/%m/%Y'`/`echo ${AtlasBuildBranch}`/`basename $ROOTSYS`/${userJobId}; 
	  gzip *txt; 
	  mkdir -p                       ${OutputDestination} ; 
	  rsync -avz  *mem*             ${OutputDestination}/. ; 
	  rsync -avz ntuple*             ${OutputDestination}/. ; 
	  rsync -avz __*                 ${OutputDestination}/. ; 
	  rsync -avz *.checkfile.txt.gz  ${OutputDestination}/. ; 
	</jobTransformCmd>
	<group>TrfRecPerf</group>
	<queue>atlasrttperf</queue>
      </jobTransform>


      <jobTransform userJobId="digi_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40">
	<doc>Digitization (MC15 production setup)</doc>
	<jobTransformJobName>digi_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40</jobTransformJobName>
	<jobTransformCmd>
	  export TRF_ECHO=1; Reco_tf.py --inputHITSFile root://eosatlas//eos/atlas/atlascerngroupdisk/proj-sit/digitization/RTT/mc15a/valid1.110401.PowhegPythia_P2012_ttbar_nonallhad.simul.HITS.e3099_s2578_tid04919495_00/HITS.04919495._001041.pool.root.1 --conditionsTag 'default:OFLCOND-RUN12-SDR-31' --conditionsTag 'default:OFLCOND-RUN12-SDR-31' --digiSeedOffset1 170 --digiSeedOffset2 170  --geometryVersion 'default:ATLAS-R2-2015-03-01-00' --inputHighPtMinbiasHitsFile  root://eosatlas//eos/atlas/atlascerngroupdisk/proj-sit/digitization/RTT/mc15a/mc15_valid.361035.Pythia8EvtGen_A2MSTW2008LO_minbias_inelastic_high.merge.HITS.e3581_s2578_s2169_tid05098387_00/HITS.05098387.*.pool.root.? --inputLowPtMinbiasHitsFile  root://eosatlas//eos/atlas/atlascerngroupdisk/proj-sit/digitization/RTT/mc15a/mc15_valid.361034.Pythia8EvtGen_A2MSTW2008LO_minbias_inelastic_low.merge.HITS.e3581_s2578_s2169_tid05098374_00/HITS.05098374.*.pool.root.?  --jobNumber 1 --maxEvents 100 --numberOfCavernBkg="0" --numberOfHighPtMinBias '0.122680569785' --numberOfLowPtMinBias '39.8773194302' --outputRDOFile myRDO.pool.root --postExec 'all:CfgMgr.MessageSvc().setError+=["HepMcParticleLink"]' 'HITtoRDO:from AthenaCommon.CfgGetter import getPublicTool;getPublicTool("MergeMcEventCollTool").OnlySaveSignalTruth=True;ToolSvc.LArAutoCorrTotalToolDefault.deltaBunch=1' --postInclude 'default:PyJobTransforms/UseFrontier.py' --pileupFinalBunch 6 --preExec 'all:from AthenaCommon.BeamFlags import jobproperties;jobproperties.Beam.numberOfCollisions.set_Value_and_Lock(20.0);from LArROD.LArRODFlags import larRODFlags;larRODFlags.NumberOfCollisions.set_Value_and_Lock(20);larRODFlags.nSamples.set_Value_and_Lock(4);larRODFlags.doOFCPileupOptimization.set_Value_and_Lock(True);larRODFlags.firstSample.set_Value_and_Lock(0);larRODFlags.useHighestGainAutoCorr.set_Value_and_Lock(True);from PerfMonComps.PerfMonFlags import jobproperties as pmjp;pmjp.PerfMonFlags.doPostProcessing=True;pmjp.PerfMonFlags.doSemiDetailedMonitoringFullPrint=True;' --preInclude 'HITtoRDO:Digitization/ForceUseOfPileUpTools.py,SimulationJobOptions/preInclude.PileUpBunchTrainsMC15_2015_25ns_Config1.py,RunDependentSimData/configLumi_run222525_v1.py' --skipEvents 0 --ignoreErrors 'True' | tee  __log.txt; 
	  echo $? &gt;  __exitcode ; 
	  touch __done ;
	  grep  -i "Digi_tf" jobReport.txt  | head -n1 | awk -F\" '{print $2}' &gt; __command.sh;
	  for f in ntuple*.pmon.gz; do if [ -f "$f" ]; then tar xf $f "*.pmonsd.*" ; fi; done ; 
	  export userJobId="digi_mc15_ttbar_valid_13tev_25ns_mu00_to_mu40"; 
	  export headDir="/afs/cern.ch/atlas/project/pmb/new_pmb/archive/custom";
	  export OutputDestination=${headDir}/`date +'%d/%m/%Y'`/`echo ${AtlasBuildBranch}`/`basename $ROOTSYS`/${userJobId}; 
	  gzip *txt; 
	  mkdir -p                       ${OutputDestination} ; 
	  rsync -avz  *mem*             ${OutputDestination}/. ; 
	  rsync -avz ntuple*             ${OutputDestination}/. ; 
	  rsync -avz __*                 ${OutputDestination}/. ; 
	  rsync -avz *.checkfile.txt.gz  ${OutputDestination}/. ; 
	</jobTransformCmd>
	<group>TrfRecPerf</group>
	<queue>atlasrttperf</queue>
      </jobTransform>


      <jobTransform userJobId="fullchain_mc15_ttbar_valid_13tev_25ns_mu40">
	<doc>Full chain (MC15 production setup)</doc>
	<jobTransformJobName>fullchain_mc15_ttbar_valid_13tev_25ns_mu40</jobTransformJobName>
	<jobTransformCmd>
	  export TRF_ECHO=1; Reco_tf.py --inputHITSFile root://eosatlas//eos/atlas/atlascerngroupdisk/proj-sit/digitization/RTT/mc15a/mc15_valid.410000.PowhegPythiaEvtGen_P2012_ttbar_hdamp172p5_nonallhad.simul.HITS.e3698_s2726/HITS.06950958._003212.pool.root.1 --conditionsTag 'default:OFLCOND-RUN12-SDR-31' --conditionsTag 'default:OFLCOND-RUN12-SDR-31' --digiSeedOffset1 170 --digiSeedOffset2 170 --geometryVersion 'default:ATLAS-R2-2015-03-01-00' --inputHighPtMinbiasHitsFile root://eosatlas//eos/atlas/atlascerngroupdisk/proj-sit/digitization/RTT/mc15a/mc15_13TeV.361035.Pythia8EvtGen_A2MSTW2008LO_minbias_inelastic_high.merge.HITS.e3581_s2578_s2195/HITS.05608152.*.pool.root.? --inputLowPtMinbiasHitsFile root://eosatlas//eos/atlas/atlascerngroupdisk/proj-sit/digitization/RTT/mc15a/mc15_13TeV.361034.Pythia8EvtGen_A2MSTW2008LO_minbias_inelastic_low.merge.HITS.e3581_s2578_s2195/HITS.05608147.*.pool.root.?  --jobNumber 1 --maxEvents 100 --numberOfCavernBkg="0" --numberOfHighPtMinBias '0.122680569785' --numberOfLowPtMinBias '39.8773194302'  --outputAODFile="myAOD.pool.root" --outputESDFile="myESD.pool.root" --outputRDOFile="myRDO.pool.root"  --pileupFinalBunch '6' --postExec 'all:CfgMgr.MessageSvc().setError+=["HepMcParticleLink"];' 'HITtoRDO:job.StandardPileUpToolsAlg.PileUpTools["MergeMcEventCollTool"].OnlySaveSignalTruth=True;job.StandardPileUpToolsAlg.PileUpTools["MdtDigitizationTool"].LastXing=150' 'RDOtoRDOTrigger:from AthenaCommon.AlgSequence import AlgSequence;AlgSequence().LVL1TGCTrigger.TILEMU=True;from AthenaCommon.AppMgr import ServiceMgr;import MuonRPC_Cabling.MuonRPC_CablingConfig;ServiceMgr.MuonRPC_CablingSvc.RPCTriggerRoadsfromCool=False' 'ESDtoAOD:CILMergeAOD.removeItem("xAOD::CaloClusterAuxContainer#CaloCalTopoClustersAux.LATERAL.LONGITUDINAL.SECOND_R.SECOND_LAMBDA.CENTER_MAG.CENTER_LAMBDA.FIRST_ENG_DENS.ENG_FRAC_MAX.ISOLATION.ENG_BAD_CELLS.N_BAD_CELLS.BADLARQ_FRAC.ENG_BAD_HV_CELLS.N_BAD_HV_CELLS.ENG_POS.SIGNIFICANCE.CELL_SIGNIFICANCE.CELL_SIG_SAMPLING.AVG_LAR_Q.AVG_TILE_Q.EM_PROBABILITY.PTD.BadChannelList");CILMergeAOD.add("xAOD::CaloClusterAuxContainer#CaloCalTopoClustersAux.N_BAD_CELLS.ENG_BAD_CELLS.BADLARQ_FRAC.AVG_TILE_Q.AVG_LAR_Q.CENTER_MAG.ENG_POS.CENTER_LAMBDA.SECOND_LAMBDA.SECOND_R.ISOLATION.EM_PROBABILITY");StreamAOD.ItemList=CILMergeAOD()' --postInclude 'default:RecJobTransforms/UseFrontier.py' --preExec 'all:rec.Commissioning.set_Value_and_Lock(True);from AthenaCommon.BeamFlags import jobproperties;jobproperties.Beam.numberOfCollisions.set_Value_and_Lock(40.0);from LArROD.LArRODFlags import larRODFlags;larRODFlags.NumberOfCollisions.set_Value_and_Lock(40);larRODFlags.nSamples.set_Value_and_Lock(4);larRODFlags.doOFCPileupOptimization.set_Value_and_Lock(True);larRODFlags.firstSample.set_Value_and_Lock(0);larRODFlags.useHighestGainAutoCorr.set_Value_and_Lock(True);' 'HITtoRDO:userRunLumiOverride={"run":222525, "startmu":40.0, "endmu":41.0, "stepmu":1.0, "startlb":1, "timestamp": 1376703331}' 'RAWtoESD:from InDetRecExample.InDetJobProperties import InDetFlags; InDetFlags.cutLevel.set_Value_and_Lock(14);' 'ESDtoAOD:ToolSvc += CfgMgr.xAODMaker__TrackParticleCompressorTool( "xAODTrackParticleCompressorTool", OffDiagCovMatrixBits = 7 ); from JetRec import JetRecUtils;f=lambda s:["xAOD::JetContainer#AntiKt4%sJets"%(s,),"xAOD::JetAuxContainer#AntiKt4%sJetsAux."%(s,),"xAOD::EventShape#Kt4%sEventShape"%(s,),"xAOD::EventShapeAuxInfo#Kt4%sEventShapeAux."%(s,),"xAOD::EventShape#Kt4%sOriginEventShape"%(s,),"xAOD::EventShapeAuxInfo#Kt4%sOriginEventShapeAux."%(s,)]; JetRecUtils.retrieveAODList = lambda : f("EMPFlow")+f("LCTopo")+f("EMTopo")+["xAOD::EventShape#NeutralParticleFlowIsoCentralEventShape","xAOD::EventShapeAuxInfo#NeutralParticleFlowIsoCentralEventShapeAux.", "xAOD::EventShape#NeutralParticleFlowIsoForwardEventShape","xAOD::EventShapeAuxInfo#NeutralParticleFlowIsoForwardEventShapeAux.","xAOD::EventShape#ParticleFlowIsoCentralEventShape","xAOD::EventShapeAuxInfo#ParticleFlowIsoCentralEventShapeAux.", "xAOD::EventShape#ParticleFlowIsoForwardEventShape","xAOD::EventShapeAuxInfo#ParticleFlowIsoForwardEventShapeAux.", "xAOD::EventShape#TopoClusterIsoCentralEventShape","xAOD::EventShapeAuxInfo#TopoClusterIsoCentralEventShapeAux.", "xAOD::EventShape#TopoClusterIsoForwardEventShape","xAOD::EventShapeAuxInfo#TopoClusterIsoForwardEventShapeAux.","xAOD::CaloClusterContainer#EMOriginTopoClusters","xAOD::ShallowAuxContainer#EMOriginTopoClustersAux.","xAOD::CaloClusterContainer#LCOriginTopoClusters","xAOD::ShallowAuxContainer#LCOriginTopoClustersAux."]; from BTagging.BTaggingFlags import BTaggingFlags;BTaggingFlags.btaggingAODList=["xAOD::BTaggingContainer#BTagging_AntiKt4EMTopo","xAOD::BTaggingAuxContainer#BTagging_AntiKt4EMTopoAux.","xAOD::BTagVertexContainer#BTagging_AntiKt4EMTopoJFVtx","xAOD::BTagVertexAuxContainer#BTagging_AntiKt4EMTopoJFVtxAux.","xAOD::VertexContainer#BTagging_AntiKt4EMTopoSecVtx","xAOD::VertexAuxContainer#BTagging_AntiKt4EMTopoSecVtxAux.-vxTrackAtVertex"]; from ParticleBuilderOptions.AODFlags import AODFlags; AODFlags.ThinGeantTruth.set_Value_and_Lock(True);  AODFlags.ThinNegativeEnergyCaloClusters.set_Value_and_Lock(True); AODFlags.ThinNegativeEnergyNeutralPFOs.set_Value_and_Lock(True); from eflowRec.eflowRecFlags import jobproperties; jobproperties.eflowRecFlags.useAODReductionClusterMomentList.set_Value_and_Lock(True); from TriggerJobOpts.TriggerFlags import TriggerFlags;TriggerFlags.AODEDMSet.set_Value_and_Lock("AODSLIM");'  --numberOfCavernBkg '0' --preInclude 'HITtoRDO:Digitization/ForceUseOfPileUpTools.py,SimulationJobOptions/preInclude.PileUpBunchTrainsMC15_2015_25ns_Config1.py,RunDependentSimData/configLumi_muRange.py'  --mts ESD:0 --steering "RAWtoESD:in-RDO,in+RDO_TRIG,in-BS" --ignoreErrors 'True' | tee  __log.txt
	  echo $? &gt;  __exitcode ; 
	  touch __done ;
	  grep  -i "Digi_tf" jobReport.txt  | head -n1 | awk -F\" '{print $2}' &gt; __command.sh;
	  for f in ntuple*.pmon.gz; do if [ -f "$f" ]; then tar xf $f "*.pmonsd.*" ; fi; done ; 
	  export userJobId="fullchain_mc15_ttbar_valid_13tev_25ns_mu40"; 
	  export headDir="/afs/cern.ch/atlas/project/pmb/new_pmb/archive/custom";
	  export OutputDestination=${headDir}/`date +'%d/%m/%Y'`/`echo ${AtlasBuildBranch}`/`basename $ROOTSYS`/${userJobId}; 
	  checkxAOD.py myRDO.pool.root &gt; myRDO.pool.root.checkfile.txt ; 
	  checkxAOD.py myESD.pool.root &gt; myESD.pool.root.checkfile.txt ; 
	  checkxAOD.py myAOD.pool.root &gt; myAOD.pool.root.checkfile.txt ;  
	  checkTriggerxAOD.py myAOD.pool.root &gt; myAOD.trig.pool.root.checkfile.txt ;  
	  gzip *txt; 
	  mkdir -p                       ${OutputDestination} ; 
	  rsync -avz  *mem*             ${OutputDestination}/. ; 
	  rsync -avz ntuple*             ${OutputDestination}/. ; 
	  rsync -avz __*                 ${OutputDestination}/. ; 
	  rsync -avz *.checkfile.txt.gz  ${OutputDestination}/. ; 
	</jobTransformCmd>
	<group>TrfRecPerf</group>
	<queue>atlasrttperf</queue>
	<keepFilePattern>myAOD.pool.root</keepFilePattern>
      </jobTransform>


      <jobTransform userJobId="fullchain_mc15_ttbar_valid_13tev_25ns_mu60">
	<doc>Full chain (MC15 production setup)</doc>
	<jobTransformJobName>fullchain_mc15_ttbar_valid_13tev_25ns_mu60</jobTransformJobName>
	<jobTransformCmd>
	  export TRF_ECHO=1; Reco_tf.py --inputHITSFile root://eosatlas//eos/atlas/atlascerngroupdisk/proj-sit/digitization/RTT/mc15a/mc15_valid.410000.PowhegPythiaEvtGen_P2012_ttbar_hdamp172p5_nonallhad.simul.HITS.e3698_s2726/HITS.06950958._003212.pool.root.1 --conditionsTag 'default:OFLCOND-RUN12-SDR-31' --conditionsTag 'default:OFLCOND-RUN12-SDR-31' --digiSeedOffset1 170 --digiSeedOffset2 170 --geometryVersion 'default:ATLAS-R2-2015-03-01-00' --inputHighPtMinbiasHitsFile root://eosatlas//eos/atlas/atlascerngroupdisk/proj-sit/digitization/RTT/mc15a/mc15_13TeV.361035.Pythia8EvtGen_A2MSTW2008LO_minbias_inelastic_high.merge.HITS.e3581_s2578_s2195/HITS.05608152.*.pool.root.? --inputLowPtMinbiasHitsFile root://eosatlas//eos/atlas/atlascerngroupdisk/proj-sit/digitization/RTT/mc15a/mc15_13TeV.361034.Pythia8EvtGen_A2MSTW2008LO_minbias_inelastic_low.merge.HITS.e3581_s2578_s2195/HITS.05608147.*.pool.root.?  --jobNumber 1 --maxEvents 100 --numberOfCavernBkg="0" --numberOfHighPtMinBias '0.122680569785' --numberOfLowPtMinBias '39.8773194302'  --outputAODFile="myAOD.pool.root" --outputESDFile="myESD.pool.root" --outputRDOFile="myRDO.pool.root"  --pileupFinalBunch '6' --postExec 'all:CfgMgr.MessageSvc().setError+=["HepMcParticleLink"];' 'HITtoRDO:job.StandardPileUpToolsAlg.PileUpTools["MergeMcEventCollTool"].OnlySaveSignalTruth=True;job.StandardPileUpToolsAlg.PileUpTools["MdtDigitizationTool"].LastXing=150' 'RDOtoRDOTrigger:from AthenaCommon.AlgSequence import AlgSequence;AlgSequence().LVL1TGCTrigger.TILEMU=True;from AthenaCommon.AppMgr import ServiceMgr;import MuonRPC_Cabling.MuonRPC_CablingConfig;ServiceMgr.MuonRPC_CablingSvc.RPCTriggerRoadsfromCool=False' 'ESDtoAOD:CILMergeAOD.removeItem("xAOD::CaloClusterAuxContainer#CaloCalTopoClustersAux.LATERAL.LONGITUDINAL.SECOND_R.SECOND_LAMBDA.CENTER_MAG.CENTER_LAMBDA.FIRST_ENG_DENS.ENG_FRAC_MAX.ISOLATION.ENG_BAD_CELLS.N_BAD_CELLS.BADLARQ_FRAC.ENG_BAD_HV_CELLS.N_BAD_HV_CELLS.ENG_POS.SIGNIFICANCE.CELL_SIGNIFICANCE.CELL_SIG_SAMPLING.AVG_LAR_Q.AVG_TILE_Q.EM_PROBABILITY.PTD.BadChannelList");CILMergeAOD.add("xAOD::CaloClusterAuxContainer#CaloCalTopoClustersAux.N_BAD_CELLS.ENG_BAD_CELLS.BADLARQ_FRAC.AVG_TILE_Q.AVG_LAR_Q.CENTER_MAG.ENG_POS.CENTER_LAMBDA.SECOND_LAMBDA.SECOND_R.ISOLATION.EM_PROBABILITY");StreamAOD.ItemList=CILMergeAOD()' --postInclude 'default:RecJobTransforms/UseFrontier.py' --preExec 'all:rec.Commissioning.set_Value_and_Lock(True);from AthenaCommon.BeamFlags import jobproperties;jobproperties.Beam.numberOfCollisions.set_Value_and_Lock(40.0);from LArROD.LArRODFlags import larRODFlags;larRODFlags.NumberOfCollisions.set_Value_and_Lock(40);larRODFlags.nSamples.set_Value_and_Lock(4);larRODFlags.doOFCPileupOptimization.set_Value_and_Lock(True);larRODFlags.firstSample.set_Value_and_Lock(0);larRODFlags.useHighestGainAutoCorr.set_Value_and_Lock(True);' 'HITtoRDO:userRunLumiOverride={"run":222525, "startmu":60.0, "endmu":61.0, "stepmu":1.0, "startlb":1, "timestamp": 1376703331}' 'RAWtoESD:from InDetRecExample.InDetJobProperties import InDetFlags; InDetFlags.cutLevel.set_Value_and_Lock(14);' 'ESDtoAOD:ToolSvc += CfgMgr.xAODMaker__TrackParticleCompressorTool( "xAODTrackParticleCompressorTool", OffDiagCovMatrixBits = 7 ); from JetRec import JetRecUtils;f=lambda s:["xAOD::JetContainer#AntiKt4%sJets"%(s,),"xAOD::JetAuxContainer#AntiKt4%sJetsAux."%(s,),"xAOD::EventShape#Kt4%sEventShape"%(s,),"xAOD::EventShapeAuxInfo#Kt4%sEventShapeAux."%(s,),"xAOD::EventShape#Kt4%sOriginEventShape"%(s,),"xAOD::EventShapeAuxInfo#Kt4%sOriginEventShapeAux."%(s,)]; JetRecUtils.retrieveAODList = lambda : f("EMPFlow")+f("LCTopo")+f("EMTopo")+["xAOD::EventShape#NeutralParticleFlowIsoCentralEventShape","xAOD::EventShapeAuxInfo#NeutralParticleFlowIsoCentralEventShapeAux.", "xAOD::EventShape#NeutralParticleFlowIsoForwardEventShape","xAOD::EventShapeAuxInfo#NeutralParticleFlowIsoForwardEventShapeAux.","xAOD::EventShape#ParticleFlowIsoCentralEventShape","xAOD::EventShapeAuxInfo#ParticleFlowIsoCentralEventShapeAux.", "xAOD::EventShape#ParticleFlowIsoForwardEventShape","xAOD::EventShapeAuxInfo#ParticleFlowIsoForwardEventShapeAux.", "xAOD::EventShape#TopoClusterIsoCentralEventShape","xAOD::EventShapeAuxInfo#TopoClusterIsoCentralEventShapeAux.", "xAOD::EventShape#TopoClusterIsoForwardEventShape","xAOD::EventShapeAuxInfo#TopoClusterIsoForwardEventShapeAux.","xAOD::CaloClusterContainer#EMOriginTopoClusters","xAOD::ShallowAuxContainer#EMOriginTopoClustersAux.","xAOD::CaloClusterContainer#LCOriginTopoClusters","xAOD::ShallowAuxContainer#LCOriginTopoClustersAux."]; from BTagging.BTaggingFlags import BTaggingFlags;BTaggingFlags.btaggingAODList=["xAOD::BTaggingContainer#BTagging_AntiKt4EMTopo","xAOD::BTaggingAuxContainer#BTagging_AntiKt4EMTopoAux.","xAOD::BTagVertexContainer#BTagging_AntiKt4EMTopoJFVtx","xAOD::BTagVertexAuxContainer#BTagging_AntiKt4EMTopoJFVtxAux.","xAOD::VertexContainer#BTagging_AntiKt4EMTopoSecVtx","xAOD::VertexAuxContainer#BTagging_AntiKt4EMTopoSecVtxAux.-vxTrackAtVertex"]; from ParticleBuilderOptions.AODFlags import AODFlags; AODFlags.ThinGeantTruth.set_Value_and_Lock(True);  AODFlags.ThinNegativeEnergyCaloClusters.set_Value_and_Lock(True); AODFlags.ThinNegativeEnergyNeutralPFOs.set_Value_and_Lock(True); from eflowRec.eflowRecFlags import jobproperties; jobproperties.eflowRecFlags.useAODReductionClusterMomentList.set_Value_and_Lock(True); from TriggerJobOpts.TriggerFlags import TriggerFlags;TriggerFlags.AODEDMSet.set_Value_and_Lock("AODSLIM");'  --numberOfCavernBkg '0' --preInclude 'HITtoRDO:Digitization/ForceUseOfPileUpTools.py,SimulationJobOptions/preInclude.PileUpBunchTrainsMC15_2015_25ns_Config1.py,RunDependentSimData/configLumi_muRange.py'  --mts ESD:0 --steering "RAWtoESD:in-RDO,in+RDO_TRIG,in-BS" --ignoreErrors 'True' | tee  __log.txt
	  echo $? &gt;  __exitcode ; 
	  touch __done ;
	  grep  -i "Digi_tf" jobReport.txt  | head -n1 | awk -F\" '{print $2}' &gt; __command.sh;
	  for f in ntuple*.pmon.gz; do if [ -f "$f" ]; then tar xf $f "*.pmonsd.*" ; fi; done ; 
	  export userJobId="fullchain_mc15_ttbar_valid_13tev_25ns_mu60"; 
	  export headDir="/afs/cern.ch/atlas/project/pmb/new_pmb/archive/custom";
	  export OutputDestination=${headDir}/`date +'%d/%m/%Y'`/`echo ${AtlasBuildBranch}`/`basename $ROOTSYS`/${userJobId}; 
	  checkxAOD.py myRDO.pool.root &gt; myRDO.pool.root.checkfile.txt ; 
	  checkxAOD.py myESD.pool.root &gt; myESD.pool.root.checkfile.txt ; 
	  checkxAOD.py myAOD.pool.root &gt; myAOD.pool.root.checkfile.txt ;  
	  checkTriggerxAOD.py myAOD.pool.root &gt; myAOD.trig.pool.root.checkfile.txt ;  
	  gzip *txt; 
	  mkdir -p                       ${OutputDestination} ; 
	  rsync -avz  *mem*             ${OutputDestination}/. ; 
	  rsync -avz ntuple*             ${OutputDestination}/. ; 
	  rsync -avz __*                 ${OutputDestination}/. ; 
	  rsync -avz *.checkfile.txt.gz  ${OutputDestination}/. ; 
	</jobTransformCmd>
	<group>TrfRecPerf</group>
	<queue>atlasrttperf</queue>
	<keepFilePattern>myAOD.pool.root</keepFilePattern>
      </jobTransform>




      <jobTransform userJobId="mp_fullchain_mc15_ttbar_valid_13tev_25ns_mu40">
	<doc>Full chain (MC15 production setup)</doc>
	<jobTransformJobName>mp_fullchain_mc15_ttbar_valid_13tev_25ns_mu40</jobTransformJobName>
	<jobTransformCmd>
	  export ATHENA_PROC_NUMBER=4
	  export TRF_ECHO=1; Reco_tf.py --inputHITSFile root://eosatlas//eos/atlas/atlascerngroupdisk/proj-sit/digitization/RTT/mc15a/valid1.110401.PowhegPythia_P2012_ttbar_nonallhad.simul.HITS.e3099_s2578_tid04919495_00/HITS.04919495._001041.pool.root.1 --conditionsTag 'default:OFLCOND-RUN12-SDR-31' --conditionsTag 'default:OFLCOND-RUN12-SDR-31' --digiSeedOffset1 170 --digiSeedOffset2 170  --geometryVersion 'default:ATLAS-R2-2015-03-01-00' --inputHighPtMinbiasHitsFile  root://eosatlas//eos/atlas/atlascerngroupdisk/proj-sit/digitization/RTT/mc15a/mc15_valid.361035.Pythia8EvtGen_A2MSTW2008LO_minbias_inelastic_high.merge.HITS.e3581_s2578_s2169_tid05098387_00/HITS.05098387.*.pool.root.? --inputLowPtMinbiasHitsFile  root://eosatlas//eos/atlas/atlascerngroupdisk/proj-sit/digitization/RTT/mc15a/mc15_valid.361034.Pythia8EvtGen_A2MSTW2008LO_minbias_inelastic_low.merge.HITS.e3581_s2578_s2169_tid05098374_00/HITS.05098374.*.pool.root.?  --jobNumber 1 --maxEvents 100 --numberOfCavernBkg="0" --numberOfHighPtMinBias '0.122680569785' --numberOfLowPtMinBias '39.8773194302'  --outputAODFile="myAOD.pool.root" --outputESDFile="myESD.pool.root" --outputRDOFile="myRDO.pool.root"  --pileupFinalBunch '6' --postExec 'all:CfgMgr.MessageSvc().setError+=["HepMcParticleLink"]' 'HITtoRDO:job.StandardPileUpToolsAlg.PileUpTools["MergeMcEventCollTool"].OnlySaveSignalTruth=True;job.StandardPileUpToolsAlg.PileUpTools["MdtDigitizationTool"].LastXing=150' 'RDOtoRDOTrigger:from AthenaCommon.AlgSequence import AlgSequence;AlgSequence().LVL1TGCTrigger.TILEMU=True;from AthenaCommon.AppMgr import ServiceMgr;import MuonRPC_Cabling.MuonRPC_CablingConfig;ServiceMgr.MuonRPC_CablingSvc.RPCTriggerRoadsfromCool=False' --postInclude 'default:RecJobTransforms/UseFrontier.py' --preExec 'all:rec.Commissioning.set_Value_and_Lock(True);from AthenaCommon.BeamFlags import jobproperties;jobproperties.Beam.numberOfCollisions.set_Value_and_Lock(40.0);from LArROD.LArRODFlags import larRODFlags;larRODFlags.NumberOfCollisions.set_Value_and_Lock(40);larRODFlags.nSamples.set_Value_and_Lock(4);larRODFlags.doOFCPileupOptimization.set_Value_and_Lock(True);larRODFlags.firstSample.set_Value_and_Lock(0);larRODFlags.useHighestGainAutoCorr.set_Value_and_Lock(True)' 'RAWtoESD:from CaloRec.CaloCellFlags import jobproperties;jobproperties.CaloCellFlags.doLArCellEmMisCalib=False;from TriggerJobOpts.TriggerFlags import TriggerFlags;TriggerFlags.triggerMenuSetup="MC_pp_v6_tight_mc_prescale"' 'ESDtoAOD:TriggerFlags.AODEDMSet="AODSLIM"' 'HITtoRDO:userRunLumiOverride={"run":222525, "startmu":40.0, "endmu":41.0, "stepmu":1.0, "startlb":1, "timestamp": 1376703331}'  --numberOfCavernBkg '0' --preInclude 'HITtoRDO:Digitization/ForceUseOfPileUpTools.py,SimulationJobOptions/preInclude.PileUpBunchTrainsMC15_2015_25ns_Config1.py,RunDependentSimData/configLumi_muRange.py'  --mts ESD:0 --steering "RAWtoESD:in-RDO,in+RDO_TRIG,in-BS" --ignoreErrors 'True' | tee  __log.txt; 
	  echo $? &gt;  __exitcode ; 
	  touch __done ;
	  grep  -i "Digi_tf" jobReport.txt  | head -n1 | awk -F\" '{print $2}' &gt; __command.sh;
	  for f in ntuple*.pmon.gz; do if [ -f "$f" ]; then tar xf $f "*.pmonsd.*" ; fi; done ; 
	  export userJobId="mp_fullchain_mc15_ttbar_valid_13tev_25ns_mu40"; 
	  export headDir="/afs/cern.ch/atlas/project/pmb/new_pmb/archive/custom";
	  export OutputDestination=${headDir}/`date +'%d/%m/%Y'`/`echo ${AtlasBuildBranch}`/`basename $ROOTSYS`/${userJobId}; 
	  checkxAOD.py myRDO.pool.root &gt; myRDO.pool.root.checkfile.txt ; 
	  checkxAOD.py myESD.pool.root &gt; myESD.pool.root.checkfile.txt ; 
	  checkxAOD.py myAOD.pool.root &gt; myAOD.pool.root.checkfile.txt ;  
	  gzip *txt; 
	  mkdir -p                       ${OutputDestination} ; 
	  rsync -avz  *mem*             ${OutputDestination}/. ; 
	  rsync -avz ntuple*             ${OutputDestination}/. ; 
	  rsync -avz __*                 ${OutputDestination}/. ; 
	  rsync -avz *.checkfile.txt.gz  ${OutputDestination}/. ; 
	</jobTransformCmd>
	<group>TrfRecPerf</group>
	<queue>atlasrttperf</queue>
      </jobTransform>


      <jobTransform userJobId="combined_reco_mc15_ttbar_valid_13tev_25ns_mu40">
	<doc>Reco_tf runs on 13TeV collision mc ttbar 25 ns mu40</doc>
	<jobTransformJobName>combined_reco_mc15_ttbar_valid_13tev_25ns_mu40</jobTransformJobName>
	<jobTransformCmd>
	  export TRF_ECHO=1; xrdcp root://eosatlas//eos/atlas/user/a/atlaspmb/mc/mc15_13TeV.110401.PowhegPythia_P2012_ttbar_nonallhad.recon.RDO.e4032_s2608_s2183_r7011/RDO.06336725._000001.pool.root.1 RDO.06336725._000001.pool.root.1 ;  Reco_tf.py --inputRDOFile RDO.06336725._000001.pool.root.1 --maxEvents 100 --outputESDFile myESD.pool.root --outputAODFile myAOD.pool.root --preExec='from PerfMonComps.PerfMonFlags import jobproperties as pmjp;pmjp.PerfMonFlags.doPostProcessing=True;pmjp.PerfMonFlags.doSemiDetailedMonitoringFullPrint=True;rec.doTrigger=False;'  --ignoreErrors 'True' --conditionsTag=OFLCOND-RUN12-SDR-25 | tee  __log.txt; 
	  echo $? &gt;  __exitcode ; 
	  touch __done ;
	  grep  -i "Reco_tf" jobReport.txt  | head -n1 | awk -F\" '{print $2}' &gt; __command.sh;
	  for f in ntuple*.pmon.gz; do if [ -f "$f" ]; then tar xf $f "*.pmonsd.*" ; fi; done ; 
	  checkxAOD.py myESD.pool.root &gt; myESD.pool.root.checkfile.txt ; 
	  checkxAOD.py myAOD.pool.root &gt; myAOD.pool.root.checkfile.txt ;  
	  export userJobId="combined_reco_mc15_ttbar_valid_13tev_25ns_mu40"; 
	  export headDir="/afs/cern.ch/atlas/project/pmb/new_pmb/archive/custom";
	  export OutputDestination=${headDir}/`date +'%d/%m/%Y'`/`echo ${AtlasBuildBranch}`/`basename $ROOTSYS`/${userJobId}; 
	  gzip *txt; 
	  mkdir -p                       ${OutputDestination} ; 
	  rsync -avz  *mem*             ${OutputDestination}/. ; 
	  rsync -avz ntuple*             ${OutputDestination}/. ; 
	  rsync -avz __*                 ${OutputDestination}/. ; 
	  rsync -avz *.checkfile.txt.gz  ${OutputDestination}/. ; 
	</jobTransformCmd>
	<group>TrfRecPerf</group>
	<queue>atlasrttperf</queue>
      </jobTransform>




    
    </jobList>

    <jobGroups>
      <jobGroup name="TrfRecPerf" parent="Transform">
	<!-- keep everything which is not huge -->
	<keepFilePattern>*.checkfile.txt</keepFilePattern>
	<keepFilePattern>*.pmon.gz</keepFilePattern>
	<keepFilePattern>*log*</keepFilePattern>
	<keepFilePattern>*mem*</keepFilePattern>
	<keepFilePattern>*exitcode*</keepFilePattern>
	<keepFilePattern>*checkfile*</keepFilePattern>
	<keepFilePattern>*.xml</keepFilePattern>
	<keepFilePattern>*.py</keepFilePattern>
	<keepFilePattern>*.pdf</keepFilePattern>
	<keepFilePattern>*.txt</keepFilePattern>
	<keepFilePattern>*.png</keepFilePattern>
	<keepFilePattern>*.out</keepFilePattern>
	<keepFilePattern>*.ascii</keepFilePattern>
	<keepFilePattern>last*</keepFilePattern>
	<keepFilePattern>*pickle</keepFilePattern>
	<keepFilePattern>jobReport*</keepFilePattern>
	<keepFilePattern>runargs*</keepFilePattern>
	<keepFilePattern>ntuple*perfmon*</keepFilePattern>
	<keepFilePattern>pmb-callgrind*log</keepFilePattern>
	<keepFilePattern>callgrind*bz2</keepFilePattern>
	<keepFilePattern>log.RAWtoESD</keepFilePattern>
	<keepFilePattern>log.ESDtoAOD</keepFilePattern>
	<keepFilePattern>log.AODtoDAOD</keepFilePattern>

      </jobGroup>
      
    </jobGroups>
    
  </rtt>
</unifiedTestConfiguration>
