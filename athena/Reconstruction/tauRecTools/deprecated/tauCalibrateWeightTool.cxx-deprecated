/********************************************************************
(depreciated!)

NAME:     tauCalibrateWeightTool.cxx
PACKAGE:  offline/Reconstruction/tauRec

AUTHORS:  M.Heldmann
CREATED:  March 22, 2005
MODIFIED: July 15, 2005 ( Include pT dependent correction )
23/10/2006 - (AK) fixing some compilation warnings (unused parameter)
18/04/2007 - (AK) fixing some compilation warnings (unused parameter)
29/06/2007 - (SL) fixing some compilation warnings
13/12/2008 - (AK) change to extrapolation of TP instead of Track+code cleaning
16/03/2010 - (AK) use the cell id instead of the pointer
17/03/2010 - (AK) change to P4Helpers
14/12/2011 - (FF) change to use tau axis  and numTrack (not seedCalo_)
 ********************************************************************/
#include "tauRecTools/TauEventData.h"
#include "tauEvent/TauCommonDetails.h"
#include "CaloEvent/CaloCluster.h"
#include "CaloEvent/CaloCell.h"
#include "AtlasDetDescr/AtlasDetectorID.h"
#include "CaloIdentifier/CaloID.h"
#include "CaloGeoHelpers/CaloSampling.h"

#include "CLHEP/Units/SystemOfUnits.h"

// INCLUDE GAUDI HEADER FILES:
#include "GaudiKernel/Property.h"
#include "AIDA/IHistogram1D.h"

#include <algorithm> 
#include <math.h>

#include "FourMomUtils/P4Helpers.h"
#include "FourMom/P4EEtaPhiM.h"

#include "CaloInterface/IHadronicCalibrationTool.h"
#include "TF1.h"

#include "tauCalibrateWeightTool.h"
/********************************************************************/

tauCalibrateWeightTool::tauCalibrateWeightTool(const std::string& name) :
    TauRecToolBase(name),
    m_calibrateType( tauCalibrateWeightTool::calCells ),
    m_caloWeightTool(this),
    m_emid(0),
    m_tileid(0),
    m_cellWeightTool("CellWeightTool2004"),
    m_applyCellWeightEM(true),
    m_applyCellWeightHad(true),
    m_applyPtEtaCorrFactors(true),
    m_validCaloWeightTool(true),
    m_doEtaInterpolation(false),
    m_cellCone(0.4)
{
    declareProperty( "calibrateType", m_calibrateType );
    // Calibration Tool 
    declareProperty("CellWeightTool",m_cellWeightTool);
    declareProperty("ApplyCellWeightEM", m_applyCellWeightEM);
    declareProperty("ApplyCellWeightHad", m_applyCellWeightHad);
    declareProperty("ApplyPtEtaCorrFactors", m_applyPtEtaCorrFactors);
    declareProperty("pTNumberOfBins", m_nptbins );
    declareProperty("etaNumberOfBins", m_netabins );

    declareProperty("pTPoints",m_ptpoints=std::vector<float>(10,0));
    declareProperty("etaPoints",m_etapoints=std::vector<float>(10,0));
    declareProperty("pTetaCorrectionsNtr1",m_ptetacorrectionsntr1=std::vector<float>(100,0));
    declareProperty("pTetaCorrectionsNtr23",m_ptetacorrectionsntr23=std::vector<float>(100,0));

    declareProperty("FudgeFactor",m_fudge=1);
    declareProperty("DoEtaInterpolation", m_doEtaInterpolation);
    declareProperty("CellCone",m_cellCone);
    declareProperty("CaloWeightTool",m_caloWeightTool);
}

tauCalibrateWeightTool::~tauCalibrateWeightTool()
{ 
}

StatusCode tauCalibrateWeightTool::initialize()
{ 
    StatusCode sc;
    ATH_MSG_INFO( "Calibrating using fitted weights. " );

    // retrieve all helpers from det store
    sc = detStore()->retrieve(m_emid);
    if (sc.isFailure()) {
        ATH_MSG_ERROR( "Unable to retrieve LArEM_ID helper from DetectorStore" );
        return sc;
    }

    sc = detStore()->retrieve(m_tileid);
    if (sc.isFailure()) {
        ATH_MSG_ERROR( "Unable to retrieve TileID helper from DetectorStore" );
        return sc;
    }

    // Tool service
    IToolSvc* myToolSvc;
    sc = service("ToolSvc",myToolSvc);
    if ( sc.isFailure() ) {				        
        ATH_MSG_FATAL( "Tool Service not found" );
        return StatusCode::FAILURE;         
    }

    // Fetch cell weight tool
    sc = m_caloWeightTool.retrieve();
    if ( sc.isFailure() ) {
        ATH_MSG_ERROR( "Cannot find tool named <" << m_cellWeightTool << ">" );
        m_validCaloWeightTool = false;         

        return StatusCode::FAILURE;
    }
    else {
        if( m_caloWeightTool != 0 ) {
            ATH_MSG_INFO( "Will use the CaloWeightTool named: " << m_cellWeightTool );
            m_validCaloWeightTool = true; 
        }
    }

    if ( (int)m_ptpoints.size() != m_nptbins || (int)m_etapoints.size() != m_netabins ) {
        ATH_MSG_FATAL( "wrong number of points for interpolation" );
        return StatusCode::FAILURE;
    }

    for ( int i = 0; i < m_nptbins - 1; ++i ) {
        if ( m_ptpoints[i] >= m_ptpoints[i+1]) {
            ATH_MSG_FATAL( "Correction factor coordinates must be ordered in Pt and unique" );
            return StatusCode::FAILURE;
        }
    }
    m_ptpoints.push_back(0);     //makes the boundary conditions easyer to handle

    for ( int i = 0; i < m_netabins - 1; ++i ) {
        if ( m_etapoints[i] >= m_etapoints[i+1]) {
            ATH_MSG_FATAL( "Correction factor coordinates must be ordered in eta and unique" );
            return StatusCode::FAILURE;
        }
    }
    m_etapoints.push_back(0);

    if ( (int)m_ptetacorrectionsntr1.size() != (m_nptbins * m_netabins) ) {
        ATH_MSG_FATAL( "Wrong number of correction factors for 1 Track" );
        return StatusCode::FAILURE;
    }

    if ( (int)m_ptetacorrectionsntr23.size() != (m_nptbins * m_netabins) ) {
        ATH_MSG_FATAL( "Wrong number of correction factors for 2 and 3 Tracks" );
        return StatusCode::FAILURE;
    }

    return StatusCode::SUCCESS;
}

/********************************************************************/
StatusCode tauCalibrateWeightTool::execute(xAOD::TauJet&)
{ 
	/*
	 * FF: March 2014
	 * This Tool is not migrated yet to xAOD. Unclear if still needed. Only client was TauTrigger.
	 * FF will investigate.
	 *
	 *
    Analysis :: TauJet *tau = data->tau;
    Analysis :: TauCommonDetails *details = dynamic_cast<Analysis :: TauCommonDetails *>(data->details);

    // Detector identifiers
    AtlasDetectorID AtlasID;

    // Variables for sums
    double sumEM = 0;
    double sumE = 0;
    double sumAccb3 = 0;
    double sumHad = 0;
    double sumTile1 = 0;

    double sumScint = 0;
    double sumGap   = 0;

    double dR;

    // loop over all cells of the tau (placed there by the tauSeedBuilder)
    typedef NavigationToken<CaloCell,NavigationDefaults::DefaultWeight,CaloCellIDFcn> token_t;
    token_t nt;

    pTau.fillToken( nt );

    token_t::const_iterator nt_iter = nt.begin();
    token_t::const_iterator nt_end = nt.end();

    const CaloCell *cell;

    double etaSeed = pTau.eta(); //FF  details->seedCalo_eta();
    double phiSeed = pTau.phi(); //FF  details->seedCalo_phi();

    P4EEtaPhiM P4Seed( 1., etaSeed, phiSeed, 0. );	

    for ( ; nt_iter != nt_end; nt_iter++ ) {
        cell = (*nt_iter);

        // Cell ET and index for ET range
        // This is made symmetric around zero so that noise (not yet included)
        // does not produce a shift.
        double cellET = cell->et();

        CaloSampling::CaloSample calo = cell->caloDDE()->getSampling();

        // Use cells that are in DR < m_cellCone of eta,phi of jet:
        dR = P4Helpers::deltaR( P4Seed, cell->eta(), cell->phi() );

        if ( dR < m_cellCone ) {
            double calWeight = 1.;

            // Check which kind of calib tools have been selected
            // and Get calibration weight 

            if (m_validCaloWeightTool) calWeight = m_caloWeightTool->wtCell( cell ); 

            sumE += cell->e();

            switch ( calo ) {
                case CaloSampling::PreSamplerB:
                case CaloSampling::PreSamplerE:
                case CaloSampling::EMB1:
                case CaloSampling::EME1:
                case CaloSampling::EMB2:
                case CaloSampling::EME2:
                    sumEM += (m_applyCellWeightEM ? calWeight*cellET : cellET);
                    break;
                case CaloSampling::EMB3:
                    sumAccb3 += cellET;

                case CaloSampling::EME3:
                    // Only include first two EM layers in EM sum; add third to HAD
                    // Keep track of ACCB3 for cryostat correction below
                    sumHad += (m_applyCellWeightHad ? calWeight*cellET : cellET);
                    break;

                case CaloSampling::TileBar0:
                    sumTile1 += cellET;

                case CaloSampling::TileBar1:
                case CaloSampling::TileBar2:
                    sumHad += (m_applyCellWeightHad ? calWeight*cellET : cellET);
                    break;
                case CaloSampling::TileExt0:
                case CaloSampling::TileExt1:
                case CaloSampling::TileExt2:
                    sumHad += (m_applyCellWeightHad ? calWeight*cellET : cellET);
                    break;
                case CaloSampling::TileGap1:      
                    // scintillator ?
                    // Gap Scintillator is included in Gap
                    // Hence do NOT add it separately
                    // MH I don't know what's it like now .... but I guess its seperated
                    sumScint += cellET;
                case CaloSampling::TileGap2:
                case CaloSampling::TileGap3:
                    sumHad += (m_applyCellWeightHad ? calWeight*cellET : cellET);
                    sumGap += cellET;
                    break;
                case CaloSampling::HEC0:
                case CaloSampling::HEC1:
                case CaloSampling::HEC2:
                case CaloSampling::HEC3:
                    sumHad += (m_applyCellWeightHad ? calWeight*cellET : cellET);
                    break;
                case CaloSampling::FCAL0:
                case CaloSampling::FCAL1:
                case CaloSampling::FCAL2:
	        case CaloSampling::MINIFCAL0:
	        case CaloSampling::MINIFCAL1:
	        case CaloSampling::MINIFCAL2:
	        case CaloSampling::MINIFCAL3:
                case CaloSampling::Unknown:
                    break;
            }
        }         // end dR cut
        else
        {
            ATH_MSG_VERBOSE( "cell with energy " << cell->e() << " outside of cell cone" );
        }

    }         // end cell loop

    // Cryostat correction uses geometric mean of last layer of EM and
    // first layer of tile:

    if(sumAccb3<0.) sumAccb3=0.;
    if(sumTile1<0.) sumTile1=0.;

    double wtCryo = 1.;    

    if (m_validCaloWeightTool) wtCryo = m_caloWeightTool->wtCryo();
    double sumCryo = (m_applyCellWeightHad ? wtCryo*sqrt(sumAccb3*sumTile1) : sqrt(sumAccb3*sumTile1));

    // Weight fudge factor. The H1 weights are taken to be independent of
    // eta. This factor is applied to the hadronic energy to produce a
    // more uniform response.

    details->setSeedCalo_etEMCalib(sumEM);
    details->setSeedCalo_etHadCalib((sumHad+sumCryo));

    double et = details->seedCalo_etEMCalib()+details->seedCalo_etHadCalib();
    double eta = fabs( etaSeed );
    double corr = 1;

    if (m_applyPtEtaCorrFactors) {    

        ATH_MSG_VERBOSE( "energy: " << details->seedCalo_etEMCalib() << " " <<details->seedCalo_etHadCalib() << " " << sumEM <<" "<<sumHad<<" "<<sumCryo );

        int lowpt_idx = 0;
        int loweta_idx = 0;

        double lowpt_frac = 0;
        double loweta_frac = 0;

        while ( lowpt_idx < m_nptbins-1 && et > m_ptpoints[lowpt_idx+1] )
            lowpt_idx++;

        lowpt_frac = ( m_ptpoints[lowpt_idx+1] - et ) / ( m_ptpoints[lowpt_idx+1] - m_ptpoints[lowpt_idx] );   // will be >1 if et is out of bounds

        if ( lowpt_frac > 1 )
            lowpt_frac =  1;
        if( lowpt_frac < 0 ) {   //should never happen, only if ptNumberOfBins is set wrong (which is checked now)
            ATH_MSG_ERROR( "FIXME: lowpt_frac < 0 !!" );
        }

        while ( loweta_idx < m_netabins-1 && eta > m_etapoints[loweta_idx+1] )
            loweta_idx++;

        if(m_doEtaInterpolation)
            loweta_frac = ( m_etapoints[loweta_idx+1] - eta ) / ( m_etapoints[loweta_idx+1] - m_etapoints[loweta_idx] );   // will be >1 if eta is out of bounds, 
        else
            loweta_frac = 1;    

        if ( loweta_frac > 1)
            loweta_frac = 1;
        if( loweta_frac < 0 ) {    //should never happen, only if etaNumberOfBins is set wrong
            ATH_MSG_ERROR( "FIXME: loweta_frac < 0 !!" );
        }

        double coeff_matrix[2][2] = { {0, 0}, {0, 0} };

        //FF changed from seeddCalo_numTrack to numTrack
        if ( pTau.numTrack() <= 1 ) {
            coeff_matrix[0][0] = m_ptetacorrectionsntr1[lowpt_idx*m_netabins+loweta_idx];
            if( lowpt_idx < m_nptbins-1 )
                coeff_matrix[1][0] = m_ptetacorrectionsntr1[(lowpt_idx+1)*m_netabins+loweta_idx];
            if( loweta_idx < m_netabins-1 )
                coeff_matrix[0][1] = m_ptetacorrectionsntr1[lowpt_idx*m_netabins+(loweta_idx+1)];
            if( lowpt_idx < m_nptbins-1 && loweta_idx < m_netabins-1 )
                coeff_matrix[1][1] = m_ptetacorrectionsntr1[(lowpt_idx+1)*m_netabins+(loweta_idx+1)];
        } else {
            coeff_matrix[0][0] = m_ptetacorrectionsntr23[lowpt_idx*m_netabins+loweta_idx];
            if( lowpt_idx < m_nptbins-1 )
                coeff_matrix[1][0] = m_ptetacorrectionsntr23[(lowpt_idx+1)*m_netabins+loweta_idx];
            if( loweta_idx < m_netabins-1 )
                coeff_matrix[0][1] = m_ptetacorrectionsntr23[lowpt_idx*m_netabins+(loweta_idx+1)];
            if( lowpt_idx < m_nptbins-1 && loweta_idx < m_netabins-1 )
                coeff_matrix[1][1] = m_ptetacorrectionsntr23[(lowpt_idx+1)*m_netabins+(loweta_idx+1)];
        }

        corr = ( coeff_matrix[0][0] * lowpt_frac * loweta_frac ) + ( coeff_matrix[1][0] * (1-lowpt_frac) * loweta_frac );
        corr += ( coeff_matrix[0][1] * lowpt_frac * (1-loweta_frac) ) + ( coeff_matrix[1][1] * (1-lowpt_frac) * (1-loweta_frac) );

    } // end if (m_applyPtEtaCorrFactors)

    ATH_MSG_VERBOSE( "corrected energy: " << et << "*" << corr << "=" << et*corr );


    //pTau.setE( et*cosh( details->seedCalo_eta() )*corr*m_fudge );
	*/

    //return StatusCode::SUCCESS;
	// print error so that everybody knows this tool isn't working in case it is called.
	ATH_MSG_ERROR( "This Tool is not yet migrated to xAOD!" );
	return StatusCode::SUCCESS;
}

//-----------------------------------------------------------------------------
// Finalize
//-----------------------------------------------------------------------------
StatusCode tauCalibrateWeightTool :: finalize()
{
    return StatusCode :: SUCCESS;
}
