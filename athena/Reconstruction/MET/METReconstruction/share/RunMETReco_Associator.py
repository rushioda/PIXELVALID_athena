import AthenaPoolCnvSvc.ReadAthenaPool
from AthenaCommon.AthenaCommonFlags import athenaCommonFlags
from AthenaCommon.AppMgr import ServiceMgr
from AthenaCommon import CfgMgr

from RecExConfig.RecFlags import rec

from glob import glob
filelist = glob("/atlas/data1/userdata/khoo/Data16/AOD_r21/valid1.361108.PowhegPythia8EvtGen_AZNLOCTEQ6L1_Ztautau.recon.AOD.e5112_s2887_r8609/*")
from AthenaCommon.AthenaCommonFlags import athenaCommonFlags
athenaCommonFlags.FilesInput = filelist
ServiceMgr.EventSelector.InputCollections = athenaCommonFlags.FilesInput()

############################################################################
# Set up detector description for cell access

from AthenaCommon.GlobalFlags import globalflags
globalflags.DetGeo = 'atlas'
from AthenaCommon.DetFlags import DetFlags
DetFlags.detdescr.all_setOff()
DetFlags.detdescr.Calo_setOn()
if hasattr(DetFlags,'BField_on'): DetFlags.BField_setOn()
from TrkDetDescrSvc.AtlasTrackingGeometrySvc import AtlasTrackingGeometrySvc
AtlasTrackingGeometrySvc  = svcMgr.AtlasTrackingGeometrySvc

include('RecExCond/AllDet_detDescr.py')

from RecExConfig.InputFilePeeker import inputFileSummary
#print inputFileSummary
if inputFileSummary['evt_type'][0] == 'IS_DATA':
    globalflags.DataSource = 'data'
else:
    globalflags.DataSource = 'geant4'

from AthenaCommon.AlgSequence import AlgSequence
topSequence = AlgSequence()

############################################################################
# Set up an extra associator for testing
from METReconstruction.METRecoFlags import metFlags
from METReconstruction.METAssocConfig import AssocConfig, METAssocConfig

# associators = [AssocConfig('PFlowJet'),
#                AssocConfig('Muon'),
#                AssocConfig('Ele'),
#                AssocConfig('Gamma'),
#                AssocConfig('Tau'),
#                AssocConfig('Soft')]
# cfg_akt4em = METAssocConfig('NewAntiKt4EMPFlow',
#                             associators,
#                             doPFlow=True
#                             )

# metFlags.METAssocConfigs()[cfg_akt4em.suffix] = cfg_akt4em
# cfg_akt4em.associators["Tau"].OutputLevel = VERBOSE
# metFlags.METAssocOutputList().append(cfg_akt4em.suffix)

# Get the configuration directly from METRecoFlags
# Can also provide a dict of configurations or list of RecoTools or both
from METReconstruction.METAssocConfig import getMETAssocAlg
metAlg = getMETAssocAlg('METAssociation')
topSequence += metAlg

from METUtilities.METMakerConfig import getMETMakerAlg
makerAlgPF = getMETMakerAlg('AntiKt4EMPFlow',jetSelection='Default')
makerAlgPF.METName = "MET_Reco_AntiKt4EMPFlow"
#makerAlgPF.OutputLevel=VERBOSE
#ToolSvc.METMaker_AntiKt4EMPFlow.OutputLevel=VERBOSE
topSequence += makerAlgPF
makerAlgEM = getMETMakerAlg('AntiKt4EMTopo',jetSelection='Default')
makerAlgEM.METName = "MET_Reco_AntiKt4EMTopo"
topSequence += makerAlgEM

# topSequence += CfgMgr.met__METAssocTestAlg("TestMETAssocNewEMPFlow",
#                                            OutputLevel=VERBOSE,
#                                            FailOnInconsistency=True,
#                                            METMapSuffix="NewAntiKt4EMPFlow")
# topSequence += CfgMgr.met__METAssocTestAlg("TestMETAssocEMTopo",
#                                            OutputLevel=VERBOSE,
#                                            FailOnInconsistency=True,
#                                            METMapSuffix="AntiKt4EMTopo")

# from Valkyrie.JobOptCfg import ValgrindSvc
# svcMgr += ValgrindSvc( OutputLevel = INFO,
#                       ProfiledAlgs = ["METAssociation"],
#                       ProfiledIntervals = ["METAssociation.execute"])

from PerfMonComps.PerfMonFlags import jobproperties as pmon_properties
pmon_properties.PerfMonFlags.doSemiDetailedMonitoring=True

write_xAOD = True
if write_xAOD:

    # The list of output containers/maps is autogenerated and stored in metFlags
    # This jO extracts them with the appropriate formatting
    from AthenaCommon.Resilience import protectedInclude
    protectedInclude("METReconstruction/METReconstructionOutputAODList_jobOptions.py")

    svcMgr.AthenaPoolCnvSvc.PoolAttributes += [ "DEFAULT_SPLITLEVEL ='99'" ]
    from OutputStreamAthenaPool.MultipleStreamManager import MSMgr
    xaodStream = MSMgr.NewPoolRootStream( "StreamAOD", "xAOD.pool.root" )

    xaodStream.AddItem("xAOD::EventInfo#EventInfo")
    xaodStream.AddItem("xAOD::EventAuxInfo#EventInfoAux.")

    xaodStream.AddItem("xAOD::ElectronContainer#Electrons")
    xaodStream.AddItem("xAOD::ElectronAuxContainer#ElectronsAux.")

    xaodStream.AddItem("xAOD::PhotonContainer#Photons")
    xaodStream.AddItem("xAOD::PhotonAuxContainer#PhotonsAux.")

    xaodStream.AddItem("xAOD::MuonContainer#Muons")
    xaodStream.AddItem("xAOD::MuonAuxContainer#MuonsAux.")

    xaodStream.AddItem("xAOD::TauJetContainer#TauJets")
    xaodStream.AddItem("xAOD::TauJetAuxContainer#TauJetsAux.")

    xaodStream.AddItem("xAOD::JetContainer#AntiKt4EMTopoJets")
    xaodStream.AddItem("xAOD::JetAuxContainer#AntiKt4EMTopoJetsAux.")

    xaodStream.AddItem("xAOD::JetContainer#AntiKt4EMPFlowJets")
    xaodStream.AddItem("xAOD::JetAuxContainer#AntiKt4EMPFlowJetsAux.")

    xaodStream.AddItem('xAOD::MissingETAssociationMap#METAssoc_AntiKt4EMTopo')
    xaodStream.AddItem('xAOD::MissingETAuxAssociationMap#METAssoc_AntiKt4EMTopoAux.')

    xaodStream.AddItem('xAOD::MissingETAssociationMap#METAssoc_AntiKt4EMPFlow')
    xaodStream.AddItem('xAOD::MissingETAuxAssociationMap#METAssoc_AntiKt4EMPFlowAux.')

    xaodStream.AddItem('xAOD::MissingETContainer#MET_Reco_AntiKt4EMTopo')
    xaodStream.AddItem('xAOD::MissingETAuxContainer#MET_Reco_AntiKt4EMTopoAux.')

    xaodStream.AddItem('xAOD::MissingETContainer#MET_Reco_AntiKt4EMPFlow')
    xaodStream.AddItem('xAOD::MissingETAuxContainer#MET_Reco_AntiKt4EMPFlowAux.')

    xaodStream.AddItem('xAOD::MissingETContainer#MET_Truth')
    xaodStream.AddItem('xAOD::MissingETAuxContainer#MET_TruthAux.')


#from Valkyrie.JobOptCfg import ValgrindSvc
#svcMgr += ValgrindSvc( OutputLevel = VERBOSE,
#                       ProfiledAlgs = ["jetalg","METAssociation"] )

theApp.EvtMax = -1
ServiceMgr.EventSelector.SkipEvents = 0
ServiceMgr.MessageSvc.defaultLimit = 9999
