#include "GaudiKernel/ListItem.h"

#include "xAODTau/TauJetContainer.h"
#include "xAODTracking/VertexContainer.h"
#include "xAODTracking/VertexAuxContainer.h"
#include "xAODPFlow/PFOContainer.h"
#include "xAODPFlow/PFOAuxContainer.h"

#include "tauRec/TauProcessor.h"

//-----------------------------------------------------------------------------
// Constructor
//-----------------------------------------------------------------------------
TauProcessor::TauProcessor(const std::string &name,
    ISvcLocator * pSvcLocator) :
AthAlgorithm(name, pSvcLocator),
m_tauContainerName("TauJets"),
m_tauAuxContainerName("TauJetsAux."),
m_AODmode(false),
m_tools(this) //make tools private
{
    declareProperty("TauContainer", m_tauContainerName);
    declareProperty("TauAuxContainer", m_tauAuxContainerName);
    declareProperty("Tools", m_tools, "List of ITauToolBase tools");
    declareProperty("runOnAOD", m_AODmode); //AODS are input file
    declareProperty("deepCopyChargedPFOContainer", m_deep_copy_chargedPFOContainer=true);
    declareProperty("deepCopyHadronicPFOContainer", m_deep_copy_hadronicPFOContainer=true);
    declareProperty("deepCopyNeutralPFOContainer", m_deep_copy_neutralPFOContainer=true);
    declareProperty("deepCopySecVtxContainer", m_deep_copy_SecVtxContainer=true);
}

//-----------------------------------------------------------------------------
// Destructor
//-----------------------------------------------------------------------------
TauProcessor::~TauProcessor() {
}

//-----------------------------------------------------------------------------
// Initializer
//-----------------------------------------------------------------------------
StatusCode TauProcessor::initialize() {


    //ATH_MSG_INFO("FF::TauProcessor :: initialize()");

    //-------------------------------------------------------------------------
    // No tools allocated!
    //-------------------------------------------------------------------------
    if (m_tools.size() == 0) {
        ATH_MSG_ERROR("no tools given!");
        return StatusCode::FAILURE;
    }

    StatusCode sc;
    
    //-------------------------------------------------------------------------
    // Allocate tools
    //-------------------------------------------------------------------------
    ToolHandleArray<ITauToolBase> ::iterator itT = m_tools.begin();
    ToolHandleArray<ITauToolBase> ::iterator itTE = m_tools.end();
    ATH_MSG_INFO("List of tools in execution sequence:");
    ATH_MSG_INFO("------------------------------------");

    unsigned int tool_count = 0;

    for (; itT != itTE; ++itT) {
        sc = itT->retrieve();
        if (sc.isFailure()) {
            ATH_MSG_WARNING("Cannot find tool named <" << *itT << ">");
        } else {
            ++tool_count;
            ATH_MSG_INFO((*itT)->type() << " - " << (*itT)->name());
	    //If you want to utlize TauCandidate In Tools, 
	    //decalre TauCandidate in your class, and pass its address
	    //to function below
	    (*itT)->setTauEventData(&m_data);
        }
    }
    ATH_MSG_INFO(" ");
    ATH_MSG_INFO("------------------------------------");

    if (tool_count == 0) {
        ATH_MSG_ERROR("could not allocate any tool!");
        return StatusCode::FAILURE;
    }

    ///////////////////////////////////////////////////////////////////////////

    return StatusCode::SUCCESS;
}

//-----------------------------------------------------------------------------
// Finalizer
//-----------------------------------------------------------------------------
StatusCode TauProcessor::finalize() {
    return StatusCode::SUCCESS;
}

//-----------------------------------------------------------------------------
// Execution
//-----------------------------------------------------------------------------
StatusCode TauProcessor::execute() {
  
    StatusCode sc;
    m_data.clear();

    if(m_AODmode){
      //-------------------------------------------------------------------------
      // In AODMode, deep copy all PFOs BEFORE reading in tau
      //-------------------------------------------------------------------------
      if(m_deep_copy_SecVtxContainer){
      	xAOD::VertexContainer* pSecVtxContainer(0);
      	xAOD::VertexAuxContainer* pSecVtxAuxContainer(0);
      	xAOD::Vertex* v(0);
      	ATH_CHECK(deepCopy(pSecVtxContainer, pSecVtxAuxContainer, v, "TauSecondaryVertices"));
      }

      if(m_deep_copy_neutralPFOContainer){
      	xAOD::PFOContainer* neutralPFOContainer(0);
      	xAOD::PFOAuxContainer* neutralPFOAuxStore(0);
      	xAOD::PFO* p(0);
      	//container name hard-coded, but configurable in tool where objects are created in core reco
      	ATH_CHECK(deepCopy(neutralPFOContainer, neutralPFOAuxStore, p, "TauNeutralParticleFlowObjects"));
      }

      if(m_deep_copy_hadronicPFOContainer){
      	xAOD::PFOContainer* hadronicPFOContainer(0);
      	xAOD::PFOAuxContainer* hadronicPFOAuxStore(0);
      	xAOD::PFO* p(0);
      	//container name hard-coded, but configurable in tool where objects are created in core reco
      	ATH_CHECK(deepCopy(hadronicPFOContainer, hadronicPFOAuxStore, p, "TauHadronicParticleFlowObjects"));
      }

      if(m_deep_copy_chargedPFOContainer){
      	xAOD::PFOContainer* chargedPFOContainer(0);
      	xAOD::PFOAuxContainer* chargedPFOAuxStore(0);
      	xAOD::PFO* p(0);
      	//container name hard-coded, but configurable in tool where objects are created in core reco
      	ATH_CHECK(deepCopy(chargedPFOContainer, chargedPFOAuxStore, p, "TauChargedParticleFlowObjects"));
      }
      //-------------------------------------------------------------------------
      // End pre-tau reading operations
      //-------------------------------------------------------------------------
    }


    const xAOD::TauJetContainer*     pContainerOriginal(0);
    const xAOD::TauJetAuxContainer*     pAuxContainerOriginal(0);

    //-------------------------------------------------------------------------
    // retrieve Tau Containers from StoreGate
    //-------------------------------------------------------------------------
    sc = evtStore()->retrieve(pContainerOriginal, m_tauContainerName);
    if (sc.isFailure()) {
      if (m_AODmode) {
        // don't exit Athena if there is no Tau Container in (D)AODs when running in AOD mode
        // just exit TauProcessor
        // reason: somebody might use slimmed (D)AODs, where not needed containers are not present
        ATH_MSG_WARNING("Failed to retrieve " << m_tauContainerName << "! Will exit TauProcessor now!!");
        return StatusCode::SUCCESS;
      }
      else {
        ATH_MSG_FATAL("Failed to retrieve " << m_tauContainerName);
        return StatusCode::FAILURE;
      }
    } 

    sc = evtStore()->retrieve(pAuxContainerOriginal, m_tauAuxContainerName);
    if (sc.isFailure()) {
      if (m_AODmode) {
        // don't exit Athena if there is no Tau AuxContainer in (D)AODs when running in AOD mode
        // just exit TauProcessor
        // reason: somebody might use slimmed (D)AODs, where not needed containers are not present
        ATH_MSG_WARNING("Failed to retrieve " << m_tauAuxContainerName << "! Will exit TauProcessor now!!");
        return StatusCode::SUCCESS;
      }
      else {
        ATH_MSG_FATAL("Failed to retrieve " << m_tauAuxContainerName);
        return StatusCode::FAILURE;
      }
    } 

    xAOD::TauJetContainer* pContainer = const_cast<xAOD::TauJetContainer*> (pContainerOriginal);
    xAOD::TauJetAuxContainer* pAuxContainer = const_cast<xAOD::TauJetAuxContainer*> (pAuxContainerOriginal);

    if(m_AODmode){
      pContainer=0;
      pAuxContainer=0;
      xAOD::TauJet* tau(0);
      ATH_CHECK(deepCopy(pContainer, pAuxContainer, tau, m_tauContainerName, m_tauAuxContainerName));
    }

    m_data.xAODTauContainer = pContainer;
    m_data.tauAuxContainer = pAuxContainer;

    //-------------------------------------------------------------------------
    // Initialize tools for this event
    //-------------------------------------------------------------------------
    ToolHandleArray<ITauToolBase> ::iterator itT = m_tools.begin();
    ToolHandleArray<ITauToolBase> ::iterator itTE = m_tools.end();
    for (; itT != itTE; ++itT) {
        sc = (*itT)->eventInitialize();
        if (sc != StatusCode::SUCCESS)
            return StatusCode::FAILURE;
    }

    ////////////////////////////////////////////////////////

    //loop over taus
    xAOD::TauJetContainer::iterator tau_it  = pContainer->begin();
    xAOD::TauJetContainer::iterator tau_end = pContainer->end();
    
    for(; tau_it != tau_end; ++tau_it) {
        
        //-----------------------------------------------------------------
        // set tau candidate data for easy handling
        //-----------------------------------------------------------------

        //-----------------------------------------------------------------
        // Process the candidate
        //-----------------------------------------------------------------
        ToolHandleArray<ITauToolBase>::iterator itT = m_tools.begin();
        ToolHandleArray<ITauToolBase>::iterator itTE = m_tools.end();

        //-----------------------------------------------------------------
        // Loop stops when Failure indicated by one of the tools
        //-----------------------------------------------------------------
        for (; itT != itTE; ++itT) {
            ATH_MSG_VERBOSE("Invoking tool " << (*itT)->name());

            sc = (*itT)->execute(**tau_it);

            if (sc.isFailure())
                break;
        }

        if (sc.isSuccess()) {
          
            ATH_MSG_VERBOSE("The tau candidate has been modified");

        } else if (!sc.isSuccess()) {
            //TODO:cleanup of EndTools not necessary??
            //keep this here for future use (in case more than one seeding algo exist)
            /*
            ToolHandleArray<ITauToolBase> ::iterator p_itT1 = m_tools.begin();
            for (; p_itT1 != p_itT; ++p_itT1)
                (*p_itT1)->cleanup(&m_data);
            (*p_itT1)->cleanup(&m_data);
             */
            //delete m_data.tau;
        } else  {
            //delete m_data.tau;
            }
    }



    //-------------------------------------------------------------------------
    // Finalize tools for this event
    //-------------------------------------------------------------------------

    itT = m_tools.begin();
    itTE = m_tools.end();
    for (; itT != itTE; ++itT) {
        sc = (*itT)->eventFinalize();
        if (sc != StatusCode::SUCCESS)
            return StatusCode::FAILURE;
    }


    ///////////////////////////////////////////////////////
    // locking of containers is moved to separate tau tool

    return StatusCode::SUCCESS;
}
