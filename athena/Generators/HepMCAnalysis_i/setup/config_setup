#!/bin/bash

# Load common settings for all tests ---------------
source config/general_settings

echo
TESTLIST=`cd config && ls *.test | cut -d. -f1`
NRTT=`ls config/*.test | wc -l`
echo "found $NRTT RTT tests"
i=0
for JID in $TESTLIST
  do
    source config/$JID.test
    if [[ $enable != 1 ]]
    then
	echo "$JID test is disabled"
	continue
    fi
    i=$((i+1))
done
echo "${i}/${NRTT} RTT tests are enabled"

echo
echo "Generating HepMCAnalysis jobOptions python scripts for postInclude..."
for JID in $TESTLIST
  do
    source config/$JID.test
    if [[ $enable != 1 ]]
    then
	continue
    fi

    cp setup/models/jobOptions_skelethon.py share/RTTJO/HepMCAnalysisJO_${JID}.py
    sed -i "s/file.root/RTT_${JID}.root/" share/RTTJO/HepMCAnalysisJO_$JID.py

    for an in $analist
    do
	sed -i "/myHepMCAnalysis = HepMCAnalysis_i/ a myHepMCAnalysis.${an}=True" share/RTTJO/HepMCAnalysisJO_$JID.py
    done
done
echo
echo "Generating RTT tests xml configuration file..."
echo "HepMCAnalysis_i_TestConfiguration.xml"
cp setup/models/TestConfiguration_skelethon.xml setup/temp.xml
skelfile=setup/temp.xml

for JID in $TESTLIST
  do
    source config/$JID.test
    if [[ $enable != 1 ]]
    then
	continue
    fi

    echo "setup $JID test"
    
#newline
    sed -i "/<\/jobList>/ i  \

" $skelfile
    sed -i "/<\/jobList>/ i \ \ \ \ \ \ <!-- $JID RTT Test -->" $skelfile
    sed -i "/<\/jobList>/ i \ \ \ \ \ \ <jobTransform userJobId=\"$JID\">" $skelfile
    sed -i "/<\/jobList>/ i \ \ \ \ \ \ \ \ <doc>$jobdescr</doc>" $skelfile
    sed -i "/<\/jobList>/ i \ \ \ \ \ \ \ \ <jobTransformJobName>$JID</jobTransformJobName>" $skelfile
    sed -i "/<\/jobList>/ i \ \ \ \ \ \ \ \ <jobTransformCmd>" $skelfile
#    sed -i "/<\/jobList>/ i \ \ \ \ \ \ \ \ \ \ JOBOPTSEARCHPATH=${josearchpath}:\$JOBOPTSEARCHPATH Generate_trf.py ecmEnergy=${ecm}. runNumber=${runnumber} firstEvent=1 maxEvents=${nevents} randomSeed=\$RANDOM jobConfig=$jobconf outputEVNTFile=EVNT.$JID.root postInclude=HepMCAnalysisJO_${JID}.py" $skelfile
    generatecommand=`./setup/gencmd $JID`
    sed -i "/<\/jobList>/ i \ \ \ \ \ \ \ \ \ \ $generatecommand" $skelfile
    sed -i "/<\/jobList>/ i \ \ \ \ \ \ \ \ </jobTransformCmd>" $skelfile
    sed -i "/<\/jobList>/ i \ \ \ \ \ \ \ \ <group>HepMCAnalysis_i</group>" $skelfile
    sed -i "/<\/jobList>/ i \ \ \ \ \ \ \ \ <queue>${batchqueue}</queue>" $skelfile
    sed -i "/<\/jobList>/ i \ \ \ \ \ \ \ \ <keepFilePattern> *.log </keepFilePattern>" $skelfile
    sed -i "/<\/jobList>/ i \ \ \ \ \ \ \ \ <keepFilePattern info=\"monitored root file\" displayColor=\"green\" > RTT_${JID}.root </keepFilePattern>" $skelfile
    sed -i "/<\/jobList>/ i \ \ \ \ \ \ \ \ <keepFilePattern info=\"jobOptions for HepMCAnalysis_i\" > HepMCAnalysisJO_$JID.py </keepFilePattern>" $skelfile
#    sed -i "/<\/jobList>/ i \ \ \ \ \ \ \ \ <keepFilePattern> </keepFilePattern>" $skelfile
    sed -i "/<\/jobList>/ i \ \ \ \ \ \ \ \ <auxFilePattern> HepMCAnalysisJO_$JID.py </auxFilePattern>" $skelfile
    sed -i "/<\/jobList>/ i \ \ \ \ \ \ \ \ <test>" $skelfile
    sed -i "/<\/jobList>/ i \ \ \ \ \ \ \ \ \ \ <modulename>RttLibraryTools</modulename>" $skelfile
    sed -i "/<\/jobList>/ i \ \ \ \ \ \ \ \ \ \ <testname>DCubeRunner</testname>" $skelfile
#    sed -i "/<\/jobList>/ i \ \ \ \ \ \ \ \ \ \ <outputFile></outputFile>" $skelfile
    sed -i "/<\/jobList>/ i \ \ \ \ \ \ \ \ \ \ <arg>" $skelfile
    sed -i "/<\/jobList>/ i \ \ \ \ \ \ \ \ \ \ \ \ <argname>DCubeCfg</argname>" $skelfile
    sed -i "/<\/jobList>/ i \ \ \ \ \ \ \ \ \ \ \ \ <argvalue>HepMCAnalysis_i_${JID}_dcube_cfg.xml</argvalue>" $skelfile
    sed -i "/<\/jobList>/ i \ \ \ \ \ \ \ \ \ \ </arg>" $skelfile
    sed -i "/<\/jobList>/ i \ \ \ \ \ \ \ \ \ \ <arg>" $skelfile
    sed -i "/<\/jobList>/ i \ \ \ \ \ \ \ \ \ \ \ \ <argname>DCubeRef</argname>" $skelfile
    sed -i "/<\/jobList>/ i \ \ \ \ \ \ \ \ \ \ \ \ <argvalue>RTT_${JID}_reference.root</argvalue>" $skelfile
    sed -i "/<\/jobList>/ i \ \ \ \ \ \ \ \ \ \ </arg>" $skelfile
    sed -i "/<\/jobList>/ i \ \ \ \ \ \ \ \ \ \ <arg>" $skelfile
    sed -i "/<\/jobList>/ i \ \ \ \ \ \ \ \ \ \ \ \ <argname>DCubeMon</argname>" $skelfile
    sed -i "/<\/jobList>/ i \ \ \ \ \ \ \ \ \ \ \ \ <argvalue>RTT_${JID}.root</argvalue>" $skelfile
    sed -i "/<\/jobList>/ i \ \ \ \ \ \ \ \ \ \ </arg>" $skelfile
    sed -i "/<\/jobList>/ i \ \ \ \ \ \ \ \ \ \ <keepFilePattern> DCube-RTT_${JID}_reference.root/dcubelog.php </keepFilePattern>" $skelfile
    sed -i "/<\/jobList>/ i \ \ \ \ \ \ \ \ \ \ <keepFilePattern> DCube-RTT_${JID}_reference.root/RTT_${JID}.root.dcube.xml.php </keepFilePattern>" $skelfile
    sed -i "/<\/jobList>/ i \ \ \ \ \ \ \ \ </test>" $skelfile
    sed -i "/<\/jobList>/ i \ \ \ \ \ \ </jobTransform>" $skelfile
#newline
    sed -i "/<\/jobList>/ i  \

" $skelfile

done

echo
echo "validating HepMCAnalysis_i_TestConfiguration.xml configuration file..."
python /afs/cern.ch/user/r/rtt/public/validateXML.py setup/temp.xml
#python /afs/cern.ch/user/r/rtt/public/validateXML.py test/HepMCAnalysis_i_TestConfiguration.xml

#for each test, run the Generate_trf generation for few events, produce the reference files
echo
echo "Generating dcube xml configuration files from reference files..."
dcube.py --version
if [[ $? != 0 ]]
then
    echo "dcube.py not found, setup atlas sofware and run again"
    exit
fi

for JID in $TESTLIST
  do
    source config/$JID.test
    if [[ $enable != 1 ]]
    then
	continue
    fi

    #use the reference root file in the RTT reference dir
    if [[ ! -e reference/RTT_${JID}_reference.root ]]
    then
	echo "reference not found for $JID test, run reference generation first"
	continue
    fi

    rm dcube/HepMCAnalysis_i_${JID}_dcube_cfg.xml >& /dev/null
    dcube.py -g -c dcube/HepMCAnalysis_i_${JID}_dcube_cfg.xml -r reference/RTT_${JID}_reference.root -f 0.001 -w 0.01 -t KS >& /dev/null #-t KS,chi2 not a valid option
    if [[ $? != 0 ]]
    then
	echo "Error in dcube configuration file generation, please check dcube.log file for details"
	exit
    fi
    rm dcube.log

    #add chi2 test, (bbb test not working)
    #sed -i "s/\"KS\"/\"KS,chi2\"/" dcube/HepMCAnalysis_i_${JID}_dcube_cfg.xml
done

#filter bad histograms
sed -i '/Z_0_Z_eta_prop/ d' dcube/HepMCAnalysis_i/HepMCAnalysis_i_Herwigpp*.xml

echo
echo "Running dcube self consistency test..."
mkdir dcube_test
for JID in $TESTLIST
  do
    source config/$JID.test
    if [[ $enable != 1 || ! -e reference/RTT_${JID}_reference.root ]]
    then
	continue
    fi
    mkdir dcube_test/$JID
    dcube.py --install build --branch devval --project AtlasProduction -c dcube/HepMCAnalysis_i_${JID}_dcube_cfg.xml -x dcube_test/$JID/$JID.xml reference/RTT_${JID}_reference.root >& /dev/null
    if [[ $? != 0 ]]
    then
	echo "self consistency dcube test failed for $JID, please check dcube.log file for details"
	exit
    fi
    grep "STATUS: OK" dcube.log >& /dev/null
    if [[ $? != 0 ]]
    then
	echo "self consistency dcube test failed for $JID, please check dcube.log file for details"
	exit
    fi

    rm -r dcube_test/$JID
    rm dcube.log
done
rmdir dcube_test
echo "dcube self consistency test passed"
echo
echo
echo "To install new TestConfiguration file:"
echo "cp setup/temp.xml test/HepMCAnalysis_i_TestConfiguration.xml"
echo "commit modifications"
echo "make a new tag"
