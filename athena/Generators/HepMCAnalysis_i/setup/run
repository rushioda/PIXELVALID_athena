#!/bin/bash

if [[ -z $INPUT_PREFIX ]]
    then
    INPUT_PREFIX=`pwd`
fi

if [[ -z $ITERATION ]]
    then
    ITERATION=local
fi


if [ -z $1 ]
    then
    echo "usage:"
    echo "$0 <process> [<events per job>] [valgrind]"
    echo "specify number of events and valgrind to run memeory check"
    echo "available processes are:"
    cd ${INPUT_PREFIX}/config
    ls *.test | cut -d. -f1
    exit -1
fi

JID=$1

if [[ ! -e ${INPUT_PREFIX}/config/$JID.test ]]
then
    echo "configuration file for process $JID not found in config/"
    echo "available processes are:"
    cd ${INPUT_PREFIX}/config
    ls *.test | cut -d. -f1
    exit -1
fi

source ${INPUT_PREFIX}/config/general_settings
source ${INPUT_PREFIX}/config/$JID.test

if [ ! -z $2 ]
    then
    nevents=$2
fi

valgrind="n"
if [ ! -z $3 ]
    then
    if [[ $3 == "valgrind" ]]
    then
	valgrind="y"
	echo "performing memory check with valgrind"
    else
	echo "invalid option $3, to perform memory check specify \"valgrind\""
	exit
    fi
fi

echo "Job segment number $ITERATION"
echo "Running $nevents events per job"

PostJoFile=HepMCAnalysisJO_$JID.py
generatecommand="`${INPUT_PREFIX}/setup/gencmd $JID $nevents $3`"

#run in current directory
mkdir run >& /dev/null
mkdir run/$JID >& /dev/null
mkdir run/$JID/job_${ITERATION} >& /dev/null
rundir=run/$JID/job_${ITERATION}
echo "running reference files production"
echo "Output directory:" ${INPUT_PREFIX}/out/$JID/

cp ${INPUT_PREFIX}/share/RTTJO/$PostJoFile $rundir;
cd $rundir;
  
tmpRnd=$RANDOM

echo "check log file:"
echo "$rundir/${JID}_${ITERATION}.log"
   
echo $generatecommand
eval $generatecommand >& ${JID}_${ITERATION}.log

#save output
mkdir ${INPUT_PREFIX}/out >& /dev/null
mkdir ${INPUT_PREFIX}/out/$JID >& /dev/null
mkdir ${INPUT_PREFIX}/out/$JID/root >& /dev/null
mkdir ${INPUT_PREFIX}/out/$JID/log >& /dev/null

cp ${JID}_${ITERATION}.log ${INPUT_PREFIX}/out/$JID/log
rootfile=RTT_${JID}.root
cp ${rootfile} ${INPUT_PREFIX}/out/$JID/root/${rootfile%.root}_${ITERATION}.root

#cleanup
cd ..
rm -r job_${ITERATION}
