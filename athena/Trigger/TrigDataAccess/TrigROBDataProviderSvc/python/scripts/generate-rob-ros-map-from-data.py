#!/usr/bin/env python

# Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
#
# author: Werner Wiedenmann <Werner.Wiedenmann@cern.ch>
#
import sys
import os
import datetime

def random(hits, n):
  """Places all ROB hits randomly in 'n' ROSs.

  This function will take the hits found in the list given as first parameter
  and will randomly place all ROB identifiers over the 'n' available ROSs as
  defined by the second parameter (which, btw, defaults to 1).
  """
  from random import randint,seed
  
  seed(0) # make it random, but no so random!
  retval = {}
  for h in hits: retval[h] = randint(1,n)
  return retval

def my_conf(argv):
  """Runs the dumping routines"""
  import logging 
  from EventApps import myopt

  option = {}
  option['ignore'] = {'short': 'v', 'arg': True,
                      'default': '0x007[3589abc].+|0x007[67]0001',
                      'description': 'A (python) regular expression of ROB hexadecimal numbers to ignore when making the robmap list. The comparision is done on a string basis, as a result of parsing each hit in a 0x%08x printf-like format'}
  
  option['verbosity'] = {'short': 'V', 'arg': True,
                         'default': logging.INFO,
                         'description': 'From which level to print system messages [%d, %d]. For details please consult the documentation of python\'s "logging" module' % (logging.NOTSET, logging.CRITICAL)}
  
  parser = myopt.Parser(extra_args=True)
  for (k,v) in option.items():
    parser.add_option(k, v['short'], v['description'], v['arg'], v['default'])
  
  if len(sys.argv) == 1:
    print parser.usage('global "%s" options:' % sys.argv[0])
    sys.exit(1)

  #process the global options
  (kwargs, extra) = parser.parse(sys.argv[1:], prefix='global "%s" options:' % sys.argv[0])

  #now the things which require global defaults
  logging.getLogger('').setLevel(kwargs['verbosity'])
  # os.environ['TDAQ_ERS_DEBUG_LEVEL'] = str(kwargs['debug'])
  import eformat

  stream = eformat.istream(extra)
  rob_list = set() 
  sys.stderr.write('Processing %s events' % len(stream))
  for event in stream:
    sys.stderr.write('.')
    sys.stderr.flush()
    for rob in event: rob_list.add(rob.source_id().code())
  sys.stderr.write('\n')

  print "# This ROB-ROS map was generated by %s" % \
      os.path.basename(sys.argv[0])
  print "# Current date and time is", datetime.datetime(1,1,1).now()
  print "#"

  keys = list(rob_list)
  keys.sort()

  # checks if we need to apply filtering...
  if len(kwargs['ignore'].strip()) != 0:
    import re
    ignore = re.compile(kwargs['ignore'].strip())
    keys = [k for k in keys if not ignore.match('0x%08x' % k)]
    
  print "# These unique identifiers were extracted from:"
  for k in extra: print "# %s" % k
  print "#"
  print "svcMgr.ROBDataProviderSvc.RobRosMapping = {"
  print "#"
  print "# ROB id   : ROS id = SubDetector Id "
  print "#"

  ros_count=0
  old_sub_det=0
  for k in keys:
    if old_sub_det != eformat.helper.SourceIdentifier(k).subdetector_id().real:
      old_sub_det = eformat.helper.SourceIdentifier(k).subdetector_id().real
      ros_count = ros_count + 1
      print "# %02i : Sub Detector = %s" % (ros_count, eformat.helper.SourceIdentifier(k).subdetector_id())
    print "  %s : %s ," % (hex(k), hex(eformat.helper.SourceIdentifier(k).subdetector_id().real))
  print "}"

if __name__ == "__main__":
  my_conf(sys.argv)
