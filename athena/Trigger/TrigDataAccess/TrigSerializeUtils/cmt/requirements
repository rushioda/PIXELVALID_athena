package TrigSerializeUtils

author Jiri Masik <Jiri.Masik@cern.ch>

# based on AthenaPoolUtilities from 
#     author RD Schaffer <R.D.Schaffer@cern.ch>
#     author Christian Arnault <arnault@lal.in2p3.fr>
#     author Kyle Cranmer <cranmer@cern.ch>
#     author Kristo Karr <Kristo.Karr@cern.ch>

use AtlasPolicy           AtlasPolicy-*
#use CLIDSvc               CLIDSvc-*          Control
#use DataModel             DataModel-*        Control

#apply_tag NEEDS_CORAL_BASE

#-----------------------------------------------------------------------------
#
# Pattern for creating pool converters
#
# apply_pattern sercnv [typesWithNamespace="..."] [multChanTypes="..."] files="..." \
#                       [extraFilesToCompile="..."]
#
#  where:
#
#   typesWithNamespace     optional list of types, used to specify the namespace.
#		           For example:  "NS1::MyType1 NS1::MyType2 NS2::MyType3"
#                          Needed for those files where the file name is the
#                          types w/o namespace.
#
#   multChanTypes          optional list of types which are CondMultChanCollections 
#
#   files                  gives the list of header files with the declarations
#		           of the data objects, i.e. the ones with the CLASS_DEF
#		           macro 
#
#   extraFilesToCompile    gives an optional list of extra files to compile into 
#                          the converter library, e.g. 
#                          extraFilesToCompile="-s=../src/myExtraDir *.cxx"
#
#     CONVENTION: there must be ONLY ONE class defined in each header file.
#
#  > With this pattern, 
#
#     + directory ../pool/src
#     + a library lib<package>SerCnv.so 
#
#     will be created for the package
#
#  > Two constituents <package>SerCnvGen and  <package>SerCnv are generated 
#    by this pattern
#
#  > Two macros can also be used to specify additional options for the serCnv
#    generator:
#
#     $(sercnv_options)             global options
#     $(<package>_sercnv_options)   options specific to this package
#
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
#
# Definitions for the sercnv generator
make_fragment sercnv.mk -header=sercnv_header.mk -trailer=sercnv_trailer.mk -dependencies

make_fragment ExampleClassSerCnv.cxx
make_fragment ExampleClassSerCnv.h
make_fragment ExampleMultChanClassSerCnv.h
make_fragment ExamplePackageSerCnv_load.cxx
make_fragment ExamplePackageSerCnv_entries.cxx
make_fragment ExamplePackageSerCnv_entries.h
make_fragment ExamplePackageSerCnv_entries_element.cxx
#make_fragment SerExampleItemList_joboptions.py
#make_fragment SerExampleItemList_joboptionsHdr.py

pattern sercnv \
  private ; \
  use TrigSerializeCnvSvc TrigSerializeCnvSvc-00-* Trigger/TrigDataAccess ; \
  use GaudiInterface   GaudiInterface-*      External ; \
  document sercnv.mk <package><libtag>SerCnvGen libtag=<libtag> <files> ; \
  library      <package><libtag>SerCnv                 "*.cxx -s=../sercnv<libtag> *.cxx <extraFilesToCompile> " ; \
  apply_pattern optdebug_library name=<package><libtag>SerCnv ; \ 
  macro	        types_with_namespace_<libtag>            " <typesWithNamespace> " ; \
  macro		mult_chan_types_                 " <multChanTypes> " ; \
  macro        sercnv_include_extras           " ../src" ; \
  include_dirs                                  " $(sercnv_include_extras) " ; \
  macro_append <package><libtag>SerCnv_dependencies    " <package><libtag>SerCnvGen " ; \
  macro_append <package><libtag>SerCnvGen_dependencies " <package> <package>Dict " ; \
  macro        sercnv_reset_stamp              " $(bin)<package>setup.make " ; \
  macro        <package><libtag>SerCnv_shlibflags      "$(componentshr_linkopts) -L$(bin) $(use_linkopts) $(use_dict_linkopts) " ; \
  macro        dummy_for_library                "<library>" ; \
  macro_append <package>_named_libraries        " <package><libtag>SerCnv " ; \
  apply_pattern generate_componentslist library=<package><libtag>SerCnv group=<group> ; \
  macro_append <package>_joboptions ' -s=../sercnv<libtag> *.py ' ; \
  macro_append install_pool_joboptions_dependencies " <package><libtag>SerCnv" ; \
  document data_installer install_pool_joboptions prefix=jobOptions "-s=../sercnv<libtag> *.py"


#-----------------------------------------------------------------------------
#
# Pattern for creating IO handers for element links
#
# apply_pattern pooliohandler [typesWithNamespace=""] [typesWithDataLinkOnly="..."] handlerFiles="..." 
#
#   where:
#
#     typesWithNamespace   optional list of types, used to specify the namespace.
#		           For example:  "NS1::MyType1 NS1::MyType2 NS2::MyType3"
#                          Needed for those files where the file name is the
#                          types w/o namespace.
#
#     handlerFiles  gives the list of header files with the declarations
#		    of the data objects, i.e. the ones with the CLASS_DEF
#		    macro 
#
#   typesWithDataLinkOnly  optional list of types for which only
#                          DataLinks should be created.  
#                           Note, ElementLink and ElementLinkVector
#                           require the class to be a subclass of DataVector, 
#                           but DataLink does not.
#
#     CONVENTION: there must be ONLY ONE class defined in each header file.
#
#  > With this pattern, 
#
#     + directory ../pool_plugins 
#     + a library lib<package>PoolIOHandler.so 
#
#     will be created for the package
#
#  > Two constituents <package>PoolIOHandlerGen and  <package>IOHandlers are generated 
#    by this pattern
#
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
#
# Definitions for the pool io handler generator

# make_fragment pooliohandler.mk -header=pooliohandler_header.mk -dependencies

# make_fragment SerExampleClassIOHandler.h
# make_fragment SerExampleClassElementLinkIOHandler.cxx
# make_fragment SerExampleClassDataLinkIOHandler.cxx
# make_fragment SerExampleClassIOHandlerHdr.cxx

# pattern pooliohandler \
#   private ; \
#   use AthenaPoolCnvSvc AthenaPoolCnvSvc-00-* Database/AthenaPOOL ; \
#   use GaudiInterface   GaudiInterface-*      External ; \
#   use DataModel        DataModel-00-*        Control ; \
#   use AtlasPOOL        AtlasPOOL-00-*        External ; \
#   use AtlasReflex      AtlasReflex-00-*      External ; \
#   use AtlasSEAL        AtlasSEAL-00-*        External ; \
#   document pooliohandler.mk <package>PoolIOHandlerGen <handlerFiles> ; \
#   macro_append types_with_namespace " <typesWithNamespace> " ; \
#   macro_append types_with_datalink_only " <typesWithDataLinkOnly> " ; \
#   apply_pattern module_generic_library name=<package>IOHandlers files= "../pool_plugins/*.cxx" ; \
#   macro_append <package>IOHandlers_dependencies " <package>PoolIOHandlerGen " ; \
#   macro        poolhdlr_reset_stamp             " $(bin)<package>setup.make " ; \
#   end_private 


private
#use AthenaKernel          AthenaKernel-*           Control
#use AtlasReflex             AtlasReflex-*              External
use TestPolicy            TestPolicy-*

#apply_pattern installed_library
#apply_pattern component_library
#library AthenaPoolUtilities SeekableCollection.cxx SeekableCollectionIterator.cxx 

apply_pattern install_runtime method=-symlink

#apply_pattern declare_runtime files="*.sql"

#apply_pattern lcg_module_register module=TrigSerializeUtils


# The following use is to get the lcgdict pattern.
# This is "hidden" behind "private" and "no_auto_imports" to keep 
# clients of IOVDbTestConditions from seeing excess dependencies
private
use AtlasReflex	     AtlasReflex-*        External -no_auto_imports

# Pattern to build the dict lib. User should create a single header
# file: <package>Dict.h which includes all other .h files. See EventInfoDict
#apply_tag no_extra_dict_deps
#apply_pattern lcgdict dict=AthenaPoolUtilities  selectionfile=selection.xml headerfiles="../AthenaPoolUtilities/AthenaPoolUtilitiesDict.h"
