       ++++++ CONTENTS ++++++

1. Vertexing tools provided by this package
2. How to use TrigVertexFitter
3. How to use TrigL2VertexFitter and TrigVertexingTool
4. Mass-constrained vertex fitting
5. Primary vertex fitting


1. TrigVertexFitter package is a factory for the following tools:

   - TrigVertexFitter this a first  prototype of the LVL2 vertex fitter 
     based on ITrigVertexFitter abstract interface. Note that this tool 
     will become obsolete soon as it will be replaced by TrigL2VertexFitter

   - TrigL2VertexFitter - an improved and extended fitter with capability of 
     mass-constrained fitting. It uses TrigL2Vertex class as input/output

   - TrigVertexingTool - a toolbox to facilitate handling of TrigL2Vertex class

   - TrigPrimaryVertexFitter - a fast algorithms for primary vertex fitting


2. How to use TrigVertexFitter: fitting Jpsi(mu mu) vertex 

   
#include "TrigInDetToolInterfaces/ITrigVertexFitter.h"
#include "CLHEP/GenericFunctions/CumulativeChiSquare.hh"

// retrieving the vertex fitting tool

ITrigVertexFitter* m_vertFitter;

StatusCode sc = toolSvc()->retrieveTool("TrigVertexFitter","TrigVertexFitter",m_vertFitter);
if ( sc.isFailure() ) {
    log << MSG::FATAL << "Unable to locate TrigVertexFitter tool " << endreq;
    return StatusCode::FAILURE;
} 

// fitting two TrigInDetTracks to a common vertex
// and evaluation of vertex mass after the fit

TrigInDetTracks *trigMuon1, * trigMuon2;

TrackInVertexList* tList=new TrackInVertexList;
tList->clear();	
tList->push_back(trigMuon1);
tList->push_back(trigMuon2);

// creating a list of particle hypothesis, i.e. both tracks are muons
// other options can be found in TrigInDetToolInterfaces/ITrigVertexFitter.h

std::vector<TrigVtx::TrigParticleName> vPH;
vPH.clear();
vPH.push_back(TrigVtx::muon);
vPH.push_back(TrigVtx::muon);

// vertex fitting

TrigVertex* pV=m_vertFitter->fit(tList,vPH);

// note that fitter creates a new TrigVertex if the fit is successful
// the new vertex owns the TrackInVertexList passed to the fitter

if(pV!=NULL)
{
  printf("Jpsi vertex Fit: x=%f y=%f z=%f\n",pV->x(),pV->y(),pV->z());
  printf("Jpsi mass = %f\n",pV->mass());
  printf("Jpsi mass pull = %f\n",(pV->mass()-3094.0)/pV->massVariance());
  double chi2prob=1.0-Genfun::CumulativeChiSquare(pV->ndof())(pV->chi2());
  printf("Chi2 probability of the fit = %f\n",chi2prob);
  printf("SigmaX = %f SigmaY = %f SigmaZ = %f\n",
		     sqrt(pV->cov()[0]),
		     sqrt(pV->cov()[2]),
		     sqrt(pV->cov()[5]));
  delete pV;
}
else delete tList;// vertex is not created and we have to delete tList 


3. How to use TrigL2VertexFitter and TrigVertexingTool: fitting Ds(phi pi) vertex with phi(KK)


#include "TrigInDetToolInterfaces/ITrigL2VertexFitter.h"
#include "TrigVertexFitter/TrigVertexingTool.h"


// retrieving tools 

StatusCode sc = toolSvc()->retrieveTool("TrigL2VertexFitter","TrigL2VertexFitter",m_L2vertFitter);
if ( sc.isFailure() ) {
    log << MSG::FATAL << "Unable to locate TrigL2VertexFitter tool " << endreq;
    return sc;
}

sc = toolSvc()->retrieveTool("TrigVertexingTool","TrigVertexingTool",m_vertexingTool);
if ( sc.isFailure() ) {
    log << MSG::FATAL << "Unable to locate TrigVertexingTool tool " << endreq;
    return sc;
} 


// creating empty TrigL2Vertex

TrigL2Vertex* pL2Ds=new TrigL2Vertex();

// adding TrigInDetTrack* to the vertex 

m_vertexingTool->addTrack((*track1),pL2Ds,Trk::kaon);
m_vertexingTool->addTrack((*track2),pL2Ds,Trk::kaon);
m_vertexingTool->addTrack((*track3),pL2Ds,Trk::pion);

// vertex fit

StatusCode sc=m_L2vertFitter->fit(pL2Ds);
			  
if(sc.isSuccess()) {
    //invariant mass calculation
    sc=m_vertexingTool->calculateInvariantMass(pL2Ds);
    if(sc.isSuccess()) {
        // estimation of Ds meson perigee parameters 
        sc=m_vertexingTool->createMotherParticle(pL2Ds);
        if(sc.isSuccess()) {
           log<<MSG::DEBUG<<"Ds created:"<<endreq;
	   log << MSG::DEBUG << "Ds particle parameters"<<endreq;
	   log << MSG::DEBUG << "d0="<<pL2Ds->m_getMotherTrack()->a0()<<
		              "  z0="<<pL2Ds->m_getMotherTrack()->z0()<<
			      "  phi0="<<pL2Ds->m_getMotherTrack()->phi0()<<
			      "  eta="<<pL2Ds->m_getMotherTrack()->eta()<<
			      "  pT="<<pL2Ds->m_getMotherTrack()->pT()<<endreq;
           // now we can create TrigVertex ("simplified" vertex) from fitted 
           // TrigL2Vertex
           TrigVertex* p_DsV=m_vertexingTool->createTrigVertex(pL2Ds);
	   if(p_DsV!=NULL){

                                log << MSG::DEBUG << "Ds vertex Fit: x= y= z=" << p_DsV->x() << " " << p_DsV->y() << " " << p_DsV->z() << endreq;
                                log << MSG::DEBUG << "Ds mass = " << p_DsV->mass() << endreq;
                                double chi2prob=1.0-Genfun::CumulativeChiSquare(p_DsV->ndof())(p_DsV->chi2());
                                log << MSG::DEBUG << "Chi2 probability of the Ds fit = " << chi2prob << endreq;
          }
	}
    }
}
delete pL2Ds;

4. Fitting vertex with a mass constraint: Ds -> phi(KK) + pi, 
   mass constraint (with phi mass) is imposed on KK pair 

TrigL2Vertex* pL2V=new TrigL2Vertex();

m_vertexingTool->addTrack((*track1),pL2V,Trk::kaon);
m_vertexingTool->addTrack((*track2),pL2V,Trk::kaon);
m_vertexingTool->addTrack((*track3),pL2V,Trk::pion);

// setting up the constraint

m_vertexingTool->setMassConstraint(pL2V,(*track1),(*track2),PHIMASS);

// mass constrained fit

StatusCode sc=m_L2vertFitter->fitWithConstraints(pL2V);


5. Primary vertex fitting

#include "TrigVertexFitter/ITrigPrimaryVertexFitter.h"


// retrieving tool 

StatusCode sc = toolSvc()->retrieveTool("TrigPrimaryVertexFitter","TrigPrimaryVertexFitter",m_primVertFitter);
if ( sc.isFailure() ) {	
    log << MSG::FATAL << "Unable to locate TrigPrimaryVertexFitter tool " << endreq;
    return sc;
}

// using the fitter
// input: a pointer to a TrigInDetTrackCollection e.g. tracks reconstructed within RoI, or selected set of tracks
// input: initial approximation of z-vertex position, accuracy of this approximation can be set via zVariance 
// property of the tool
// output: a pointer to a TrigVertex containing results of the fit: vertex position, vertex covariance , chi2 and 
// number-of-degree-of-freedom of the fit
// if the pointer is NULL it means that fit failure

TrigInDetTracks *track1, *track2;//.... *trackn

TrigInDetTrackCollection myTracks;

myTracks.push_back(track1);
myTracks.push_back(track2);
[...]
myTracks.push_back(trackn);

double myZ=0.0;

TrigVertex* pV = m_primVertFitter->fit(myTracks,myZ);

if(pV!=NULL) std::cout<<"Successful vertex fit !"<<std::endl;

