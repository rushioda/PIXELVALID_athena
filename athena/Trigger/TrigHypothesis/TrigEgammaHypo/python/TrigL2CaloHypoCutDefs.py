# Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration

# L2 Calo cut definitions for Electrons
# Ryan Mackenzie White <ryan.white@cern.ch>
# Akshay Katre
# Cuts migrated from L2CaloHypoConfig

from AthenaCommon.SystemOfUnits import GeV

from AthenaCommon.Logging import logging
log_trigegL2 = logging.getLogger( 'L2CaloCutMaps' )
class L2CaloCutMaps():
    # The following triggers were optimized in 2012 by YanPing
    # e12_loose1
    # e12_loose0
    # loose triggers above 22 GeV use e12_loose1 cut defs
    # e24_medium1 -- Higher threshold triggers use same cuts
    # tight/tight1 uses e24_medium1 cuts
    # New EF ID tunes will start with Run1 loose1,medium1,tight1 cuts
    # Cut maps are grouped by Et threshold
    # Adding vloose working points, same cuts as loose
    def __init__(self, threshold):
        ##########################
        # Et 5 GeV
        ##########################
        # e5_loose1
        ##########################
        # self.HADETthr       = [0.1738, 0.1696, 0.1318, 0.1738, 0.0548875, 0.1486, 0.1696, 0.1738, 0.157]
        # self.CAERATIOthr    = [0.57, 0.532, 0.342, 0.228, -9999., 0.304, 0.608, 0.722, -9999.]
        # self.CARCOREthr     = [0.532, 0.57, 0.646, 0.684, -9999., 0.722, 0.684, 0.722, -9999.]
        ##########################
        # e5_medium1
        #self.HADETthr       = [0.1638, 0.1596, 0.1218, 0.1638, 0.0448875, 0.1386, 0.1596, 0.1638, 0.147]
        #self.CARCOREthr     = [0.532, 0.57, 0.646, 0.684, 0.418, 0.722, 0.684, 0.722, 0.70]
        #self.CAERATIOthr    = [0.57, 0.532, 0.342, 0.228, -9999., 0.304, 0.608, 0.722, -9999.]
        # e5_tight1
        # self.HADETthr        = [0.1638, 0.1596, 0.1218, 0.1638, 0.0448875, 0.1386, 0.1596, 0.1638, 0.147]
        # self.CARCOREthr      = [0.532, 0.57, 0.646, 0.684, 0.418, 0.722, 0.684, 0.722, 0.70]
        # self.CAERATIOthr     = [0.57, 0.532, 0.342, 0.228, -9999., 0.304, 0.608, 0.722, -9999.]
        ##########################
        if(float(threshold) < 12):
            self.MapsHADETthr = {
                    'vloose': [0.2337, 0.20976, 0.1392, 0.1872, 0.1315, 0.3234, 0.384, 0.1901, 0.1901],
                    'loose': [0.2337, 0.2097, 0.1392, 0.1872, 0.1255, 0.3234, 0.3840, 0.1901, 0.1901],
                    'lhvloose': [0.2337, 0.20976, 0.1392, 0.1872, 0.1315, 0.3234, 0.384, 0.1901, 0.1901],
                    'lhloose': [0.2337, 0.2097, 0.1392, 0.1872, 0.1255, 0.3234, 0.3840, 0.1901, 0.1901],
                    'medium': [0.1872, 0.1824, 0.1392, 0.1872, 0.08196 ,0.2497, 0.384, 0.19008, 0.19008],
                    'lhmedium': [0.1872, 0.1824, 0.1392, 0.1872, 0.08196 ,0.2497, 0.384, 0.19008, 0.19008],
                    'tight': [0.1872, 0.1824, 0.1392, 0.1872, 0.06864, 0.24972, 0.31368, 0.1872, 0.168],
                    'lhtight': [0.1872, 0.1824, 0.1392, 0.1872, 0.06864, 0.24972, 0.31368, 0.1872, 0.168],
                    'mergedtight': [0.1872, 0.1824, 0.1392, 0.1872, 0.06864, 0.24972, 0.31368, 0.1872, 0.168],
                    'bloose': [0.2337, 0.2097, 0.1392, 0.1872, 0.1255, 0.3234, 0.3840, 0.1901, 0.1901],
                    }
            self.MapsCAERATIOthr = {
                    'vloose': [0.48, 0.448, 0.1295, 0.0137, -9999. ,0.0122, 0.512, 0.6073, -9999],
                    'loose': [0.48, 0.448, 0.1295, 0.0137, -9999., 0.0122, 0.512, 0.6073, -9999],
                    'lhvloose': [0.48, 0.448, 0.1295, 0.0137, -9999. ,0.0122, 0.512, 0.6073, -9999],
                    'lhloose': [0.48, 0.448, 0.1295, 0.0137, -9999., 0.0122, 0.512, 0.6073, -9999],
                    'medium': [0.48, 0.448, 0.288, 0.192, -9999., 0.0176, 0.512, 0.608, -9999.],
                    'lhmedium': [0.48, 0.448, 0.288, 0.192, -9999., 0.0176, 0.512, 0.608, -9999.],
                    'tight': [0.48, 0.448, 0.288, 0.192, -9999., 0.256, 0.512, 0.608, -9999.],
                    'lhtight': [0.48, 0.448, 0.288, 0.192, -9999., 0.256, 0.512, 0.608, -9999.],
                    'mergedtight': [-9999., -9999., -9999., -9999., -9999., -9999., -9999., -9999., -9999.],
                    'bloose': [0.48, 0.448, 0.1295, 0.0137, -9999., 0.0122, 0.512, 0.6073, -9999],
                    }
            self.MapsCARCOREthr = {
                    'vloose': [0.448, 0.48, 0.5414, 0.576, 0.352, 0.608, 0.576, 0.608, 0.55],
                    'loose': [0.6806, 0.6710, 0.6306, 0.6619, 0.4704, 0.7094, 0.7012, 0.6977, 0.6960],
                    'lhvloose': [0.448, 0.48, 0.5414, 0.576, 0.352, 0.608, 0.576, 0.608, 0.55],
                    'lhloose': [0.6806, 0.6710, 0.6306, 0.6619, 0.4704, 0.7094, 0.7012, 0.6977, 0.6960],
                    'medium': [0.448, 0.48, 0.544, 0.576, 0.352, 0.608, 0.576, 0.608, 0.598],
                    'lhmedium': [0.448, 0.48, 0.544, 0.576, 0.352, 0.608, 0.576, 0.608, 0.598],
                    'tight': [0.448, 0.48, 0.544, 0.576, 0.352, 0.608, 0.576, 0.608, 0.598],
                    'lhtight': [0.448, 0.48, 0.544, 0.576, 0.352, 0.608, 0.576, 0.608, 0.598],
                    'mergedtight': [-9999., -9999., -9999., -9999., -9999., -9999., -9999., -9999., -9999.],
                    'bloose': [0.6806, 0.6710, 0.6306, 0.6619, 0.4704, 0.7094, 0.7012, 0.6977, 0.6960],
                    }
        ##########################
        # Et 12 GeV
        ##########################
        # e12_loose1
        #AT 30-March-2012 Optimisation by Yanping:
        #self.HADETthr      = [0.04225, 0.04075, 0.04575, 0.03575, 0.05275, 0.05325, 0.05525, 0.05325, 0.04675]
        #self.CARCOREthr    = [0.8275, 0.8225, 0.7975, 0.8275, -9999., 0.8075, 0.8475, 0.8475, -9999.]
        #self.CAERATIOthr   = [0.775269, 0.735433, 0.574831, 0.513675, -9999., 0.584799, 0.776095, 0.822032, -9999.]
        #AT: this optimisation could be well propagated to all loose1 triggers with ET>12 GeV if we need to cut L2 rate further
        # e12_medium1
        #self.HADETthr       = [0.04225, 0.04075, 0.04575, 0.03575, 0.05275, 0.05325, 0.05525, 0.05325, 0.04675]
        #self.CARCOREthr     = [0.8275, 0.8225, 0.7975, 0.8275, -9999., 0.8075, 0.8475, 0.8475, -9999.]
        #self.CAERATIOthr   = [0.775269, 0.735433, 0.574831, 0.513675, -9999., 0.584799, 0.776095, 0.822032, -9999.]
        # e12_tight
        # self.HADETthr       = [0.043, 0.043, 0.043, 0.043, 0.043, 0.043, 0.043, 0.043, 0.043]
        # self.CARCOREthr     = [0.90, 0.89, 0.89, 0.89, 0.90, 0.89, 0.89, 0.89, 0.89]
        # self.CAERATIOthr    = [0.60, 0.70, 0.70, 0.75, 0.85, 0.90, 0.90, 0.90, 0.90]
        if(float(threshold) >= 12. and float(threshold) < 22):
            self.MapsHADETthr = { 
                 'vloose':  [0.0871, 0.0617, 0.0564, 0.0827, 0.0889, 0.2052, 0.1674, 0.1481, 0.1481],
                 'loose':  [0.08472, 0.05928, 0.054, 0.0803, 0.0829, 0.1932, 0.1590, 0.1384 , 0.1384],
                 'lhvloose': [0.0871, 0.0617, 0.0564, 0.0827, 0.0889, 0.2052, 0.1674, 0.1481, 0.1481],
                 'lhloose': [0.08472, 0.05928, 0.054, 0.0803, 0.0829, 0.1932, 0.1590, 0.1384 , 0.1384],
                 'medium':  [0.0588, 0.0564, 0.054, 0.048, 0.06384, 0.17868, 0.1284, 0.07536, 0.07536],
                 'lhmedium':  [0.0588, 0.0564, 0.054, 0.048, 0.06384, 0.17868, 0.1284, 0.07536, 0.07536],
                 'tight': [0.0588, 0.0564, 0.054, 0.048, 0.04368, 0.15612, 0.11064, 0.07536, 0.07536],
                 'lhtight': [0.0588, 0.0564, 0.054, 0.048, 0.04368, 0.15612, 0.11064, 0.07536, 0.07536],
                 'mergedtight': [0.0588, 0.0564, 0.054, 0.048, 0.04368, 0.15612, 0.11064, 0.07536, 0.07536],
                 'bloose':  [0.08472, 0.05928, 0.054, 0.0803, 0.0829, 0.1932, 0.1590, 0.1384 , 0.1384],
                }
            self.MapsCARCOREthr = {
                    'vloose': [0.6646, 0.6590, 0.6226, 0.6539, 0.4704, 0.6536, 0.6972, 0.6817, 0.672],
                    'loose': [0.6806, 0.6710, 0.6306, 0.6619, 0.4704, 0.6616, 0.7012, 0.6977, 0.696],
                    'lhvloose': [0.6646, 0.6590, 0.6226, 0.6539, 0.4704, 0.6536, 0.6972, 0.6817, 0.672],
                    'lhloose': [0.6806, 0.6710, 0.6306, 0.6619, 0.4704, 0.6616, 0.7012, 0.6977, 0.696],
                    'medium': [0.69896, 0.68416, 0.64368, 0.68488, 0.4704, 0.6816, 0.704, 0.6992, 0.6992],
                    'lhmedium': [0.69896, 0.68416, 0.64368, 0.68488, 0.4704, 0.6816, 0.704, 0.6992, 0.6992],
                    'tight': [0.71296, 0.69344, 0.64368, 0.69064, 0.4704, 0.7036, 0.73024, 0.7164, 0.7164],
                    'lhtight': [0.71296, 0.69344, 0.64368, 0.69064, 0.4704, 0.7036, 0.73024, 0.7164, 0.7164],
                    'mergedtight': [-9999., -9999., -9999., -9999., -9999., -9999., -9999., -9999., -9999.],
                    'bloose': [0.6806, 0.6710, 0.6306, 0.6619, 0.4704, 0.6616, 0.7012, 0.6977, 0.696],
                    }
            self.MapsCAERATIOthr = {
                    'vloose': [0.5702, 0.6063, 0.4418, 0.4257, -9999. , 0.3408, 0.5836, 0.6800, -999],
                    'loose': [0.5702, 0.6063, 0.4418, 0.4257, -9999., 0.3408, 0.5836, 0.6800, -999],
                    'lhvloose': [0.5702, 0.6063, 0.4418, 0.4257, -9999. , 0.3408, 0.5836, 0.6800, -999],
                    'lhloose': [0.5702, 0.6063, 0.4418, 0.4257, -9999., 0.3408, 0.5836, 0.6800, -999],
                    'medium': [0.636,  0.6064,  0.5552,  0.476,  -9999.,  0.5536,  0.664,  0.68 , -9999.],
                    'lhmedium': [0.636,  0.6064,  0.5552,  0.476,  -9999.,  0.5536,  0.664,  0.68 , -9999.],
                    'tight': [0.636, 0.652,  0.5552, 0.4768, -9999.,  0.6056, 0.6696, 0.7128, -9999.],
                    'lhtight': [0.636, 0.652,  0.5552, 0.4768, -9999.,  0.6056, 0.6696, 0.7128, -9999.],
                    'mergedtight': [-9999., -9999., -9999., -9999., -9999., -9999., -9999., -9999., -9999.],
                    'bloose': [0.5702, 0.6063, 0.4418, 0.4257, -9999., 0.3408, 0.5836, 0.6800, -999],
                    }
        ##########################
        # Et 22 GeV
        ##########################
        # e24_medium1 / e24_tight1
        # AT 30-March-2012 Optimisation by Yanping:
        # self.HADETthr      = [0.0256693, 0.0240023, 0.0271098, 0.0206744, 0.0211902, 0.0301758, 0.0297629, 0.0295336, 0.020514]
        # self.CARCOREthr     = [0.882167, 0.882156, 0.857124, 0.886262, 0.724005, 0.871725, 0.902082, 0.887027, 0.744103]
        # self.CAERATIOthr    = [0.83009, 0.830144, 0.794944, 0.794558, -9999, 0.794933, 0.895365, 0.904011, -9999.]
        # e24_loose1
        # self.CAERATIOthr    = [-999., -999., -999., -999., -999., -999., -999., -999., -999.]
        # self.HADETthr      = [0.0275625, 0.0259875, 0.0291375, 0.0228375, 0.0259875, 0.0391125, 0.0359625, 0.0370125, 0.0291375]
        # self.CARCOREthr = [0.819375, 0.819375, 0.800375, 0.828875, 0.7125, 0.805125, 0.843125, 0.824125, 0.700625]
        if(float(threshold) >= 22.):
             self.MapsHADETthr = {       
                 'vloose':  [0.0612, 0.0588, 0.0564, 0.0504, 0.0357, 0.072, 0.0684, 0.0696, 0.0636],
                 'loose':  [0.0588, 0.0564, 0.054, 0.048, 0.0297, 0.06, 0.06, 0.06, 0.054],
                 'lhvloose':  [0.0612, 0.0588, 0.0564, 0.0504, 0.0357, 0.072, 0.0684, 0.0696, 0.0636],
                 'lhloose':  [0.0588, 0.0564, 0.054, 0.048, 0.0297, 0.06, 0.06, 0.06, 0.054],
                 'medium': [0.0588, 0.0564, 0.054, 0.048, 0.02376, 0.06, 0.06, 0.06, 0.054],
                 'lhmedium': [0.0588, 0.0564, 0.054, 0.048, 0.02376, 0.06, 0.06, 0.06, 0.054],
                 'tight':  [0.0588, 0.0564, 0.054, 0.048, 0.02376, 0.06, 0.06, 0.06, 0.054],
                 'lhtight':  [0.0588, 0.0564, 0.054, 0.048, 0.02376, 0.06, 0.06, 0.06, 0.054],
                 'mergedtight':  [0.0588, 0.0564, 0.054, 0.048, 0.02376, 0.06, 0.06, 0.06, 0.054],
                    'bloose': [9999., 9999., 9999., 9999., 9999., 9999., 9999., 9999., 9999.],
                 }
             self.MapsCARCOREthr = {
                  'vloose': [0.6912 , 0.6808 , 0.6832 , 0.6744 , 0.5976 , 0.6416, 0.692  , 0.6848 , 0.68],
                  'loose': [0.7112, 0.6968, 0.6952, 0.6864, 0.5976, 0.6616, 0.704 , 0.7008, 0.696],
                  'lhvloose': [0.6912 , 0.6808 , 0.6832 , 0.6744 , 0.5976 , 0.6416, 0.692  , 0.6848 , 0.68],
                  'lhloose': [0.7112, 0.6968, 0.6952, 0.6864, 0.5976, 0.6616, 0.704 , 0.7008, 0.696],
                  'medium': [0.716, 0.712, 0.6952, 0.692, 0.5976, 0.6816, 0.7168, 0.7128, 0.716],
                  'lhmedium': [0.716, 0.712, 0.6952, 0.692, 0.5976, 0.6816, 0.7168, 0.7128, 0.716],
                  'tight': [0.7288, 0.7296, 0.72, 0.7048, 0.6, 0.7128, 0.7312, 0.7256, 0.7192],
                  'lhtight': [0.7288, 0.7296, 0.72, 0.7048, 0.6, 0.7128, 0.7312, 0.7256, 0.7192],
                  'mergedtight': [-9999., -9999., -9999., -9999., -9999., -9999., -9999., -9999., -9999.],
                    'bloose': [-9999., -9999., -9999., -9999., -9999., -9999., -9999., -9999., -9999.],
                  }
             self.MapsCAERATIOthr = {
                    'vloose': [-999., -999., -999., -999., -999., -999., -999., -999., -999.],
                    'loose': [-999., -999., -999., -999., -999., -999., -999., -999., -999.],
                    'lhvloose': [-999., -999., -999., -999., -999., -999., -999., -999., -999.],
                    'lhloose': [-999., -999., -999., -999., -999., -999., -999., -999., -999.],
                    'medium': [0.656, 0.66, 0.6, 0.604, -9999., 0.624, 0.664, 0.692, -9999.],
                    'lhmedium': [0.656, 0.66, 0.6, 0.604, -9999., 0.624, 0.664, 0.692, -9999.],
                    'tight': [0.72, 0.712, 0.68, 0.672, -9999., 0.68, 0.716, 0.74, -9999.],
                    'lhtight': [0.72, 0.712, 0.68, 0.672, -9999., 0.68, 0.716, 0.74, -9999.],
                    'mergedtight': [-9999., -9999., -9999., -9999., -9999., -9999., -9999., -9999., -9999.],
                    'bloose': [-9999., -9999., -9999., -9999., -9999., -9999., -9999., -9999., -9999.],
                    }

# Following is much easier, no Et dependence
# Almost no dependence on PID
class L2CaloPhotonCutMaps():
    def __init__(self, threshold):
        if(float(threshold) >= 0. and float(threshold) < 10):
            self.MapsHADETthr = {
                'loose': [0.1638, 0.1596, 0.1218, 0.1638, 0.0448875, 0.1386, 0.1596, 0.1638, 0.147],
                'medium':[0.0254625, 0.0238875, 0.0270375, 0.0207375, 0.03465, 0.0378, 0.03465, 0.0286125, 0.02625],
                'tight':[0.0254625, 0.0238875, 0.0270375, 0.0207375, 0.03465, 0.0378, 0.03465, 0.0286125, 0.02625],
                }
            self.MapsCARCOREthr = {
                'loose': [0.532, 0.57, 0.646, 0.684, 0.418, 0.722, 0.684, 0.722, 0.76],
                'medium':[0.83125, 0.719625, 0.814625, 0.83125, 0.703, 0.817, 0.83125, 0.8265, 0.719625],
                'tight':[0.83125, 0.719625, 0.814625, 0.83125, 0.703, 0.817, 0.83125, 0.8265, 0.719625],
                }
            self.MapsCAERATIOthr = {
                'loose': [-999., -999., -999., -999., -999., -999., -999., -999., -999.],
                'medium':[-999., -999., -999., -999., -999., -999., -999., -999., -999.],
                'tight':[-999., -999., -999., -999., -999., -999., -999., -999., -999.],
                }
        elif(float(threshold) >= 10. and float(threshold) < 15):
            self.MapsHADETthr = {
                'loose': [0.0359625, 0.0343875, 0.0396375, 0.0291375, 0.0501375, 0.0559125, 0.0548625, 0.0538125, 0.0469875],
                'medium':[0.0359625, 0.0343875, 0.0396375, 0.0291375, 0.0501375, 0.0559125, 0.0548625, 0.0538125, 0.0469875],
                'tight':[0.0359625, 0.0343875, 0.0396375, 0.0291375, 0.0501375, 0.0559125, 0.0548625, 0.0538125, 0.0469875],
                }
            self.MapsCARCOREthr = {
                'loose': [0.786125, 0.786125, 0.767125, 0.795625, 0.703, 0.776625, 0.819375, 0.805125, 0.681625],
                'medium':[0.786125, 0.786125, 0.767125, 0.795625, 0.703, 0.776625, 0.819375, 0.805125, 0.681625],
                'tight':[0.786125, 0.786125, 0.767125, 0.795625, 0.703, 0.776625, 0.819375, 0.805125, 0.681625],
                }
            self.MapsCAERATIOthr = {
                'loose': [-999., -999., -999., -999., -999., -999., -999., -999., -999.],
                'medium': [-999., -999., -999., -999., -999., -999., -999., -999., -999.],
                'tight': [-999., -999., -999., -999., -999., -999., -999., -999., -999.],
                }
        elif(float(threshold) >= 15. and float(threshold) < 20):
            self.MapsHADETthr = {
                'loose':[0.0328125, 0.0312375, 0.0354375, 0.0270375, 0.0459375, 0.0527625, 0.0433125, 0.0485625, 0.0396375], 
                'medium':[0.0328125, 0.0312375, 0.0354375, 0.0270375, 0.0459375, 0.0527625, 0.0433125, 0.0485625, 0.0396375], 
                'tight':[0.0328125, 0.0312375, 0.0354375, 0.0270375, 0.0459375, 0.0527625, 0.0433125, 0.0485625, 0.0396375], 
                }
            self.MapsCARCOREthr = {
                'loose':[0.809875, 0.805125, 0.786125, 0.809875, 0.703, 0.795625, 0.819375, 0.814625, 0.691125], 
                'medium':[0.809875, 0.805125, 0.786125, 0.809875, 0.703, 0.795625, 0.819375, 0.814625, 0.691125], 
                'tight':[0.809875, 0.805125, 0.786125, 0.809875, 0.703, 0.795625, 0.819375, 0.814625, 0.691125], 
                }
            self.MapsCAERATIOthr = {
                'loose': [-999., -999., -999., -999., -999., -999., -999., -999., -999.],
                'medium':[-999., -999., -999., -999., -999., -999., -999., -999., -999.],
                'tight':[-999., -999., -999., -999., -999., -999., -999., -999., -999.],
                }
        elif(float(threshold) >= 20. and float(threshold) < 30):
            self.MapsHADETthr = {
                'loose':[0.071, 0.062, 0.075, 0.060, 0.051, 0.057, 0.075, 0.072, 0.051],
                'medium':[0.071, 0.062, 0.075, 0.060, 0.051, 0.057, 0.075, 0.072, 0.051],
                'tight':[0.071, 0.062, 0.075, 0.060, 0.051, 0.057, 0.075, 0.072, 0.051],
                }
            self.MapsCARCOREthr = {
                'loose':[0.819375, 0.819375, 0.800375, 0.828875, 0.7125, 0.805125, 0.843125, 0.824125, 0.700625],
                'medium':[0.819375, 0.819375, 0.800375, 0.828875, 0.7125, 0.805125, 0.843125, 0.824125, 0.700625],
                'tight':[0.819375, 0.819375, 0.800375, 0.828875, 0.7125, 0.805125, 0.843125, 0.824125, 0.700625],
                }
            self.MapsCAERATIOthr = {
                'loose': [-999., -999., -999., -999., -999., -999., -999., -999., -999.],
                'medium':[-999., -999., -999., -999., -999., -999., -999., -999., -999.],
                'tight':[-999., -999., -999., -999., -999., -999., -999., -999., -999.],
                }
        elif(float(threshold) >= 30. and float(threshold) < 40):
            self.MapsHADETthr = {
                'loose':[0.071, 0.062, 0.075, 0.060, 0.051, 0.057, 0.075, 0.072, 0.051],
                'medium':[0.071, 0.062, 0.075, 0.060, 0.051, 0.057, 0.075, 0.072, 0.051],
                'tight':[0.071, 0.062, 0.075, 0.060, 0.051, 0.057, 0.075, 0.072, 0.051],
                }
            self.MapsCARCOREthr = {
                'loose':[0.819375, 0.819375, 0.800375, 0.828875, 0.7125, 0.805125, 0.843125, 0.824125, 0.700625],
                'medium':[0.819375, 0.819375, 0.800375, 0.828875, 0.7125, 0.805125, 0.843125, 0.824125, 0.700625],
                'tight':[0.819375, 0.819375, 0.800375, 0.828875, 0.7125, 0.805125, 0.843125, 0.824125, 0.700625],
                }
            self.MapsCAERATIOthr = {
                'loose': [-999., -999., -999., -999., -999., -999., -999., -999., -999.],
                'medium':[-999., -999., -999., -999., -999., -999., -999., -999., -999.],
                'tight': [-999., -999., -999., -999., -999., -999., -999., -999., -999.],
                }
        elif(float(threshold) >= 40.):
            self.MapsHADETthr = {
                'loose':[0.071, 0.062, 0.075, 0.060, 0.051, 0.057, 0.075, 0.072, 0.051],
                'medium':[0.071, 0.062, 0.075, 0.060, 0.051, 0.057, 0.075, 0.072, 0.051],
                'tight':[0.071, 0.062, 0.075, 0.060, 0.051, 0.057, 0.075, 0.072, 0.051],
                }
            self.MapsCARCOREthr = {
                'loose':[0.819375, 0.819375, 0.800375, 0.828875, 0.7125, 0.805125, 0.843125, 0.824125, 0.700625],
                'medium':[0.819375, 0.819375, 0.800375, 0.828875, 0.7125, 0.805125, 0.843125, 0.824125, 0.700625],
                'tight':[0.819375, 0.819375, 0.800375, 0.828875, 0.7125, 0.805125, 0.843125, 0.824125, 0.700625],
                }
            self.MapsCAERATIOthr = {
                'loose': [-999., -999., -999., -999., -999., -999., -999., -999., -999.],
                'medium': [-999., -999., -999., -999., -999., -999., -999., -999., -999.],
                'tight': [-999., -999., -999., -999., -999., -999., -999., -999., -999.],
                }
        else:
             raise RuntimeError('INCORRECT threshold: No cuts configured')           
