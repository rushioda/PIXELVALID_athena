/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

// dear emacs this is -*-c++-*-

#ifndef TRIGMUSUPEREF_TRIGMUSUPEREFUTILS_ICC_
#define TRIGMUSUPEREF_TRIGMUSUPEREFUTILS_ICC_

// Small file with some helper functions used in TrigMuSuperEF classes

namespace {

  inline double getFraction( unsigned int part, unsigned int total ) {
    if ( total == 0 ) return 0.0;
    return ((double)part) / ((double)total); 
  }
  
  template<class T> 
  inline T* makeViewContainerClone( T* orig ) {
    return new T( orig->begin(), orig->end(), SG::VIEW_ELEMENTS);
  }

  // delete all entries in cache vector, and clear the vector
  template <class T>
  void clearCacheVector( std::vector<T*>& cache ) {
    typename std::vector<T*>::iterator it = cache.begin(), it_end = cache.end();
    for (  ; it != it_end; ++it ) delete *it;
    cache.clear();
  }

  template <class T>
  bool addElement( std::vector<T>& v, T& e ) {
    typename std::vector<T>::iterator it = std::find( v.begin(), v.end(), e );
    if ( it == v.end() ) {
      v.push_back( e );
      return true;
    }
    return false;
  }

  template <class T>
  bool removeElement( std::vector<T>& v, T& e ) {
    typename std::vector<T>::iterator it = std::find( v.begin(), v.end(), e );
    if ( it != v.end() ) {
      v.erase( it );
      return true;
    }
    return false;
  }


} // end of unnamed namespace for private local functions

#endif //TRIGMUSUPEREF_TRIGMUSUPEREFUTILS_ICC_
