######################################################################################
#
# This file is automatically generated with TriggerTest/python/TrigvalJobOptionBuilder.py
# To generate TrigAnalysisTest/testAthenaModernAOD_rerunHYPO.py use  TriggerTest/python/trigValMakeJobOptions.py 
#
######################################################################################

from RecExConfig.RecFlags import rec
from AthenaCommon.AthenaCommonFlags import athenaCommonFlags as acf

import os.path

#if not ('PoolESDInput' in dir()):
#    PoolESDInput=["../RAWtoESD_MC_L1L2EF/ESD.pool.root"]
#
#
#if not ('DetDescrVersion' in dir()):
#    if os.getenv("CMTPATH").count('15.5') > 0:
#       DetDescrVersion = 'ATLAS-GEO-08-00-02'
#    else:
#       DetDescrVersion = 'ATLAS-GEO-10-00-00'

if not ('fileList' in dir()):
    fileList=["ESD.pool.root"]



if not os.path.exists(fileList[0]):
    print "FATAL ERROR: file can not be found, earlier test probably failed" 
    print "missing files:", fileList
    exit(1) 
 

# use auto configuration
from AthenaCommon.AthenaCommonFlags import athenaCommonFlags
athenaCommonFlags.FilesInput=fileList

#["/afs/cern.ch/user/s/strom/atnroot/15.6.X.Y-VAL/AtlasProduction/rel_5/NICOS_area/NICOS_qmtest156XYVALProd32BS5G4ProdOpt/trigp1test_testconfiguration_work/RAWtoESD_iniBeam_savedBS/data09_iniBeam.ESD.pool.root"]


from RecExConfig.RecFlags import rec
rec.doAOD.set_Value_and_Lock(False)
rec.doWriteAOD.set_Value_and_Lock(False)
rec.doCBNT.set_Value_and_Lock(False)



# different input files for ATN and RTT tests
if not ('EvtMax' in dir()):
    acf.EvtMax=2000

if not ('PoolESDInput' in dir()):
    acf.PoolESDInput=["../RAWtoESD_MC_L1L2EF/ESD.pool.root"] 

if not ('OutputLevel' in dir()):
    rec.OutputLevel=INFO

###############################
rec.readESD=True
rec.doCBNT=False
rec.doTrigger=False
rec.doWriteAOD=False
rec.doWriteESD=False
rec.doWriteTAG=False
rec.doAOD=False 
rec.doESD=False 
doTAG=False

rec.doTruth=True


#-----------------------------------------------------------
include("RecExCommon/RecExCommon_topOptions.py")
#-----------------------------------------------------------

#Very temporary hack to get things running
#from IOVDbSvc.CondDB import conddb 
#conddb.setGlobalTag('OFLCOND-CSC-00-01-00') 

from TrigValAlgs.TrigValAlgsConfig import TrigDecisionChecker

TrigDecChecker = TrigDecisionChecker("TrigDecChecker")
TrigDecChecker.WriteEventDecision=False
TrigDecChecker.MonitoringBlock=100
TrigDecChecker.MonitoredChains=[]
#TrigDecChecker.OutputLevel=DEBUG

#work around from Olya for TrigDecisionTool
from TrigDecisionTool.TrigDecisionToolConf import Trig__TrigDecisionTool
tdt = Trig__TrigDecisionTool("TrigDecisionTool")
ToolSvc += tdt
ToolSvc.TrigDecisionTool.TrigConfigSvc = "Trig::TrigConfigSvc/TrigConfigSvc"


from TrigEDMConfig.TriggerEDM import EDMLibraries
ToolSvc.TrigDecisionTool.Navigation.Dlls = EDMLibraries 


from AthenaCommon.GlobalFlags import globalflags
globalflags.DetGeo = 'atlas'

from TriggerJobOpts.TriggerConfigGetter import TriggerConfigGetter
cfg = TriggerConfigGetter()

from AthenaCommon.AlgSequence import AlgSequence
topSequence = AlgSequence()
topSequence += TrigDecChecker


jobproperties.PerfMonFlags.doMonitoring = True

MessageSvc.debugLimit = 10000000
MessageSvc.Format = "% F%48W%S%7W%R%T %0W%M"

#get rid of messages and increase speed
Service ("StoreGateSvc" ).ActivateHistory=False

#from AthenaCommon.AlgSequence import AlgSequence
print AlgSequence
print ServiceMgr


# get the name auditor
#theAuditorSvc = AuditorSvc()
#theAuditorSvc.Auditors  += [ "NameAuditor"]

# disable printing of histograms in finalize
if hasattr(svcMgr,'THistSvc'):
    svcMgr.THistSvc.OutputLevel = WARNING

