//**************************************************************
//
// top jopOptions file for accessing RIOs from RDOs using transient BS 
// for any algorithm.
// The Selection must come into the sequence list to use
//
//**************************************************************


// specify input file
ApplicationMgr.EvtSel = "FILE ZEBRA.P";

// specify the number of events
ApplicationMgr.EvtMax = 3;

//--------------------------------------------------------------
// Event parameters
//--------------------------------------------------------------
EventSelector.dataSetNames = {"Y23406.1", "Y23406.2"};
// For runs: provide a first/last range or a list
EventSelector.runs = {1, 30000};

// Switch off detectors not needed
EventSelector.muons=false;
//EventSelector.indet=false;
//EventSelector.pixel=false;
//EventSelector.sct=false;
//EventSelector.trt=false;
//EventSelector.calos=false;
//EventSelector.tile=false;
//EventSelector.hec=false;
//EventSelector.fcal=false;

//--------------------------------------------------------------
// Use auditors
//--------------------------------------------------------------
ApplicationMgr.DLLs += { "GaudiAud" };

// write out a summary of the time spent
AuditorSvc.Auditors  += { "ChronoAuditor"};

// write out a short message upon entering or leaving each algorithm
AuditorSvc.Auditors  += { "NameAuditor" };

// write out s summary of the memory usage
AuditorSvc.Auditors  += { "MemStatAuditor" };
MemStatAuditor.OutputLevel = 4 ;


#include "$PARTPROPSVCROOT/share/PartPropSvc.txt"
//
// Genz/kine->HepMc converter for true particle, Generators and Kine
//
ApplicationMgr.DLLs += { "GenzModule"};
// run the  GenzKine->HepMC coverter
ApplicationMgr.TopAlg += { "GenzModule"};

ApplicationMgr.DLLs += { "TrigFake" };

#include "AthenaCommon/Atlas_ZebraTDR.UnixStandardJob.txt"

#include "ByteStreamCnvSvcBase/BSAddProvSvc_RIO_jobOptions.txt"

ProxyProviderSvc.ProviderNames += { "ByteStreamAddressProviderSvc" } ;

#include "InDetDC1ReadPackage/SiTrackerDetDescrDC0_CnvOptions.txt"
#include "InDetDC1ReadPackage/PixelDetDescrCnvOptions.txt"
#include "InDetDC1ReadPackage/SCT_DetDescrCnvOptions.txt"
DetDescrCnvSvc.DecodeIdDict = true;

// Make RDOs and Write BS  for all 3 InDet detectors
//
ApplicationMgr.DLLs +={"InDetRawDataByteStream" };


#include "InDetDC1ReadPackage/TRT_RDOCnvOptions.txt"

#include "InDetDC1ReadPackage/SCT_RDOCnvOptions.txt"

#include "InDetDC1ReadPackage/PixelRDOCnvOptions.txt"

#include "$INDETSIMDATASELECTORROOT/share/PixelSimDataSelectorOptions.txt"
#include "$INDETSIMDATASELECTORROOT/share/SCT_SimDataSelectorOptions.txt"

ApplicationMgr.DLLs +={"InDetRawDataByteStream" };

// TRT 
StreamBS.ItemList +={"2542#*"};

// SCT 
StreamBS.ItemList +={"2541#*"};

// Pixel
StreamBS.ItemList +={"2540#*"};

#include "ByteStreamCnvSvc/RDP_ByteStream_jobOptions.txt"


//InDet
ApplicationMgr.DLLs += {"InDetRecInputByteStream"};
ApplicationMgr.ExtSvc += { "ByteStreamCnvSvc"} ;


//--------------------------------------------------------------
// TrigConfig Algorithm
//--------------------------------------------------------------
ApplicationMgr.DLLs += { "TrigConfig" };
ApplicationMgr.TopAlg += {"HLT::TriggerConfig/TriggerConfig"};

// SG keys for config data
TriggerConfig.trigConfigL2Vector = "storeL2Location";
TriggerConfig.trigConfigEFVector = "storeEFLocation";
TriggerConfig.OutputLevel = 3;

//--------------------------------------------------
// TrigSteering Algorithm
//-------------------------------------------------
ApplicationMgr.DLLs += { "TrigSteering" };

ApplicationMgr.TopAlg += { "StepController/StepController_L2" };

// SG keys for config data
StepHandler_L2.trigConfigVector = "storeL2Location";

//--------------------------------------------------
// Region Selection Tool
//-------------------------------------------------
ApplicationMgr.DLLs += { "TrigRegionSelector" };

//--------------------------------------------------
// L2/EF Seeding
//-------------------------------------------------
//ApplicationMgr.DLLs += { "TrigL2Result" };

//--------------------------------------------------
// Result Builder
//-------------------------------------------------
ApplicationMgr.DLLs += { "TrigL2ResultBuilder" };

ResultBuilder_L2.trigL2ConfigVector = "storeL2Location";
ResultBuilder_L2.trigEFConfigVector = "storeEFLocation";
ResultBuilder_L2.useL1Simulation= "NO";

#include "TrigIDSCAN/jobOfragment_TrigIDSCAN.txt"
#include "TrigSiTrack/jobOfragment_TrigSitrack.txt"
//#include "TrigTRTxK/jobOfragment_TrigTRTxK.txt"

#include "TrigSiTreeAlg/jobOfragment_TrigSiTreeAlg.txt"

//--------------------------------------------------------------
// TrigNtEgamma: CBNT and LVL2 Ntuples
//--------------------------------------------------------------
#include "TrigNtEgamma/jobOfragment_TrigNtEgamma.txt"
TrigEgammaNtuple_1_L2.NtupleID = 101;
TrigEgammaNtuple_2_L2.NtupleID = 102;

//--------------------------------------------------------------
// Set individual output levels
// (0=NIL 1=VERBOSE, 2=DEBUG, 3=INFO, 4=WARNING, 5=ERROR, 6=FATAL )
//--------------------------------------------------------------
// Get rid of messages during running
L2Result.OutputLevel = 4;

//--------------------------------------------------
// Benchmarking
//--------------------------------------------------
#include "TrigTimeAlgs/jobOfragment_TrigTimerSvc.txt"
TrigTimeNtuple_1_L2.NtupleID = 501;
TrigTimeNtuple_2_L2.NtupleID = 502;




//--------------------------------------------------------------
// Algorithm Sequence and Signature lists to configure HLTSSW
//--------------------------------------------------------------
TriggerConfig.sequenceListFileLocation = "IDonly_sequence.xml";
TriggerConfig.signatureListFileLocation = "IDonly_signature.xml";

//---------------------------------------------------------------
// Ntuple service output
//---------------------------------------------------------------
ApplicationMgr.HistogramPersistency="HBOOK";
NTupleSvc.Output    = { "FILE1 DATAFILE='trigger.ntup' OPT='NEW'" };
HbookHistSvc.NPAWC = 1500000 ;

// Histogram output, if any. 
HistogramPersistencySvc.OutputFile  = "histo.hbook";

StepController_L2.Lvl1Conversion="FakeLvl1Conversion";
FakeLvl1Conversion_L2.FakeEmTauRoiParticleIDs={11,-11};
FakeLvl1Conversion_L2.FakeEmTauRoiPtMin=20.*GeV;
FakeLvl1Conversion_L2.FakeMuonRoiParticleIDs={13,-13};
FakeLvl1Conversion_L2.FakeMuonRoiPtMin=20.*GeV;

//--------------------------------------------------------------
// Output levels
//--------------------------------------------------------------
// Set output level threshold 
// (0=NIL 1=VERBOSE, 2=DEBUG, 3=INFO, 4=WARNING, 5=ERROR, 6=FATAL )
MessageSvc.OutputLevel  = 2 ;
StoreGateSvc.OutputLevel = 3 ;


// write out a list of all Storegate collection with their keys and
// lock/unlock state. Very useful for debugging purpose
StoreGateSvc.Dump = false ;
ROBDataProviderSvc.OutputLevel = 3 ;
TRT_RDO_Cnv.OutputLevel = 3 ;