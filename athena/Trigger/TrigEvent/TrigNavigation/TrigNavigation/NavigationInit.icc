// dear emacs this is -*- c++ -*-

/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/


#ifndef TrigNavigation_NavigationInit_icc
#define TrigNavigation_NavigationInit_icc

//#include "GaudiKernel/MsgStream.h"
#include <type_traits>
#include <string>

#include "AthContainers/ConstDataVector.h"
#include "TrigNavigation/Holder.h"
#include "TrigNavigation/Holder.icc"

#include "TrigNavigation/Navigation.h"
#include "TrigNavigation/Navigation.icc"

#include "TrigNavigation/NavigationCore.h"
#include "TrigNavigation/NavigationCore.icc"

#include "TrigNavigation/TypeMaps.h"


//#include "TrigNavigation/AccessProxy.h"

#include "TrigNavigation/TrigFeatureLink.h"
#include "TrigNavigation/NavigationTraits.h"

namespace HLT {
  class TriggerElement;
}

template<class T> 
struct FeatureLinkMethods {
  typedef const T* (HLT::NavigationCore::*fl2o)( const TrigFeatureLink& ); 
  typedef TrigFeatureLink (HLT::NavigationCore::*o2fl_1)(const HLT::TriggerElement*, const std::string&, const T*);
};

template<class T> 
struct FeatureLinkMethods2 {
  typedef typename Container2Object<T>::type Contained;
  typedef TrigFeatureLink (HLT::NavigationCore::*o2fl_2)(const HLT::TriggerElement*, const std::string&, const  Contained*, const T* );
};



  /////////////////////////////////////////////////////
template<class T, bool> struct acquire_featureLinkToObject;
template<class T> 
struct acquire_featureLinkToObject<T, false> { 
  //  typename FF<T>::type;
  static typename FeatureLinkMethods<T>::fl2o do_it() {
    return &HLT::NavigationCore::featureLink2Object<T>;}
};

template<class T> struct acquire_featureLinkToObject<T, true>{ 
  static typename FeatureLinkMethods<T>::fl2o do_it() {
    return 0;}
};

  /////////////////////////////////////////////////////
template<class T, bool FeatureIsContainer> struct acquire_getRecentFeatureConstDV;
template<class T> 
struct acquire_getRecentFeatureConstDV<T, true> {
  typedef  bool (HLT::NavigationCore::*type)( const HLT::TriggerElement*, 
					      const ConstDataVector<T>*&, const std::string&, 
					      const HLT::TriggerElement*&, std::string& );
  static type do_it() { return &HLT::NavigationCore::getRecentFeature<ConstDataVector<T>>;  }
};

template<class T> 
struct acquire_getRecentFeatureConstDV<T, false> {
  typedef void* type;
  static type do_it() { return 0; }
  
};
  /////////////////////////////////////////////////////


template<typename T>
struct ConstDVCompatible{
  typedef char yes[2];typedef char no[1];

  // ATR-13318
  //  template<typename X, X>
  //  struct Help{
  //  };

  template<typename C>
  //  static auto f(Help<decltype(&C::resize),&C::resize>*) -> yes&;
  static yes& f(decltype(&C::resize));

  template<typename C>
  //  static auto f(...) -> no&;
  static no& f(...);

  static const bool value = sizeof(f<T>(0)) == sizeof(yes);
};
  


  /////////////////////////////////////////////////////

template<class T, bool FeatureIsContainer> struct acquire_attachFeatureConstDV;
template<class T> 
struct acquire_attachFeatureConstDV<T, true> {
  typedef  bool (HLT::Navigation::*type)( HLT::TriggerElement*, const ConstDataVector<T>*,
					  HLT::Navigation::MemoryManagement, std::string&, const std::string&  );
  
  static type do_it() {
    return &HLT::Navigation::attachFeature<ConstDataVector<T>>; 
  }
};

template<class T> 
struct acquire_attachFeatureConstDV<T, false> {
  typedef void* type;
  static type do_it() { return 0; }
  
};




//template<class T> 
//struct O2FLMethod_1 {
//  typedef TrigFeatureLink (HLT::NavigationCore::*o2fl_1)(const HLT::TriggerElement*, const std::string&, const T*);
//};

template<class T, bool> struct acquire_object2FeatureLink1;
template<class T> struct acquire_object2FeatureLink1<T, true> {
  static typename FeatureLinkMethods<T>::o2fl_1 do_it() {
    return &HLT::NavigationCore::object2FeatureLink<T>;
  }
};
template<class T> struct acquire_object2FeatureLink1<T, false> {
  static typename FeatureLinkMethods<T>::o2fl_1 do_it() {
    return 0;
  }
};

//
template<class T, bool> struct acquire_object2FeatureLink2;
template<class T> struct acquire_object2FeatureLink2<T, false> {
  static typename FeatureLinkMethods2<T>::o2fl_2 do_it() {
    return &HLT::NavigationCore::object2FeatureLink<T>;
  }
};
template<class T> struct acquire_object2FeatureLink2<T, true> {
  static typename FeatureLinkMethods2<T>::o2fl_2 do_it() {
    return 0;
  }
};

template<typename C, bool>
struct instantiate_dataelementlink;

template<typename C>
struct instantiate_dataelementlink<C,true>{
  static void do_it(){
  __attribute__((__unused__))
    bool (HLT::NavigationCore::*temp)(const HLT::TriggerElement*,DataLink<C>& link,
				      const std::string&, const HLT::TriggerElement*&, std::string&);
  temp = &HLT::NavigationCore::getRecentFeatureDataOrElementLink<DataLink<C> >;  
  //std::cout << "DataLink version instantiated for " << ClassID_traits<C>::ID() << std::endl;
  }
};

template<typename C>
struct instantiate_dataelementlink<C,false>{
  static void do_it(){
    __attribute__((__unused__))
    bool (HLT::NavigationCore::*temp)(const HLT::TriggerElement*,ElementLink<C>& link,
				      const std::string&, const HLT::TriggerElement*&, std::string&);
  temp = &HLT::NavigationCore::getRecentFeatureDataOrElementLink<ElementLink<C> >;
  //std::cout << "ElementLink version instantiated for " << ClassID_traits<C>::typeName() << std::endl;
  }
};

template <class T, class C>
HLT::FeatureContainerInit<T, C>::FeatureContainerInit() {
  HLT::TypeMaps::registerFeatureContainer<T, C>();

  //  staements below force generation of the specializations for the methods
  __attribute__((__unused__))
  bool (HLT::Navigation::*temp_attachFeature)( TriggerElement*, const T*,
					       Navigation::MemoryManagement, std::string&, const std::string&  );
  temp_attachFeature = &HLT::Navigation::attachFeature<T>;

  __attribute__((__unused__))
  bool (HLT::Navigation::*temp_associateExternalCollection)( const std::string& );
  temp_associateExternalCollection = &HLT::Navigation::associateExternalCollection<T>;



  __attribute__((__unused__))
    typename acquire_attachFeatureConstDV<T, std::is_same<T,C>::value && ConstDVCompatible<T>::value>::type temp_attachFeatureConstDV;
  temp_attachFeatureConstDV = acquire_attachFeatureConstDV<T,
							   std::is_same<T,C>::value && 
							   ConstDVCompatible<T>::value
							   >::do_it();
  
  //  typename acquire_getRecentFeatureConstDV<T, std::is_same<T,C>::value>::type temp_getRecentFeatureConstDV;
  //  temp_getRecentFeatureConstDV = acquire_getRecentFeatureConstDV<T, std::is_same<T,C>::value>::do_it();


  //
  __attribute__((__unused__))
  bool (HLT::NavigationCore::*temp_getFeatures)( const TriggerElement*, std::vector< const T*>&, 
					     const std::string&, std::map<const T*, std::string>* );
  temp_getFeatures = &HLT::NavigationCore::getFeatures<T>;


  //
  __attribute__((__unused__))
  bool (HLT::NavigationCore::*temp_getFeature)( const TriggerElement*, const T*&, const std::string&, std::string&);
  temp_getFeature = &HLT::NavigationCore::getFeature<T>;


  //const T* (HLT::NavigationCore::*temp_featureLink2Object)( const TrigFeatureLink& ); 
  __attribute__((__unused__))
  typename FeatureLinkMethods<T>::fl2o temp_featureLink2Object;
  temp_featureLink2Object = acquire_featureLinkToObject<T, std::is_same<T, C>::value>::do_it();//&HLT::NavigationCore::featureLink2Object<T>;
    
  //
  __attribute__((__unused__))
  typename FeatureLinkMethods<T>::o2fl_1 temp_object2FeatureLink;
  temp_object2FeatureLink = acquire_object2FeatureLink1<T, std::is_same<T, C>::value>::do_it();

  //
  __attribute__((__unused__))
  typename FeatureLinkMethods2<C>::o2fl_2 temp_object2FeatureLink2;
  temp_object2FeatureLink2 = acquire_object2FeatureLink2<C, std::is_same<T, C>::value>::do_it();

  //
  __attribute__((__unused__))
  bool (HLT::NavigationCore::*temp_getRecentFeatures)( const TriggerElement*, 
			  std::vector< const T*>&, const std::string&, 
			  std::map<const T*, std::string>*  );
  temp_getRecentFeatures = &HLT::NavigationCore::getRecentFeatures<T>;

  //
  __attribute__((__unused__))
  bool (HLT::NavigationCore::*temp_getRecentFeature)( const TriggerElement*, 
						  const T*&, const std::string&, const TriggerElement*&, std::string& );
  temp_getRecentFeature = &HLT::NavigationCore::getRecentFeature<T>;


  __attribute__((__unused__))
    typename acquire_getRecentFeatureConstDV<T, std::is_same<T,C>::value and canTransfer<C>::value >::type temp_getRecentFeatureConstDV;
  temp_getRecentFeatureConstDV = acquire_getRecentFeatureConstDV<T, std::is_same<T,C>::value and canTransfer<C>::value>::do_it();
  

  //
  __attribute__((__unused__))
  bool (HLT::NavigationCore::*temp_getRecentFeaturesLinks)( const TriggerElement*,
							ElementLinkVector<C>&, const std::string&  );  
  temp_getRecentFeaturesLinks = &HLT::NavigationCore::getRecentFeaturesLinks<C,T>;


  //
  __attribute__((__unused__))
  bool (HLT::NavigationCore::*temp_getRecentFeatureLink)( const TriggerElement*,
						      ElementLink<C>&, const std::string&, const TriggerElement*&, std::string& );
  temp_getRecentFeatureLink = &HLT::NavigationCore::getRecentFeatureLink<C,T>;

  //getRecentFeatureDataOrElementLink depends on what kind of feature we have
  //therefore we need to outsource to helper
  instantiate_dataelementlink<C,std::is_same<T,C>::value >::do_it();

  //
  __attribute__((__unused__))
  bool (HLT::NavigationCore::*temp_getFeaturesInRoI)( const TriggerElement*,  std::vector<const T*>&, 
						      const std::string&, std::map<const T*, std::string>* );
  temp_getFeaturesInRoI = &HLT::NavigationCore::getFeaturesInRoI<T>;

  //
  __attribute__((__unused__))
  bool (HLT::NavigationCore::*temp_getAllFeatures)(ElementLinkVector<C>&, const std::string& );
  temp_getAllFeatures = &HLT::NavigationCore::getAllFeatures<C,T>; 

  //
  __attribute__((__unused__))
  bool (HLT::Navigation::*temp_findOwners)(const T*, std::vector<const TriggerElement*>&, unsigned int);
  temp_findOwners = &HLT::Navigation::findOwners<T>;

  //
  typedef const std::string const_string;
  __attribute__((__unused__))
  const_string (HLT::Navigation::*temp_getNextKey)( const std::string& );
  temp_getNextKey = &HLT::Navigation::getNextKey<T>;


  //
  __attribute__((__unused__))
  const_string (HLT::Navigation::*temp_getUniqueKey)( const std::string&);
  temp_getUniqueKey = &HLT::Navigation::getUniqueKey<T>;

}

template <class T>
HLT::AuxInit<T>::AuxInit() {
  HLT::TypeMaps::registerType<T>();
}

#endif
