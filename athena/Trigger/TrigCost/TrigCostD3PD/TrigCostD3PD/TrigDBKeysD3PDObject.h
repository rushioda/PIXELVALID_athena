// Dear emacs, this is -*- c++ -*-

/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

// -------------------------------------------------------------
//             Code produced by D3PDMakerReader
//
//  author: Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
// -------------------------------------------------------------
#ifndef D3PDREADER_TrigDBKeysD3PDObject_H
#define D3PDREADER_TrigDBKeysD3PDObject_H

// STL include(s):
#include <map>

// ROOT include(s):
#include <TObject.h>
#include <TString.h>

#include "D3PDObjectBase.h"
//#include "D3PDReadStats.h"
#include "VarHandle.h"
#include "UserD3PDObject.h"

class TTree;

namespace D3PDReader {

   /**
    * Code generated by CodeGenerator_v2 on:
    *  host = epp-ui01
    *  OS   = Linux / 2.6.18-348.3.1.el5
    *  user = phsmai
    *  time = Tue Apr 16 11:36:42 2013
    */
   class TrigDBKeysD3PDObject : public UserD3PDObject {

   public:
      /// Constructor used when reading from a TTree
      TrigDBKeysD3PDObject( const ::Long64_t& master, const char* prefix = "trig_DB_" );
      /// Constructor when the object is only used for writing data out
      TrigDBKeysD3PDObject( const char* prefix = "trig_DB_" );

      /// Get the currently configured prefix value
      virtual const char* GetPrefix() const;
      /// Set the prefix for the variables
      virtual void SetPrefix( const char* prefix );

      /// Connect the object to an input TTree
      virtual void ReadFrom( ::TTree* tree );
      /// Connect the object to an output TTree
      virtual void WriteTo( ::TTree* tree );

      /// Turn (selected) branches either on or off
      virtual void SetActive( ::Bool_t active = kTRUE,
                              const ::TString& pattern = ".*" );
      /// Read in all the variables that we need to write out as well
      virtual void ReadAllActive();

      /// Get the D3PD reading statistics
      //virtual D3PDReadStats GetStatistics() const;

      /// Set the contents of the object according to another object
      TrigDBKeysD3PDObject& Set( const TrigDBKeysD3PDObject& parent );

      /// HLT PreScale Key
      VarHandle< unsigned int > HLTPSK;
      /// LVL1 PreScale Key
      VarHandle< unsigned int > L1PSK;
      /// Super Master Key
      VarHandle< unsigned int > SMK;

   private:
      /// Function used internally to access the variables
      VarHandleBase* GetVarHandle( const char* name );
      /// Function setting up all the VarHandle members
      void SetVarHandles( const ::Long64_t* master );

      std::map< ::TString, VarHandleBase* > fHandles; ///< Book-keeper of the VarHandle members
      const ::Bool_t fFromInput; ///< Flag specifying if object is used for D3PD reading
      ::TString fPrefix; ///< Prefix to the branch names

      ClassDef( TrigDBKeysD3PDObject, 0 )

   }; // class TrigDBKeysD3PDObject

} // namespace D3PDReader

#endif // D3PDREADER_TrigDBKeysD3PDObject_H
