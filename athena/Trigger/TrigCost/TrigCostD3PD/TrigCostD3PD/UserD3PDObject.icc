// Dear emacs, this is -*- c++ -*-

/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

// $Id: CodeGenerator_v2_constants.h 539451 2013-03-01 08:33:45Z krasznaa $
#ifndef D3PDREADER_UserD3PDObject_ICC
#define D3PDREADER_UserD3PDObject_ICC

namespace D3PDReader {

   /**
    * This function accesses a user-defined variable for modification.
    * The template type needs to follow the type of the underlying
    * TTree branch's type, without the outermost vector. So for instance
    * to access a <code>std::vector<float></code> variable from here, you
    * need to call the function with a <code>float</code> template argument.
    *
    * The function also takes care of extending the underlying vector variable
    * to the needed size. This makes the decoration of existing objects in
    * a container with new variables much easier.
    *
    * If you're decorating elements that you are reading from an input D3PD,
    * you must have already called <code>DeclareVariable(...)</code> on the
    * parent object before calling thig function.
    *
    * @param name The name of the user variable
    * @returns The VarProxy object handling the requested variable
    */
   template< typename T >
   VarProxy< T >& UserD3PDObjectElement::Variable( const TString& name ) {

      // Try to find the variable:
      std::map< ::TString, VarProxyBase* >::const_iterator itr =
         fProxies.find( name );
      if( itr != fProxies.end() ) {
         // If it's already known, let's see if it's the right type:
         VarProxy< T >* result =
            dynamic_cast< VarProxy< T >* >( itr->second );
         if( ! result ) {
            // Create a dummy object. The code will crash soon
            // anyway...
            VarProxy< T >* dummy =
               new VarProxy< T >( fParent->Variable< std::vector< T >* >( name ),
                                  fIndex );
            fProxies[ name ] = dummy;
            // Tell the user what happened:
            Error( "Variable",
                   "Variable with name '%s' requested with wrong type",
                   name.Data() );
            return *dummy;
         }
         // Check if the underlying vector is large enough:
         const VarHandle< std::vector< T >* >& vh = 
            fParent->Variable< std::vector< T >* >( name );
         if( vh.IsAvailable() && ( ! vh.GetMaster() ) &&
             ( vh()->size() <= fIndex ) ) {
            UserD3PDObject* ncparent = const_cast< UserD3PDObject* >( fParent );
            ncparent->Variable< std::vector< T >* >( name )()->resize( fIndex + 1 );
         }
         // Return the proxy:
         return *result;
      }

      // Add the new proxy variable:
      VarProxy< T >* result =
         new VarProxy< T >( fParent->Variable< std::vector< T >* >( name ),
                            fIndex );
      fProxies[ name ] = result;

      // Check if the underlying vector is large enough:
      const VarHandle< std::vector< T >* >& vh = 
         fParent->Variable< std::vector< T >* >( name );
      if( vh.IsAvailable() && ( ! vh.GetMaster() ) &&
          ( vh()->size() <= fIndex ) ) {
         UserD3PDObject* ncparent = const_cast< UserD3PDObject* >( fParent );
         ncparent->Variable< std::vector< T >* >( name )()->resize( fIndex + 1 );
      }

      // Return the proxy:
      return *result;
   }

   /**
    * This function accesses a user-defined variable for reading.
    * The template type needs to follow the type of the underlying
    * TTree branch's type, without the outermost vector. So for instance
    * to access a <code>std::vector<float></code> variable from here, you
    * need to call the function with a <code>float</code> template argument.
    *
    * If you're decorating elements that you are reading from an input D3PD,
    * you must have already called <code>DeclareVariable(...)</code> on the
    * parent object before calling thig function.
    *
    * @param name The name of the user variable
    * @returns The VarProxy object handling the requested variable
    */
   template< typename T >
   const VarProxy< T >& UserD3PDObjectElement::Variable( const TString& name ) const {

      // Try to find the variable:
      std::map< ::TString, VarProxyBase* >::const_iterator itr =
         fProxies.find( name );
      if( itr != fProxies.end() ) {
         // If it's already known, let's see if it's the right type:
         VarProxy< T >* result =
            dynamic_cast< VarProxy< T >* >( itr->second );
         if( ! result ) {
            // Create a dummy object. The code will crash soon
            // anyway...
            VarProxy< T >* dummy =
               new VarProxy< T >( fParent->Variable< std::vector< T >* >( name ),
                                  fIndex );
            fProxies[ name ] = dummy;
            // Tell the user what happened:
            Error( "Variable",
                   "Variable with name '%s' requested with wrong type",
                   name.Data() );
            return *dummy;
         }
         // Return the proxy:
         return *result;
      }

      // Add the new proxy variable:
      VarProxy< T >* result =
         new VarProxy< T >( fParent->Variable< std::vector< T >* >( name ),
                            fIndex );
      fProxies[ name ] = result;

      // Return the proxy:
      return *result;
   }

   /**
    * This function can be used to add a new variable to an output D3PD.
    * When reading an input D3PD that the user wants to write out a part of,
    * extended with some additional variables, this function should be used.
    *
    * @param name The name of the new variable to create
    */
   template< typename T >
   void UserD3PDObject::DeclareVariable( const TString& name ) {

      // Check if the variable with this name is already in place:
      std::map< ::TString, VarHandleBase* >::const_iterator itr =
         fHandles.find( name );
      if( itr != fHandles.end() ) {
         Warning( "DeclareVariable",
                  "Variable with name '%s' already declared",
                  ( fPrefix + name ).Data() );
         return;
      }

      // Declare the new variable:
      fHandles[ name ] = new VarHandle< T >( fPrefix + name, 0 );

      return;
   }

   /**
    * This function can be used to access a user-defined variable for
    * modification. It should mostly be used when writing a D3PD with the
    * additional user variable.
    *
    * @param name The name of the user-defined variable
    * @returns The VarHandle object handling the user variable
    */
   template< typename T >
   VarHandle< T >& UserD3PDObject::Variable( const TString& name ) {

      // Try to find the variable:
      std::map< ::TString, VarHandleBase* >::const_iterator itr =
         fHandles.find( name );
      if( itr != fHandles.end() ) {
         // It's already known, so let's see if it's of the right type:
         VarHandle< T >* result =
            dynamic_cast< VarHandle< T >* >( itr->second );
         if( ! result ) {
            // Add a dummy object for technical reasons. The user code
            // will anyway probably die after this.
            VarHandle< T >* dummy = new VarHandle< T >();
            fExtraHandles.push_back( dummy );
            // Tell the user what happened:
            Error( "Variable",
                   "Variable with name '%s' is of type '%s', "
                   "not of type '%s'",
                   ( fPrefix + name ).Data(), itr->second->GetType(),
                   dummy->GetType() );
            // Return the dummy:
            return *dummy;
         }
         // Return the object:
         return *result;
      }

      // If it doesn't exist yet, let's add it:
      VarHandle< T >* result = new VarHandle< T >( fPrefix + name, fMaster );
      if( fInTree ) result->ReadFrom( fInTree );
      fHandles[ name ] = result;
      return *result;
   }

   /**
    * This function can be used to access a user-defined variable for
    * reading. It can be used both when reading or writing a D3PD.
    *
    * @param name The name of the user-defined variable
    * @returns The VarHandle object handling the user variable
    */
   template< typename T >
   const VarHandle< T >& UserD3PDObject::Variable( const TString& name ) const {

      // Try to find the variable:
      std::map< ::TString, VarHandleBase* >::const_iterator itr =
         fHandles.find( name );
      if( itr != fHandles.end() ) {
         // It's already known, so let's see if it's of the right type:
         VarHandle< T >* result =
            dynamic_cast< VarHandle< T >* >( itr->second );
         if( ! result ) {
            // Add a dummy object for technical reasons. The user code
            // will anyway probably die after this.
            VarHandle< T >* dummy = new VarHandle< T >();
            fExtraHandles.push_back( dummy );
            // Tell the user what happened:
            Error( "Variable",
                   "Variable with name '%s' is of type '%s', "
                   "not of type '%s'",
                   ( fPrefix + name ).Data(), itr->second->GetType(),
                   dummy->GetType() );
            // Return the dummy:
            return *dummy;
         }
         // Return the object:
         return *result;
      }

      // If it doesn't exist yet, let's add it:
      VarHandle< T >* result = new VarHandle< T >( fPrefix + name, fMaster );
      if( fInTree ) result->ReadFrom( fInTree );
      fHandles[ name ] = result;
      return *result;
   }

} // namespace D3PDReader

#endif // D3PDREADER_UserD3PDObject_ICC
