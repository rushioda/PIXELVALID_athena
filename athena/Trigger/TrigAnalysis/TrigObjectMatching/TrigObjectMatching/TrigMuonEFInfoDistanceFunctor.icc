// Dear emacs, this is -*- c++ -*-

/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

#ifndef TRIG_MUON_EF_INFO_DISTANCE_FUNCTOR_ICC
#define TRIG_MUON_EF_INFO_DISTANCE_FUNCTOR_ICC

// STL include(s):
#include <cmath>

// Gaudi/Athena include(s):
#include "AthenaKernel/errorcheck.h"

// EDM include(s):
#include "TrigMuonEvent/TrigMuonEFInfoTrackContainer.h"
#include "TrigMuonEvent/TrigMuonEFCbTrack.h"

template< typename V >
float TrigMatch::TrigMuonEFInfoHelper::calculateInfoDistance( const TrigMuonEFInfo *t,
                                                              const V *v ) {

   // first, we need to figure out how the tracks are stored
   // there are basically two options:
   // In older datasets (15.1.0 and earlier), we use the legacy track methods
   // In newer ones, we access the track container
   // Try the newer method first, and fall back to the legacy method it doesn't work

   const TrigMuonEFInfoTrackContainer *trackContainer = t->TrackContainer();

   if( ! trackContainer || trackContainer->empty() ) {
      // if no track container, try the legacy methods
      // check if we can use the legacy track methods
      if( t->hasLegacyTrack() ) {
         const TrigMuonEFTrack *trk = 0;
         switch( trackToUse() ) {
         case TrigMatch::useSpectrometerTrack:
            trk = t->legacySpectrometerTrack();
            break;
         case TrigMatch::useExtrapolatedTrack:
            trk = t->legacyExtrapolatedTrack();
            break;
         case TrigMatch::useCombinedTrack:
            trk = (TrigMuonEFTrack*)t->legacyCombinedTrack();
            break;
         default:
            REPORT_MESSAGE_WITH_CONTEXT( MSG::WARNING, "TrigMuonEFInfoHelper" )
               << "Track type " << trackToUse() << " not supported for legacy objects";
            return -1.;
            break;
         }
         return DeltaRDistanceFunctor< TrigMuonEFTrack, V >::deltaR( trk, v );
      }
      else {
         REPORT_MESSAGE_WITH_CONTEXT( MSG::WARNING, "TrigMuonEFInfoHelper" )
            << "Didn't find any tracks belonging to the provided TrigMuonEFInfo object";
         return -1.;
      }
   }

   // if we're here, we should use the track container tracks
   TrigMuonEFInfoTrackContainer::const_iterator iter = trackContainer->begin();
   TrigMuonEFInfoTrackContainer::const_iterator iterEnd = trackContainer->end();

   float minDr = -1.;

   switch( trackToUse() ) {
   case TrigMatch::useSpectrometerTrack:
      for( ; iter != iterEnd; ++iter ) {
         if((*iter)->MuonType() != TrigMuonEFInfoTrack::MuonTypeEFMuon)
            continue;
         float dr = DeltaRDistanceFunctor<TrigMuonEFTrack, V>::deltaR( (*iter)->SpectrometerTrack(), v);
         if(minDr < 0 || dr < minDr)
            minDr = dr;
      }
      break;
   case TrigMatch::useExtrapolatedTrack:
      for( ; iter != iterEnd; ++iter ) {
         if((*iter)->MuonType() != TrigMuonEFInfoTrack::MuonTypeEFMuon)
            continue;
         float dr = DeltaRDistanceFunctor<TrigMuonEFTrack, V>::deltaR( (*iter)->ExtrapolatedTrack(), v);
         if(minDr < 0 || dr < minDr)
            minDr = dr;
      }
      break;
   case TrigMatch::useCombinedTrack:
      for( ; iter != iterEnd; ++iter ) {
         if((*iter)->MuonType() != TrigMuonEFInfoTrack::MuonTypeEFMuon)
            continue;
         float dr = DeltaRDistanceFunctor<TrigMuonEFCbTrack, V>::deltaR( (*iter)->CombinedTrack(), v);
         if(minDr < 0 || dr < minDr)
            minDr = dr;
      }
      break;
   case TrigMatch::useMuGirlTrack:
      for( ; iter != iterEnd; ++iter ) {
         if((*iter)->MuonType() != TrigMuonEFInfoTrack::MuGirlMuon)
            continue;
         float dr = DeltaRDistanceFunctor<TrigMuonEFCbTrack, V>::deltaR( (*iter)->CombinedTrack(), v);
         if(minDr < 0 || dr < minDr)
            minDr = dr;
      }
      break;
   case TrigMatch::useAnyTrack:
      for( ; iter != iterEnd; ++iter ) {
         float dr1 = 1000.0;
         if( ( *iter )->SpectrometerTrack() ) {
            dr1 = DeltaRDistanceFunctor<TrigMuonEFTrack, V>::deltaR( ( *iter )->SpectrometerTrack(), v );
         }
         float dr2 = 1000.0;
         if( ( *iter )->ExtrapolatedTrack() ) {
            dr2 = DeltaRDistanceFunctor<TrigMuonEFTrack, V>::deltaR( ( *iter )->ExtrapolatedTrack(), v );
         }
         float dr3 = 1000.0;
         if( ( *iter )->CombinedTrack() ) {
            dr3 = DeltaRDistanceFunctor<TrigMuonEFCbTrack, V>::deltaR( ( *iter )->CombinedTrack(), v );
         }
         float dr = std::min( dr1, std::min( dr2, dr3 ) );
         if(minDr < 0 || dr < minDr)
            minDr = dr;
      }
      break;
   case TrigMatch::useMuGirlTagTrack:
      for( ; iter != iterEnd ; ++iter ) {
         if( ( *iter )->MuonType() != TrigMuonEFInfoTrack::MuGirlMuonTag )
            continue;
         float dr =
            DeltaRDistanceFunctor< TrigMuonEFCbTrack, V >::deltaR( ( *iter )->CombinedTrack(),
                                                                   v );
         if( minDr < 0 || dr < minDr )
            minDr = dr;
      }
      break;
   case TrigMatch::useAnyMuGirlTrack:
      for( ; iter != iterEnd ; ++iter ) {
         if( ( ( *iter )->MuonType() != TrigMuonEFInfoTrack::MuGirlMuon ) &&
             ( ( *iter )->MuonType() != TrigMuonEFInfoTrack::MuGirlMuonTag ) )
            continue;
         float dr =
            DeltaRDistanceFunctor< TrigMuonEFCbTrack, V >::deltaR( ( *iter )->CombinedTrack(),
                                                                   v );
         if( minDr < 0 || dr < minDr )
            minDr = dr;
      }
      break;
   case TrigMatch::usePhysicsTracks:
      for( ; iter != iterEnd; ++iter ) {
         int muontype = ( *iter )->MuonType();
         float dr = 0;
         if ( muontype == TrigMuonEFInfoTrack::MuGirlMuon ||
              muontype == TrigMuonEFInfoTrack::MuGirlMuonTag ) {
            dr = DeltaRDistanceFunctor< TrigMuonEFCbTrack, V >::deltaR( (*iter)->CombinedTrack(),
                                                                        v );
         } else if ( muontype == TrigMuonEFInfoTrack::MuonTypeEFMuon ) {
            if ( ( *iter )->hasCombinedTrack() ) {
               // do we have a combined muon?
               dr = DeltaRDistanceFunctor< TrigMuonEFCbTrack, V >::deltaR( ( *iter )->CombinedTrack(),
                                                                           v );
            } else if ( ( *iter )->hasExtrapolatedTrack() ) {
               // if not, we ought to have an extrapolated standalone muon
               dr = DeltaRDistanceFunctor< TrigMuonEFTrack, V >::deltaR( ( *iter )->ExtrapolatedTrack(),
                                                                         v );
            } else {
               // I don't think this happens - standalone with no extrapolation?
               REPORT_MESSAGE_WITH_CONTEXT( MSG::WARNING, "TrigMuonEFInfoHelper" )
                  << "Found an EF muon with no combined or extrapolated track";
            }
         } else {
            // do nothing, this is future-proofing
            REPORT_MESSAGE_WITH_CONTEXT( MSG::WARNING, "TrigMuonEFInfoHelper" )
               << "Unknown EF muon object type found";
         }
         if( minDr < 0 || dr < minDr )
            minDr = dr;
      }
      break;
   default:
      REPORT_MESSAGE_WITH_CONTEXT( MSG::WARNING, "TrigMuonEFInfoHelper" )
         << "Track type " << trackToUse() << " not supported in this type of matching!";
      minDr = -1.0;
      break;
   }

   return minDr;
}

#endif // TRIG_MUON_EF_INFO_DISTANCE_FUNCTOR_ICC
