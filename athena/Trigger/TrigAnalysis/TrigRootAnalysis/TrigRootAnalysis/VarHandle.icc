// Dear emacs, this is -*- c++ -*-

/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

// $Id: VarHandle.icc 726663 2016-02-28 01:22:15Z ssnyder $
#ifndef TRIGROOTANALYSIS_VARHANDLE_ICC
#define TRIGROOTANALYSIS_VARHANDLE_ICC

// System include(s):
#include <string.h>
#include <cxxabi.h>
#include <cstdlib>
#include <stdint.h>

// ROOT include(s):
#include <TObject.h>
#include <TClass.h>
#include <TTree.h>
#include <TBranch.h>

namespace D3PDReaderPriv {

   template< typename Type >
   VarHandle< Type >::VarHandle( ::TObject* parent, const char* name,
                                 const ::Long64_t* master )
      : VarHandleBase( parent, name, master ),
        m_variable() {

      SetType( RootCppType( typeid( Type ).name() ) );
   }

   template< typename Type >
   VarHandle< Type >::~VarHandle() {

   }

   template< typename Type >
   void VarHandle< Type >::ReadFrom( ::TTree* tree ) {

      m_inTree = tree;
      m_fromInput = kTRUE;
      m_variable = 0;
      m_inBranch = 0;
      m_available = UNKNOWN;

      return;
   }

   template< typename Type >
   ::TBranch* VarHandle< Type >::WriteTo( ::TTree* tree ) {

      if( ! IsActive() ) return 0;

      ::TBranch* branch = tree->GetBranch( GetName() );
      if( branch ) return branch;

      branch = tree->Branch( GetName(), &m_variable,
                             ::TString::Format( "%s/%s", GetName(),
                                                RootType( typeid( Type ).name() ) ) );
      if( ! branch ) {
         m_parent->Error( "WriteTo",
                         "Couldn't add variable %s to tree %s",
                         GetName(), tree->GetName() );
      } else {
         for( ::Long64_t i = 0; i < tree->GetEntries(); ++i ) {
            branch->Fill();
         }
      }

      return branch;
   }

   template< typename Type >
   typename VarHandle< Type >::result_type VarHandle< Type >::operator()() {

      if( ! m_fromInput ) return m_variable;

      if( ! m_inBranch ) {
         Bool_t stat = ConnectVariable( &m_variable, TClass::GetClass( typeid( Type ) ),
                                        TDataType::GetType( typeid( Type ) ), kFALSE );
         if (!stat || !m_inBranch) {
            m_parent->Error( ::TString( GetName() ) + "()", "Failed connecting to D3PD" );
            return m_variable;
         }
      }
      UpdateBranch();

      return m_variable;
   }

   template< typename Type >
   typename VarHandle< Type >::const_result_type VarHandle< Type >::operator()() const {

      if( ! m_fromInput ) return m_variable;

      if( ! m_inBranch ) {
         Bool_t stat =  ConnectVariable( &m_variable, TClass::GetClass( typeid( Type ) ),
                                         TDataType::GetType( typeid( Type ) ), kFALSE );
         if (!stat || !m_inBranch) {
            m_parent->Error( ::TString( GetName() ) + "()", "Failed connecting to D3PD" );
            return m_variable;
         }
      }
      UpdateBranch();

      return m_variable;
   }

   template< typename Type >
   void VarHandle< Type >::ReadCurrentEntry() const {

      if( IsAvailable() ) {
         this->operator()();
      } else {
         m_variable = 0;      }
      return;
   }

   template< typename Type >
   void VarHandle< Type >::Clear() {

      this->operator()() = 0;
      return;
   }

   template< typename Type >
   VarHandle< Type* >::VarHandle( ::TObject* parent, const char* name,
                                  const ::Long64_t* master )
      : VarHandleBase( parent, name, master ),
        m_variable( 0 ) {

      int status;
      char* type_name = abi::__cxa_demangle( typeid( Type ).name(), 0, 0, &status );
      if( ! status ) {
         SetType( type_name );
         ::free( type_name );
      }
   }

   template< typename Type >
   VarHandle< Type* >::~VarHandle() {

      if( m_variable ) delete m_variable;
   }

   template< typename Type >
   void VarHandle< Type* >::ReadFrom( ::TTree* tree ) {

      m_inTree = tree;
      m_fromInput = kTRUE;
      if( m_variable ) m_variable->clear();
      m_inBranch = 0;
      m_available = UNKNOWN;

      return;
   }

   template< typename Type >
   ::TBranch* VarHandle< Type* >::WriteTo( ::TTree* tree ) {

      if( ! IsActive() ) return 0;

      ::TBranch* branch = tree->GetBranch( GetName() );
      if( branch ) return branch;

      if( ! ::strcmp( GetType(), "" ) ) {
         m_parent->Error( "WriteTo",
                         "Couldn't demangle type name: %s",
                         typeid( Type ).name() );
         return 0;
      }
      if( ! m_variable ) {
         m_variable = new Type();
      }
      branch = tree->Bronch( GetName(), GetType(), &m_variable );
      if( ! branch ) {
         m_parent->Error( "WriteTo",
                         "Couldn't add variable %s to tree %s",
                         GetName(), tree->GetName() );
      } else {
         for( ::Long64_t i = 0; i < tree->GetEntries(); ++i ) {
            branch->Fill();         }
      }

      return branch;
   }

   template< typename Type >
   typename VarHandle< Type* >::result_type
   VarHandle< Type* >::operator()() {

      if( ! m_fromInput ) {
         if( ! m_variable ) m_variable = new Type();
         return m_variable;
      }

      if( ! m_inBranch ) {
         Bool_t stat = ConnectVariable( &m_variable, TClass::GetClass( typeid( Type ) ),
                                        TDataType::GetType( typeid( Type ) ), kTRUE );
         if (!stat || !m_inBranch) {
            m_parent->Error( ::TString( GetName() ) + "()",
                            "Failed connecting to D3PD" );
            return m_variable;
         }
      }
      UpdateBranch();

      return m_variable;
   }

   template< typename Type >
   typename VarHandle< Type* >::const_result_type
   VarHandle< Type* >::operator()() const {

      if( ! m_fromInput ) {
         if( ! m_variable ) m_variable = new Type();
         return m_variable;
      }

      if( ! m_inBranch ) {
        Bool_t stat = ConnectVariable( &m_variable, TClass::GetClass( typeid( Type ) ),
                                       TDataType::GetType( typeid( Type ) ), kTRUE );
        if (!stat || !m_inBranch) {
            m_parent->Error( ::TString( GetName() ) + "()",
                            "Failed connecting to D3PD" );
            return m_variable;
         }
      }
      UpdateBranch();

      return m_variable;
   }

   template< typename Type >
   void VarHandle< Type* >::ReadCurrentEntry() const {

      if( IsAvailable() ) {
         this->operator()();
      } else {
         if( ! m_variable ) m_variable = new Type();
         m_variable->clear();
      }
      return;
   }

   template< typename Type >
   void VarHandle< Type* >::Clear() {

      this->operator()()->clear();
      return;
   }

} // namespace D3PDReaderPriv

#endif // TRIGROOTANALYSIS_VARHANDLE_ICC
