# Dear emacs, this is a -*- Makefile -*-
#
# $Id: Makefile.standalone 502443 2012-05-25 10:43:25Z krasznaa $
#
# Makefile for compiling the library in a complately standalone
# fashion
#
# author: Attila Krasznahorkay <Attila.Krasznahorkay@cern.ch>
#

#
# Include the architecture definitions from the ROOT sources
#
#  Makefile.arch can be in a number of different locations depending on the system
#  you're compiling on. The Fink installed version of ROOT for instance has this file
#  in a different location than the "normally installed" ROOT versions...
#
ARCH_LOC_1 := $(wildcard $(shell root-config --prefix)/test/Makefile.arch)
ARCH_LOC_2 := $(wildcard $(shell root-config --prefix)/share/root/test/Makefile.arch)
ARCH_LOC_3 := $(wildcard $(shell root-config --prefix)/share/doc/root/test/Makefile.arch)
ARCH_LOC_4 := $(wildcard $(shell root-config --prefix)/etc/Makefile.arch)
ARCH_LOC_5 := $(wildcard $(shell root-config --prefix)/etc/root/Makefile.arch)
ifneq ($(strip $(ARCH_LOC_1)),)
  $(info Using $(ARCH_LOC_1))
  include $(ARCH_LOC_1)
else
  ifneq ($(strip $(ARCH_LOC_2)),)
    $(info Using $(ARCH_LOC_2))
    include $(ARCH_LOC_2)
  else
    ifneq ($(strip $(ARCH_LOC_3)),)
      $(info Using $(ARCH_LOC_3))
      include $(ARCH_LOC_3)
    else
      ifneq ($(strip $(ARCH_LOC_4)),)
        $(info Using $(ARCH_LOC_4))
        include $(ARCH_LOC_4)
      else
        ifneq ($(strip $(ARCH_LOC_5)),)
          $(info Using $(ARCH_LOC_5))
          include $(ARCH_LOC_5)
        else
          $(error Could not find Makefile.arch!)
        endif
      endif
    endif
  endif
endif 

# Name of the library to create:
LIBRARY = TrigRootAnalysis

# Set the locations of some files
OBJDIR = ../standalone
DEPDIR = $(OBJDIR)/dep
DICTHEAD  = $(LIBRARY)_Dict.h
DICTFILE  = $(LIBRARY)_Dict.$(SrcSuf)
DICTOBJ   = $(OBJDIR)/$(LIBRARY)_Dict.$(ObjSuf)
DICTLDEF  = ../Root/LinkDef.h
INCLUDES += -I../
SKIPCPPLIST = $(DICTFILE)
SKIPHLIST   = $(DICTHEAD) $(DICTLDEF)
SHLIBFILE   = ../standalone/lib$(LIBRARY).$(DllSuf)
LIBFILE     = ../standalone/lib$(LIBRARY).a
VPATH  += $(OBJDIR) ../Root

# To get C++11 support with GCC:
#CXXFLAGS += -std=c++0x -std=gnu++0x

# To get C++11 support with clang:
#CXX       = clang++
#LD        = clang++
#CXXFLAGS += -std=c++0x -stdlib=libc++

# List of all header and source files to build
HLIST   = ../TrigRootAnalysis/ChainGroup.h ../TrigRootAnalysis/ChainGroupHandling.h \
			 ../TrigRootAnalysis/Conditions.h ../TrigRootAnalysis/ConfigAccess.h \
			 ../TrigRootAnalysis/DataAccess.h ../TrigRootAnalysis/IConfigAccess.h \
			 ../TrigRootAnalysis/IDataAccess.h ../TrigRootAnalysis/IITrigConfigSvcD3PD.h \
			 ../TrigRootAnalysis/TrigDecisionFunctions.h \
			 ../TrigRootAnalysis/PyTrigDecisionToolD3PD.h \
			 ../TrigRootAnalysis/TrigConfigSvcD3PD.h \
			 ../TrigRootAnalysis/TrigDecisionToolD3PD.h ../TrigRootAnalysis/VarHandle.h
CPPLIST = $(filter-out $(SKIPCPPLIST),$(wildcard ../Root/*.$(SrcSuf)))

# List of all object files to build
OLIST = $(patsubst %.$(SrcSuf),%.o,$(notdir $(CPPLIST)))

# The default is to create the shared library:
default: $(SHLIBFILE) $(LIBFILE)

%.$(ObjSuf): %.$(SrcSuf)
	@echo "Compiling $<"
	@mkdir -p $(OBJDIR)
	@$(CXX) $(CXXFLAGS) -Wall -c $< -o $(OBJDIR)/$(notdir $@) $(INCLUDES)

# Rule to create the dictionary
$(DICTFILE): $(HLIST) $(DICTLDEF)
	@echo "Generating dictionary $@"
	@$(shell root-config --exec-prefix)/bin/rootcint -f $(DICTFILE) -c -p $(INCLUDES) $^

# Rule to comile the dictionary
$(DICTOBJ): $(DICTFILE)
	@echo "Compiling $<"
	@mkdir -p $(OBJDIR)
	@$(CXX) $(CXXFLAGS) -Wall -c $(INCLUDES) -o $@ $<

# Rule to link the shared library
$(SHLIBFILE): $(OLIST) $(DICTOBJ)
	@echo "Making shared library: $(SHLIBFILE)"
	@rm -f $(SHLIBFILE)
ifneq (,$(findstring macosx,$(ARCH)))
	@$(LD) $(LDFLAGS) -dynamiclib -single_module -undefined dynamic_lookup -O2 $(addprefix $(OBJDIR)/,$(OLIST)) $(DICTOBJ) -o $(SHLIBFILE)
else
	@$(LD) $(LDFLAGS) $(SOFLAGS) -Wall $(addprefix $(OBJDIR)/,$(OLIST)) $(DICTOBJ) -o $(SHLIBFILE)
endif

# Rule to create the static library
$(LIBFILE): $(OLIST) $(DICTOBJ)
	@echo "Making static library: $(LIBFILE)"
	@rm -f $(LIBFILE)
	@ar rcs $@ $(addprefix $(OBJDIR)/,$(OLIST)) $(DICTOBJ)

# Rule to clean the directory
clean:
	@rm -f $(OBJDIR)/*.$(ObjSuf)
	@rm -f $(DICTOBJ)
	@rm -f $(DICTFILE) $(DICTHEAD)
	@rm -f $(SHLIBFILE)

distclean: clean
	@rm -rf $(OBJDIR)

#
# Calculate the dependencies for all the source files:
#
ifneq ($(MAKECMDGOALS),clean)
ifneq ($(MAKECMDGOALS),distclean)
-include $(foreach var,$(notdir $(CPPLIST:.$(SrcSuf)=.d)),$(DEPDIR)/$(var))
endif
endif

$(DEPDIR)/%.d: %.$(SrcSuf)
	@mkdir -p $(DEPDIR)
	@if test -f $< ; then \
		echo "Making $(@F)"; \
		$(SHELL) -ec '$(CXX) -MM $(CXXFLAGS) $(INCLUDES) $< | sed '\''/Cstd\/rw/d'\'' > $@'; \
	fi
