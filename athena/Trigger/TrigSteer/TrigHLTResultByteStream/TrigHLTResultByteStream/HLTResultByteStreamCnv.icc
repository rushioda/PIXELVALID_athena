// -*- c++ -*-

/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/


#include "TrigHLTResultByteStream/HLTResultByteStreamTool.h"
#include "TrigHLTResultByteStream/HLTSrcIdMap.h"

#include "ByteStreamCnvSvcBase/ByteStreamAddressL1R.h"
#include "ByteStreamData/RawEvent.h"
//#include "eformat/RawMemoryFragment.h"
//#include "eformat/RawMemorySimpleFragment.h"

#include "GaudiKernel/MsgStream.h"
#include "GaudiKernel/CnvFactory.h"
#include "GaudiKernel/StatusCode.h"
#include "GaudiKernel/DataObject.h"
#include "GaudiKernel/IRegistry.h"

#include "TrigSteeringEvent/HLTResult.h"

#include "StoreGate/StoreGate.h"
//#include "StoreGate/tools/ClassID_traits.h"
#include "CLIDSvc/CLASS_DEF.h"

// Tool
#include "GaudiKernel/IToolSvc.h"

#include <map>

/**
    Constructor
*/
template <class ROBF>
HLT::HLTResultByteStreamCnv<ROBF>::HLTResultByteStreamCnv(ISvcLocator* svcloc) :
    Converter(ByteStream_StorageType, classID(), svcloc)
{
}

/**
   CLID
*/
template <class ROBF>
const CLID& HLT::HLTResultByteStreamCnv<ROBF>::classID(){
return ClassID_traits<HLTResult>::ID() ;
}


/**
    Init method gets all necessary services etc.
*/
template <class ROBF>
StatusCode HLT::HLTResultByteStreamCnv<ROBF>::initialize()
{
   StatusCode sc = Converter::initialize();
   if(StatusCode::SUCCESS!=sc)
   {
    return sc;
   }

   m_log = new MsgStream(messageService(), "HLTResultByteStreamCnv");
   (*m_log) << MSG::DEBUG<< " initialize " <<endreq;

   // Check ByteStreamCnvSvc
   IService* svc ;
   sc = serviceLocator()->getService("ByteStreamCnvSvc", svc);
   if(sc != StatusCode::SUCCESS ) {
     (*m_log)<<MSG::ERROR << " HLTResultByteStreamCnv: Can't get ByteStreamCnvSvc " <<endreq;
     return sc ;
   }

/*
   m_eventAccess = dynamic_cast<IByteStreamEventAccess*> (svc);
   if(m_eventAccess == 0 ) {
     (*m_log)<<MSG::ERROR<< " HLTResultByteStreamCnv: Can't cast to IByteStreamEventAccess " <<endreq;
     return StatusCode::FAILURE ;
   }
*/


   //IByteStreamEventAccess* m_eventAccess ;
   sc = service("ByteStreamCnvSvc", m_eventAccess);
   if(m_eventAccess==0){
     (*m_log)<<MSG::ERROR<< "  Cant cast to  IByteStreamEventAccess " <<endreq;
     return StatusCode::FAILURE ;
   }


   /* retrieve Tool */

   IToolSvc* toolSvc;
   if(StatusCode::SUCCESS != service("ToolSvc",toolSvc)){
     (*m_log) << MSG::ERROR << " Can't get ToolSvc " << endreq;
     return StatusCode::FAILURE;
   }

   std::string toolType = "HLTResultByteStreamTool" ;
   if(StatusCode::SUCCESS !=toolSvc->retrieveTool(toolType,m_tool))
   {
     (*m_log) << MSG::ERROR << " Can't get ByteStreamTool " << endreq;
     return StatusCode::FAILURE;
   }

   return StatusCode::SUCCESS;
}


/**
    Finalize method gets all necessary services etc.
*/
template <class ROBF>
StatusCode HLT::HLTResultByteStreamCnv<ROBF>::finalize()
{
  delete m_log;
  return StatusCode::SUCCESS;
}

/**
   createObj should create the RDO from bytestream.
 */
template <class ROBF>
StatusCode
HLT::HLTResultByteStreamCnv<ROBF>::createObj(IOpaqueAddress* pAddr, DataObject*& pObj)
{


  ByteStreamAddressL1R *pAddrL2;
  pAddrL2 = dynamic_cast<ByteStreamAddressL1R*>(pAddr);
  if(!pAddrL2) {
    (*m_log) << MSG::ERROR << " Cannot cast to ByteStreamAddress " << endreq ;
    return StatusCode::FAILURE;
  }

  //HLTResult* result ;
  HLTResult* result=new HLTResult();

//  const ROBF* rob = (const ROBF*) pAddrL2->getPointer();
  const ROBF* rob =  pAddrL2->getPointer();

  // Convert to Object
  m_tool->convert(rob, result, m_log);

  (*m_log) << MSG::DEBUG<<" Created Objects   "<< *(pAddrL2->par())<<endreq;

  pObj = StoreGateSvc::asStorable( result ) ;
  return StatusCode::SUCCESS;

}

/**
   createRep should create the bytestream from RDOs.
 */
template <class ROBF>
StatusCode
HLT::HLTResultByteStreamCnv<ROBF>::createRep(DataObject* pObj, IOpaqueAddress*& pAddr)
{

   RawEvent* re = m_eventAccess->getRawEvent();

   HLTResult* result;
   StoreGateSvc::fromStorable(pObj,result);
   if(!result){
    (*m_log) << MSG::ERROR << " Cannot cast to HLTResult " << endreq ;
    return StatusCode::FAILURE;
   }

   std::string nm = pObj->registry()->name();

   ByteStreamAddressL1R* addr = new ByteStreamAddressL1R(classID(),nm,"");

   pAddr = addr;

   return m_tool->convert(result, re, m_log);

}
