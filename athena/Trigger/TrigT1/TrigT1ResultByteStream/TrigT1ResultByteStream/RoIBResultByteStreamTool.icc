// Dear emacs, this is -*- c++ -*-

/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

#ifndef TRIGT1RESULTBYTESTREAM_ROIBRESULTBYTESTREAMTOOL_ICC
#define TRIGT1RESULTBYTESTREAM_ROIBRESULTBYTESTREAMTOOL_ICC

#include <exception>

// eformat include(s):
#include "eformat/SourceIdentifier.h"

// Trigger include(s):
#include "TrigT1Result/RoIBResult.h"
#include "TrigT1Result/L1TopoResult.h"
#include "L1TopoRDO/L1TopoRDO.h"
#include "CTPfragment/CTPfragment.h"
#include "CTPfragment/CTPdataformat.h"

/**
 * Conversion from eformat::ROBFragments to RDO.
 * This is called from the RoIBResultByteStreamCnv::createObj method.
 */
template< class ROBF >
StatusCode RoIBResultByteStreamTool::convert( const std::vector< ROBF >& robs,
                                              ROIB::RoIBResult*& result ) {

  ATH_MSG_DEBUG("executing convert() from ROBFragments to RDO");

  /* Create all RDOs */
  ROIB::CTPResult cTPResult;
  ROIB::MuCTPIResult muCTPIResult;
  std::vector< ROIB::EMTauResult > eMTauResult( 4 );
  std::vector< ROIB::JetEnergyResult > jetEnergyResult( 2 );
  std::vector< ROIB::L1TopoResult > l1TopoResult;

  /* Create a few flags indicating whether or not ROB fragment was found. */
  bool cTPFound( false ), muCTPIFound( false );
  bool jetEnergyFound[ 2 ] = { false, false };
  bool eMTauFound[ 4 ] = { false, false, false, false };
  bool l1TopoFound( false );

  /* Loop over ROB fragments. */
  for( unsigned int i = 0; i < robs.size(); ++i ) {

    /* Select the current ROB fragment. */
    const ROBF rob = robs[i];

    /* Get format version and event number of fragment. */
    uint32_t formatVersion = rob.rod_version();
    uint32_t evtNum = rob.rod_lvl1_id();
    uint32_t robFragSize = rob.fragment_size_word();
    uint32_t rodFragSize = rob.rod_fragment_size_word();
    uint32_t robId = rob.source_id();

    /* Check for errors */
    bool error_rob(false);
    bool error_rod(false);
    try{
      if (rob.check_rob()){
	ATH_MSG_VERBOSE( "ROB fragment checked ok" );
      }
    }
    catch (std::exception const & ex){
      ATH_MSG_WARNING( "ROB fragment not valid: " << ex.what() );
      error_rob=true;
    }
    try{
      if (rob.check_rod()){
	ATH_MSG_VERBOSE( "ROD fragment checked ok");
      }
    }
    catch (std::exception const & ex){
      ATH_MSG_WARNING( "ROD fragment not valid: " << ex.what() );
      error_rod=true;
    }

    /* get ROD source ID */
    uint32_t rodId = rob.rod_source_id();
    DataType status;
    rob.rod_status( status );
    uint32_t nstatus = rob.rod_nstatus();
    ATH_MSG_VERBOSE("Number of status words: " << nstatus);
    if (msgLvl(MSG::VERBOSE)) {
      for( uint32_t i = 0; i < nstatus; ++i, ++status ) {
        ATH_MSG_VERBOSE("   Status word: 0x" << MSG::hex << std::setw( 8 )
            << std::setfill( '0' ) << *status);
      }
    }
    rob.rod_status( status );

    /* Care for the errors. */
    uint32_t errorStat( 0 );
    if( nstatus > 0 ) errorStat = static_cast< uint32_t >( *status );
    uint32_t statInfo( 0 );
    if( nstatus > 1 ) {
       ++status;
       statInfo = static_cast< uint32_t >( *status );
    }

    ATH_MSG_DEBUG("ROB ID 0x" << MSG::hex << robId <<  " ROD ID 0x" 
        << rodId << MSG::dec << " ROB fragment size " 
        << robFragSize << " ROD fragment size " << rodFragSize);

    /* CTP ROB */
    eformat::helper::SourceIdentifier helpCTPID( eformat::TDAQ_CTP, m_ctpModuleID );
    eformat::helper::SourceIdentifier helpCTPID_II( eformat::TDAQ_CTP, 0 );
    
    ATH_MSG_DEBUG("Check ROD ID against CTP 0x" << MSG::hex 
	<< helpCTPID.code() << MSG::dec);
    if( rodId == helpCTPID.code() || 
        // this is a hack to catch the early data with the old CTP
        // firmware, which assigns 0x770000 to both DAQ and LVL2 ROD
        // fragment - for this data we readout always multiple
        // bunches for the DAQ ROD, therefore rodFragSize=46 should
        // identify the LVL2 ROD fragment 
        ( rodId == helpCTPID_II.code() && rodFragSize == 46 ) ) {

      if( rodId == helpCTPID_II.code() && rodFragSize == 46 ) {
        ATH_MSG_DEBUG("Take CTP ROD fragment with ID 0x" << MSG::hex << rodId << MSG::dec );
      }
      ATH_MSG_DEBUG("   Found CTP ROB.");
      ATH_MSG_VERBOSE("   Dumping RoI Words:");

      /* Celebrate finding the ROD */
      cTPFound = true;
      /* Create header */
      ROIB::Header cTPHead( rodId, evtNum, formatVersion );
      /* Create content body */
      DataType data;
      rob.rod_data( data );
      uint32_t ndata = rob.rod_ndata();
      std::vector< ROIB::CTPRoI > cTPContent;
      cTPContent.reserve(ndata);
      for( uint32_t i = 0; i < ndata; ++i, ++data ) {
        ATH_MSG_VERBOSE("       0x" << MSG::hex << std::setw( 8 )
            << static_cast< uint32_t >( *data ));
        ROIB::CTPRoI thisRoI( static_cast<uint32_t>( *data ) );
        cTPContent.push_back( thisRoI );
      }
      /* Create Trailer */
      std::vector< uint32_t > words;
      words.reserve(5);
      words.push_back( errorStat );         // error status
      words.push_back( statInfo );          // status info
      words.push_back( 2 );                 // number of status words
      words.push_back( cTPContent.size() ); // number of data words
      words.push_back( 1 );                 // status block position
      ROIB::Trailer cTPTrail( words );

      /* Create CTPResult object */
			const uint32_t* rod;
			rob.rod_start(rod);
			unsigned int ctpVersionNumber = ((rod[CTPdataformat::Helper::FormatVersionPos] >> CTPdataformat::CTPFormatVersionShift )& CTPdataformat::CTPFormatVersionMask);
			//eformat::ROBFragment<const uint32_t*> * p_rob = &rob;
			//unsigned int ctpVersionNumber =	CTPfragment::ctpFormatVersion(p_rob);
      cTPResult = ROIB::CTPResult(ctpVersionNumber, cTPHead, cTPTrail, cTPContent );

    } /* end of CTP ROB */

    /* MuCTPI ROB */
    eformat::helper::SourceIdentifier helpMuonID( eformat::TDAQ_MUON_CTP_INTERFACE, m_muCTPIModuleID );
    if( rodId == helpMuonID.code() ) {

      ATH_MSG_DEBUG( "   Found MuCTPI ROB.");
      ATH_MSG_VERBOSE( "   Dumping RoI Words:");

      /* Celebrate finding the ROB */
      muCTPIFound = true;
      /* Create header */
      ROIB::Header muCTPIHead( rodId, evtNum, formatVersion);
      /* Create content body */
      DataType data;
      rob.rod_data( data );
      uint32_t ndata = rob.rod_ndata();
      std::vector< ROIB::MuCTPIRoI > muCTPIContent;
      muCTPIContent.reserve(ndata);
      for( uint32_t i = 0; i < ndata; ++i, ++data ) {
        ATH_MSG_VERBOSE("       0x" << MSG::hex << std::setw( 8 )
            << static_cast< uint32_t >( *data ));
        ROIB::MuCTPIRoI thisRoI( static_cast< uint32_t >( *data ) );
        muCTPIContent.push_back( thisRoI );
      }

      /* Create trailer */
      std::vector< uint32_t > words;
      words.reserve(5);
      words.push_back( errorStat );            // error status
      words.push_back( statInfo );             // status info
      words.push_back( 2 );                    // number of status words
      words.push_back( muCTPIContent.size() ); // number of data words
      words.push_back( 1 );                    // status block position
      ROIB::Trailer muCTPITrail( words );

      /* Create MuCTPIResult object */
      muCTPIResult = ROIB::MuCTPIResult( muCTPIHead, muCTPITrail, muCTPIContent );

    } /* end of MuCTPI ROB */

    /* Jet ROBs. */
	 eformat::helper::SourceIdentifier helpJetID_0( eformat::TDAQ_CALO_JET_PROC_ROI, m_jetModuleID[0] );
	 eformat::helper::SourceIdentifier helpJetID_1( eformat::TDAQ_CALO_JET_PROC_ROI, m_jetModuleID[1] );
    if( rodId == helpJetID_0.code() || rodId == helpJetID_1.code() ) {

      ATH_MSG_DEBUG("   Found Jet/Energy ROB.");
      ATH_MSG_VERBOSE("   Dumping RoI Words:");

      /* Create header */
      ROIB::Header jetEnergyHead( rodId, evtNum, formatVersion );
      /* Create content body */
      DataType data;
      rob.rod_data( data );
      uint32_t ndata = rob.rod_ndata();
      std::vector< ROIB::JetEnergyRoI > jetEnergyContent;
      jetEnergyContent.reserve(ndata);
      for( uint32_t i = 0; i < ndata; ++i, ++data ) {
        ATH_MSG_VERBOSE("       0x" << MSG::hex << std::setw( 8 )
            << static_cast< uint32_t >( *data ));
        ROIB::JetEnergyRoI thisRoI( static_cast< uint32_t >( *data ) );
        jetEnergyContent.push_back( thisRoI );
      }
      /* Create trailer */
      std::vector< uint32_t > words;
      words.reserve(5);
      words.push_back( errorStat );               // error status
      words.push_back( statInfo );                // status info
      words.push_back( 2 );                       // number of status words
      words.push_back( jetEnergyContent.size() ); // number of data words
      words.push_back( 1 );                       // status block position
      ROIB::Trailer jetEnergyTrail( words );

      /* Create JetEnergyResult object */
      int jetEnergySlink( rodId - helpJetID_0.code() );
      if( jetEnergySlink == 0 || jetEnergySlink == 1 ) {
        jetEnergyResult[ jetEnergySlink ] = ROIB::JetEnergyResult( jetEnergyHead, jetEnergyTrail, jetEnergyContent );
        jetEnergyFound[ jetEnergySlink ] = true;
      }

    } /* end of JetEnergy ROBs */

    /* EMTau ROBs */
	 eformat::helper::SourceIdentifier helpEMTauID_0( eformat::TDAQ_CALO_CLUSTER_PROC_ROI, m_emModuleID[0] );
	 eformat::helper::SourceIdentifier helpEMTauID_1( eformat::TDAQ_CALO_CLUSTER_PROC_ROI, m_emModuleID[1] );
	 eformat::helper::SourceIdentifier helpEMTauID_2( eformat::TDAQ_CALO_CLUSTER_PROC_ROI, m_emModuleID[2] );
	 eformat::helper::SourceIdentifier helpEMTauID_3( eformat::TDAQ_CALO_CLUSTER_PROC_ROI, m_emModuleID[3] );
    if( rodId == helpEMTauID_0.code() || rodId == helpEMTauID_1.code() ||
        rodId == helpEMTauID_2.code() || rodId == helpEMTauID_3.code() ) {

      ATH_MSG_DEBUG("   Found EM/Tau ROB.");
      ATH_MSG_VERBOSE("   Dumping RoI Words:");

      /* Create header */
      ROIB::Header eMTauHead( rodId, evtNum, formatVersion );
      /* Create content body */
      DataType data;
      rob.rod_data( data );
      uint32_t ndata = rob.rod_ndata();
      std::vector<ROIB::EMTauRoI> eMTauContent;
      eMTauContent.reserve(ndata);
      for( uint32_t i = 0; i < ndata; ++i, ++data ) {
        ATH_MSG_VERBOSE("       0x" << MSG::hex << std::setw( 8 )
            << static_cast< uint32_t >( *data ));
        ROIB::EMTauRoI thisRoI( static_cast<uint32_t>( *data ) );
        eMTauContent.push_back( thisRoI );
      }
      /* Create Trailer */
      std::vector< uint32_t > words;
      words.reserve(5);
      words.push_back( errorStat );           // error status
      words.push_back( statInfo );            // status info
      words.push_back( 2 );                   // number of status words
      words.push_back( eMTauContent.size() ); // number of data words
      words.push_back( 1 );                   // status block position
      ROIB::Trailer eMTauTrail( words );

      /* Create EMTauResult object */
      int eMTauSlink( rodId - helpEMTauID_0.code() );
      if( eMTauSlink==0 || eMTauSlink==1 || eMTauSlink==2 || eMTauSlink==3) {
        eMTauResult[ eMTauSlink ] = ROIB::EMTauResult( eMTauHead, eMTauTrail, eMTauContent );
        eMTauFound[ eMTauSlink ] = true;
      }

    } /* end of EMTau ROBs */

    /* L1Topo ROI ROB */
    bool matchedTopoCode(false);
    for (unsigned int mid: m_l1TopoModuleID){ 
      eformat::helper::SourceIdentifier helpL1TopoID( eformat::TDAQ_CALO_TOPO_PROC, mid );
      ATH_MSG_DEBUG( "Check ROD ID 0x" << MSG::hex << rodId 
                     << " against L1Topo 0x" << MSG::hex 
                     << helpL1TopoID.code() << MSG::dec );
      if( rodId == helpL1TopoID.code() ){
        matchedTopoCode=true;
        break;
      }
    } // loop over m_l1TopoModuleID

    if (matchedTopoCode) {
      ATH_MSG_DEBUG( "   Found L1Topo ROB with source Id " 
                     << MSG::hex << rodId << MSG::dec );
      /* Create header */
      ROIB::Header l1TopoHead( rodId, evtNum, formatVersion );
      /* Create content body */
      DataType data;
      rob.rod_data( data );
      uint32_t ndata = rob.rod_ndata();
      L1TopoRDO l1TopoContent;
      ATH_MSG_VERBOSE( "   Dumping RoI Words:" );
      std::vector<uint32_t> vDataWords;
      vDataWords.reserve(ndata);
      for ( uint32_t i = 0; i < ndata; ++i, ++data ) {
        vDataWords.push_back( static_cast<uint32_t>( *data ) );
        ATH_MSG_VERBOSE( "     0x" << MSG::hex << std::setfill ('0') << std::setw( 8 )  << static_cast<uint32_t>( *data ) << MSG::dec);
      }
      l1TopoContent.setDataWords(vDataWords);
      l1TopoContent.setSourceID(rodId);
      /* Create Trailer */
      std::vector< uint32_t > words;
      // the two status words
      words.reserve(5);
      words.push_back( errorStat );         // error status
      words.push_back( statInfo );          // status info
      l1TopoContent.setStatusWords(words);  // copy 2 status words to RDO
      words.push_back( 2 );                 // number of status words
      words.push_back( ndata );             // number of data words
      words.push_back( 1 );                 // status block position
      ROIB::Trailer l1TopoTrail( words );

      /* Check for non-zero status word */
      bool error_status(false);
      if (errorStat!=0){
	ATH_MSG_WARNING( "non-zero first status word, payload may not be valid" );
	error_status=true;
      }
      /* Flag errors in RDO */
      if (error_status) {
	l1TopoContent.setError(L1Topo::Error::SLINK_STATUS_ERROR);
      }
      if (error_rob){
	l1TopoContent.setError(L1Topo::Error::ROB_ERROR);
      }
      if (error_rod){
	l1TopoContent.setError(L1Topo::Error::ROD_ERROR);
      }

      /* Create L1TopoResult object */
      l1TopoResult.push_back( ROIB::L1TopoResult(l1TopoHead, l1TopoTrail, l1TopoContent) );
      /* Flag that at least one ROD was found */
      l1TopoFound = true;

    } /* end of L1Topo ROB */

  } /* End of loop over all ROB fragments. */

  /* create the top object and fill it. */
  if( cTPFound && muCTPIFound && jetEnergyFound[ 0 ] && jetEnergyFound[ 1 ] &&
      eMTauFound[ 0 ] && eMTauFound[ 1 ] && eMTauFound[ 2 ] && eMTauFound[ 3 ] ) {

    result = new ROIB::RoIBResult( muCTPIResult, cTPResult, jetEnergyResult, eMTauResult );
    ATH_MSG_DEBUG("All RoI Builder ROB fragments found");

  } else if( cTPFound && jetEnergyFound[ 0 ] && jetEnergyFound[ 1 ] &&
             eMTauFound[ 0 ] && eMTauFound[ 1 ] && eMTauFound[ 2 ] && eMTauFound[ 3 ] ) {

    result = new ROIB::RoIBResult( cTPResult, eMTauResult, jetEnergyResult );
    ATH_MSG_DEBUG("MuCTPI ROB fragment not found, built RoIBResult object without it.");

  } else if( cTPFound && eMTauFound[ 0 ] && eMTauFound[ 1 ] &&
             eMTauFound[ 2 ] && eMTauFound[ 3 ] ) {

    result = new ROIB::RoIBResult( cTPResult, eMTauResult );
    ATH_MSG_DEBUG("MuCTPI and Jet/Energy fragments not found, built RoIBResult object without them.");

  } else if( cTPFound && muCTPIFound ) {
	  // jetEnergyResult and eMTauResult are empty
    result = new ROIB::RoIBResult( muCTPIResult, cTPResult, jetEnergyResult, eMTauResult );
    ATH_MSG_DEBUG("Calo fragments not found, built RoIBResult from CTPResult and MuCTPIResult only.");

  } else if( cTPFound ) {

    result = new ROIB::RoIBResult( cTPResult );
    ATH_MSG_DEBUG("MuCTPI and calo fragments not found, built RoIBResult from CTPResult only.");

  } else {
    result = new ROIB::RoIBResult();
    ATH_MSG_DEBUG("No LVL1 fragments found, create empty RoIBResult.");
  }

  if( l1TopoFound ){
    result->l1TopoResult(l1TopoResult);
    ATH_MSG_DEBUG( "Adding L1Topo fragment(s) to RoIBResult" );
  }

  return StatusCode::SUCCESS;
}

#endif // TRIGT1RESULTBYTESTREAM_ROIBRESULTBYTESTREAMTOOL_ICC
