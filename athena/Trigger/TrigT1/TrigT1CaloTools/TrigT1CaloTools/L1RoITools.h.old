///////////////////////////////////////////////////////////////////
// L1RoITools.h, 
///////////////////////////////////////////////////////////////////

 /***************************************************************************
  *                                                                         *
  *                                                                         *
  ***************************************************************************/

#ifndef LVL1L1ROITOOLS_H
#define LVL1L1ROITOOLS_H

#include "AthenaBaseComps/AthAlgTool.h"
#include "GaudiKernel/ToolHandle.h"
#include "TrigT1CaloToolInterfaces/IL1RoITools.h"
#include "TrigT1CaloToolInterfaces/IL1JetElementTools.h"
#include "TrigT1CaloToolInterfaces/IL1EmTauTools.h"
#include "TrigT1CaloToolInterfaces/IL1JetTools.h"
#include "TrigT1CaloToolInterfaces/IL1EtTools.h"
#include "TrigT1CaloToolInterfaces/IL1JetEtTools.h"
#include "TrigT1CaloToolInterfaces/IL1TriggerTowerTool.h"
#include "TrigT1CaloEvent/TriggerTower.h"
#include "TrigT1CaloEvent/JetElement.h"
#include "xAODTrigL1Calo/JetElementContainer.h"
#include "xAODTrigL1Calo/JetElementAuxContainer.h"
#include "TrigT1CaloUtils/CPAlgorithm.h"
#include "TrigT1CaloUtils/JetAlgorithm.h"
#include "TrigT1CaloUtils/SystemEnergy.h"
#include "AnalysisTriggerEvent/LVL1_ROI.h"
#include "AnalysisTriggerEvent/EmTau_ROI.h"
#include "AnalysisTriggerEvent/Jet_ROI.h"
#include "AnalysisTriggerEvent/JetET_ROI.h"
#include "AnalysisTriggerEvent/EnergySum_ROI.h"
#include "TrigConfInterfaces/ITrigConfigSvc.h"

class AtlasDetectorID;
class Identifier;

namespace LVL1 
{

  /** @class L1RoITools

      This is a tool to reconstruct the L1 EM/tau trigger sums
      for a particula]
      r RoI location from the stored TriggerTowers.
      Used for offline monitoring and trigger reconstruction.

      Useage: L1RoITools->mapTowers() // set up event for analysis
              L1RoITools->formSums(eta, phi) // for each RoI
              L1RoITools->EmClus() // etc. Return values
      
      @author  Alan Watson <Alan.Watson@cern.ch>
  */  

  class L1RoITools : virtual public IL1RoITools, public AthAlgTool
    {
    public:
      
      L1RoITools(const std::string&,const std::string&,const IInterface*);

       /** default destructor */
      virtual ~L1RoITools ();
      
       /** standard Athena-Algorithm method */
      virtual StatusCode initialize();
       /** standard Athena-Algorithm method */
      virtual StatusCode finalize  ();
      
      /** Analysis tool: form AnalysisTriggerEvent (AOD) RoI objects from Trigger Towers */
     virtual void findROIs(const DataVector<TriggerTower>* tts, LVL1_ROI& rois, int slice = -1);
     /** Form vector of EmTau_ROI */
     virtual void findEmTauROIs(const DataVector<TriggerTower>* tts, std::vector<EmTau_ROI>& rois, int slice = -1);
     /** Form vector of Jet_ROI */
     virtual void findJetROIs(const DataVector<TriggerTower>* tts, std::vector<Jet_ROI>& rois, int slice = -1);
     virtual void findJetROIs(const DataVector<JetElement>* jes, std::vector<Jet_ROI>& rois, int slice = -1);
     /** Form vector of EnergySum_ROI */
     virtual void findEnergySumROI(const DataVector<TriggerTower>* tts, std::vector<EnergySum_ROI>& rois, int slice = -1);
     virtual void findEnergySumROI(const DataVector<xAOD::JetElement>* jes, std::vector<EnergySum_ROI>& rois, int slice = -1);
     /** Form JetET_ROI */
     virtual void findJetETROI(const std::vector<Jet_ROI>& jets, std::vector<JetET_ROI>& rois);
     
     /** Find TriggerTower IDs for a given RoI */
     virtual void findEmTauTTIDs(float roiEta, float roiPhi, std::vector<unsigned int>& coolIDs);
     virtual void findEmTauTTIDs(const EmTau_ROI& roi, std::vector<unsigned int>& coolIDs);
     virtual void findJetTTIDs(float roiEta, float roiPhi, std::vector<unsigned int>& coolIDs);
     virtual void findJetTTIDs(const Jet_ROI& roi, std::vector<unsigned int>& coolIDs);
            
    private:

      /** pointer to LVL1ConfigSvc */
      ServiceHandle<TrigConf::ITrigConfigSvc> m_configSvc;

     /** Pointers to other tools used by this one */
     ToolHandle<LVL1::IL1JetElementTools>  m_JetElementTool;
     ToolHandle<LVL1::IL1EmTauTools>       m_EmTauTool;
     ToolHandle<LVL1::IL1JetTools>         m_JetTool;
     ToolHandle<LVL1::IL1EtTools>          m_EtTool;
     ToolHandle<LVL1::IL1JetEtTools>       m_JetEtTool;
     ToolHandle<LVL1::IL1TriggerTowerTool> m_TriggerTowerTool;

     /** member variables for algorithm properties: */

     static const int m_MeV = 1000;

    };
} // end of namespace

#endif 
