///////////////////////////////////////////////////////////////////
// L1RoITools.cxx,  
///////////////////////////////////////////////////////////////////

#include "TrigT1CaloTools/L1RoITools.h"
#include "TrigT1Interfaces/TrigT1CaloDefs.h"
#include "TrigT1CaloCalibConditions/L1CaloCoolChannelId.h"
#include "TrigT1CaloUtils/JetElementKeyBase.h"

#include <cmath>

namespace LVL1 {

/** Constructor */

L1RoITools::L1RoITools(const std::string& t,
			  const std::string& n,
			  const IInterface*  p )
  :
  AthAlgTool(t,n,p),
  m_configSvc("TrigConf::TrigConfigSvc/TrigConfigSvc", n),
  m_JetElementTool("LVL1::L1JetElementTools/L1JetElementTools"),
  m_EmTauTool("LVL1::L1EmTauTools/L1EmTauTools"),
  m_JetTool("LVL1::L1JetTools/L1JetTools"),
  m_EtTool("LVL1::L1EtTools/L1EtTools"),
  m_JetEtTool("LVL1::L1JetEtTools/L1JetEtTools"),
  m_TriggerTowerTool("LVL1::L1TriggerTowerTool/L1TriggerTowerTool")
{
  declareInterface<IL1RoITools>(this);

  declareProperty( "LVL1ConfigSvc", m_configSvc, "LVL1 Config Service");

}

/** Destructor */

L1RoITools::~L1RoITools()
{       
}


/** Initialisation */

StatusCode L1RoITools::initialize()
{  
  /// Retrieve TrigT1CaloTools
  StatusCode sc = m_JetElementTool.retrieve();
  if (sc.isFailure()) {
    ATH_MSG_ERROR( "Problem retrieving JetElementTool. Abort execution" );
    return StatusCode::SUCCESS;
  }
  sc = m_EmTauTool.retrieve();
  if (sc.isFailure()) {
    ATH_MSG_ERROR( "Problem retrieving EmTauTool. Abort execution" );
    return StatusCode::SUCCESS;
  }
  sc = m_JetTool.retrieve();
  if (sc.isFailure()) {
    ATH_MSG_ERROR( "Problem retrieving JetTool. Abort execution" );
    return StatusCode::SUCCESS;
  }
  sc = m_EtTool.retrieve();
  if (sc.isFailure()) {
    ATH_MSG_ERROR( "Problem retrieving EtTool. Abort execution" );
    return StatusCode::SUCCESS;
  }
  sc = m_JetEtTool.retrieve();
  if (sc.isFailure()) {
    ATH_MSG_ERROR( "Problem retrieving JetEtTool. Abort execution" );
    return StatusCode::SUCCESS;
  }
  sc = m_TriggerTowerTool.retrieve();
  if (sc.isFailure()) {
    ATH_MSG_ERROR( "Problem retrieving TriggerTowerTool. Abort execution" );
    return StatusCode::SUCCESS;
  }

  ATH_MSG_INFO( "Initialization completed" );
  
  return sc;
}

/** Finalisation */

StatusCode L1RoITools::finalize()
{
  return StatusCode::SUCCESS;
}

/** Fill a LVL1_ROI with calorimeter trigger results computed from a set of TriggerTowers */
void L1RoITools::findROIs(const DataVector<TriggerTower>* tts, LVL1_ROI& rois, int slice) {

  rois.clear();

  /** Form the different types of RoI object from the TriggerTowers */
  std::vector<EmTau_ROI> emtauRoIs;
  findEmTauROIs(tts, emtauRoIs, slice);

  std::vector<Jet_ROI> jetRoIs;
  findJetROIs(tts, jetRoIs, slice);

  std::vector<JetET_ROI> jetetRoIs;
  findJetETROI(jetRoIs, jetetRoIs);
 
  std::vector<EnergySum_ROI> energyRoIs;
  findEnergySumROI(tts, energyRoIs, slice);

  /** Fill the LVL1_ROI */
  for (std::vector<EmTau_ROI>::const_iterator it = emtauRoIs.begin(); 
       it != emtauRoIs.end(); ++it) rois.addEmTauROI((*it));
  for (std::vector<Jet_ROI>::const_iterator it = jetRoIs.begin(); 
       it != jetRoIs.end(); ++it) rois.addJetROI((*it));
  for (std::vector<JetET_ROI>::const_iterator it = jetetRoIs.begin(); 
       it != jetetRoIs.end(); ++it) rois.addJetETROI((*it));
  for (std::vector<EnergySum_ROI>::const_iterator it = energyRoIs.begin(); 
       it != energyRoIs.end(); ++it) rois.addEnergySumROI((*it));

}

/** Form list of EmTau_ROIs from user-supplied vector of TriggerTowers */
void L1RoITools::findEmTauROIs(const DataVector<TriggerTower>* tts, std::vector<EmTau_ROI>& rois, int slice){

  rois.clear();

  /** Need a vector to hold the CPAlgorithm objects */
  DataVector<CPAlgorithm>* intROIs = new DataVector<CPAlgorithm>;

  /** Now use L1EmTauTools to run EM/Tau algorithm on these towers */
  m_EmTauTool->findRoIs(tts, intROIs, slice);

  /** Now loop through CPAlgorithm objects and form EmTau_ROIs */
  DataVector<CPAlgorithm>::iterator it = intROIs->begin();
  for ( ; it!=intROIs->end() ; ++it){
     uint32_t roiword = (*it)->RoIWord();
     EmTau_ROI roi(roiword,(*it)->eta(),(*it)->phi(),roiword&0xFFFF);
     roi.setCore((*it)->Core()*m_MeV);
     roi.setEMClus((*it)->EMClus()*m_MeV);
     roi.setTauClus((*it)->TauClus()*m_MeV);
     roi.setEMIsol((*it)->EMIsol()*m_MeV);
     roi.setHadIsol((*it)->HadIsol()*m_MeV);
     roi.setHadCore((*it)->HadVeto()*m_MeV);
     rois.push_back(roi);
  }

  /** Clean up */
  delete intROIs;
}

/** Form list of Jet_ROIs from user-supplied vector of JetElements */
void L1RoITools::findJetROIs(const DataVector<JetElement>* jes, std::vector<Jet_ROI>& rois, int slice){

  rois.clear();

  /** Need a vector to hold the JetAlgorithm objects */
  DataVector<JetAlgorithm>* intROIs = new DataVector<JetAlgorithm>;

  /** Now use L1JetTools to run Jet algorithm on these data */
  m_JetTool->findRoIs(jes, intROIs, slice);

  /** Now loop through JetAlgorithm objects and form Jet_ROIs */
  DataVector<JetAlgorithm>::iterator it = intROIs->begin();
  for ( ; it!= intROIs->end() ; ++it) {
     uint32_t roiword = (*it)->RoIWord();
     Jet_ROI roi(roiword,(*it)->eta(),(*it)->phi(),roiword&0xFFFF);
     roi.setET4x4((*it)->ET4x4()*m_MeV);
     roi.setET6x6((*it)->ET6x6()*m_MeV);
     roi.setET8x8((*it)->ET8x8()*m_MeV);
     rois.push_back(roi);
  }

  /** Clean up */
  delete intROIs;
}

/** Form list of Jet_ROIs from user-supplied vector of TriggerTowers */
void L1RoITools::findJetROIs(const DataVector<TriggerTower>* tts, std::vector<Jet_ROI>& rois, int slice){

  /** Need to convert TriggerTowers to JetElements */
  DataVector<JetElement>* jes = new DataVector<JetElement>;
  m_JetElementTool->makeJetElements(tts, jes);

  /** Now use this tool to form Jet_ROIs from them */
  findJetROIs(jes, rois, slice);

  /** Clean up */
  delete jes;
}

/** Form list of EnergySum_ROI from user-supplied vector of JetElements */
void L1RoITools::findEnergySumROI(const DataVector<xAOD::JetElement>* jes, std::vector<EnergySum_ROI>& rois, int slice){

  rois.clear();

  /** Use L1EtTools to run EnergySum trigger algorithm on these data */
  SystemEnergy esum = m_EtTool->systemSums(jes, slice);

  /** Now form EnergySum_ROI */
  uint32_t roiword0 = esum.roiWord0();
  uint32_t roiword1 = esum.roiWord1();
  uint32_t roiword2 = esum.roiWord2();
  float Ex = esum.ex()*m_MeV;
  float Ey = esum.ey()*m_MeV;
  float Et = esum.et()*m_MeV;
  unsigned int overflows = esum.exOverflow() + (esum.eyOverflow()<<1) + (esum.etOverflow()<<2); 
  EnergySum_ROI roi(roiword0, roiword1, roiword2, Ex, Ey, Et, 
                    (roiword1>>16)&0xFF, (roiword2>>16)&0xFF, (roiword0>>16)&0xFF,
                    overflows);  
  rois.push_back(roi);

}

/** Form list of EnergySum_ROI from user-supplied vector of TriggerTowers */
void L1RoITools::findEnergySumROI(const DataVector<TriggerTower>* tts, std::vector<EnergySum_ROI>& rois, int slice){

  /** Need to convert TriggerTowers to JetElements */
  DataVector<xAOD::JetElement>* jes = new DataVector<xAOD::JetElement>;
  xAOD::JetElementAuxContainer* jeAux = new xAOD::JetElementAuxContainer;
  jes->setStore(jeAux);
  m_JetElementTool->makeJetElements(tts, jes);

  /** Now use this tool to form EnergySum_ROIs from them */
  findEnergySumROI(jes, rois, slice);

  delete jes;
  delete jeAux;
}


/** Form list of JetET_ROI from user-supplied vector of Jet_ROI */
void L1RoITools::findJetETROI(const std::vector<Jet_ROI>& jets, std::vector<JetET_ROI>& rois){

  /** Compute JetET sum */
  unsigned int jetET = m_JetEtTool->jetEtSum(jets);

  /** Obtain RoIword and form JetET_ROI */
  uint32_t roiWord = m_JetEtTool->jetEtRoIWord(jetET);
  JetET_ROI roi(roiWord, roiWord & 0xF);
  rois.push_back(roi);

}


/** Obtain list of TriggerTower IDs for an EmTau_ROI object */
void L1RoITools::findEmTauTTIDs(const EmTau_ROI& roi, std::vector<unsigned int>& coolIDs) {
  
  findEmTauTTIDs(roi.eta(), roi.phi(), coolIDs);
  
}


/** Obtain list of TriggerTower IDs for an EM/Tau RoI at a given coordinate */
void L1RoITools::findEmTauTTIDs(float roiEta, float roiPhi, std::vector<unsigned int>& coolIDs) {
  
  /** Start with a clean vector */
  coolIDs.clear();
  
  /** Get TTKey for reference tower. Offsets are to avoid rounding problems */
  TriggerTowerKey get(roiPhi-M_PI/128., roiEta-0.025);
  Coordinate refCoord = get.coord();
  double refEta = refCoord.eta();
  double refPhi = refCoord.phi();

  /** Loop over neighbours, find coordinates and hence CoolIDs */
  for (int etaOffset = -1; etaOffset <= 2; etaOffset++) {
    float tempEta = refEta + etaOffset*0.1;
    for (int phiOffset = -1; phiOffset <= 2; phiOffset++) {
      double tempPhi = refPhi + phiOffset*M_PI/32;
      TriggerTowerKey key(tempPhi, tempEta);
      double eta = key.eta();
      double phi = key.phi();
      
      if (fabs(eta)<2.5) { /// Coverage of EM/Tau Trigger
        L1CaloCoolChannelId idEM = m_TriggerTowerTool->channelID(eta, phi, 0);
        L1CaloCoolChannelId idHad = m_TriggerTowerTool->channelID(eta, phi, 1);
        coolIDs.push_back(idEM.id());
        coolIDs.push_back(idHad.id());
      }
      
    }
  }
  
}



/** Obtain list of TriggerTower IDs for an EmTau_ROI object */
void L1RoITools::findJetTTIDs(const Jet_ROI& roi, std::vector<unsigned int>& coolIDs) {
  
  findJetTTIDs(roi.eta(), roi.phi(), coolIDs);
  
}


/** Obtain list of TriggerTower IDs for an EM/Tau RoI at a given coordinate */
void L1RoITools::findJetTTIDs(float roiEta, float roiPhi, std::vector<unsigned int>& coolIDs) {
  
  /** Start with a clean vector */
  coolIDs.clear();

  // Offset needed to protect against rounding errors. But this depends on eta, so a 2-stage process:
  JetInputKey get(roiPhi-0.01, roiEta-0.01);
  double de = get.dEta()/4.;
  
  // Get coordinate of centre of this "reference element"
  Coordinate refCoord = get.getCentre(roiPhi-M_PI/64., roiEta-de);
  double refEta = refCoord.eta();
  double refPhi = refCoord.phi();

  // Get coordinate of bottom-left JetInput in this window
  int minEtaOffset = -1;
  Coordinate startCoord = get.lowerLeft(refPhi,refEta);
  if (startCoord.eta() == TrigT1CaloDefs::RegionERROREtaCentre) { // already at left edge
    startCoord = get.downPhi(refPhi,refEta);
    minEtaOffset = 0;
  }
  double tempEta = startCoord.eta();
  double startPhi = startCoord.phi();
    
  /** Need this to check that FCAL TTs haven't been double counted
      (TT to JetInput mapping = 1 -> 2, so care needed with this) */
  std::map<unsigned int, int> usedFCALTTs;
    
  /** Now loop over JetInputs within window */

  for (int etaOffset=minEtaOffset; etaOffset<=2 ; etaOffset++){
    Coordinate tempCoord(startPhi,tempEta);
    for (int phiOffset=-1; phiOffset<=2 ; phiOffset++){
      // Get the JetInput coordinates.
      // Calculate corresponding TriggerTower coordinates`
      JetInputKey tempKey(tempCoord);
      double eta      =  tempKey.eta();
      double etaWidth =  tempKey.dEta();
      double phi      =  tempKey.phi();
      double phiWidth =  tempKey.dPhi();
      unsigned int region = tempKey.region(eta);
      
      if (region == JetElementKeyBase::Barrel || region == JetElementKeyBase::EndBarrel) { // 4 TT per JE
        for (int ieTT = 0; ieTT <= 1; ++ieTT) {
          for (int ipTT = 0; ipTT <= 1; ++ipTT) {
             TriggerTowerKey ttKey(phi - phiWidth/4 + ipTT*phiWidth/2., eta - etaWidth/4 + ieTT*etaWidth/2.);
             double ttEta = ttKey.eta();
             double ttPhi = ttKey.phi();
             L1CaloCoolChannelId idEM  = m_TriggerTowerTool->channelID(ttEta, ttPhi, 0);
             L1CaloCoolChannelId idHad = m_TriggerTowerTool->channelID(ttEta, ttPhi, 1);
             coolIDs.push_back(idEM.id());
             coolIDs.push_back(idHad.id());
          }
        }
      }
      else if (region == JetElementKeyBase::EndCap1) { // 3 TT per JE. Here it matters which end we are at.
        double phiVec[3];
        double etaVec[3];
        if (eta > 0) {
          etaVec[0] = eta - etaWidth/4;
          phiVec[0] = phi - phiWidth/4.;
          etaVec[1] = eta - etaWidth/4;
          phiVec[1] = phi + phiWidth/4.;
          etaVec[2] = eta + etaWidth/4;
          phiVec[2] = phi;
        }
        else {
          etaVec[0] = eta + etaWidth/4;
          phiVec[0] = phi - phiWidth/4.;
          etaVec[1] = eta + etaWidth/4;
          phiVec[1] = phi + phiWidth/4.;
          etaVec[2] = eta - etaWidth/4;
          phiVec[2] = phi;
        }
        for (int iTT = 0; iTT < 3; ++iTT) {
          TriggerTowerKey ttKey(phiVec[iTT], etaVec[iTT]);
          double ttEta = ttKey.eta();
          double ttPhi = ttKey.phi();
          L1CaloCoolChannelId idEM  = m_TriggerTowerTool->channelID(ttEta, ttPhi, 0);
          L1CaloCoolChannelId idHad = m_TriggerTowerTool->channelID(ttEta, ttPhi, 1);
          coolIDs.push_back(idEM.id());
          coolIDs.push_back(idHad.id());
        }
      }
      else if (region == JetElementKeyBase::EndCap2) { // 1 TT per JE
        TriggerTowerKey ttKey(phi, eta);
        double ttEta = ttKey.eta();
        double ttPhi = ttKey.phi();
        L1CaloCoolChannelId idEM  = m_TriggerTowerTool->channelID(ttEta, ttPhi, 0);
        L1CaloCoolChannelId idHad = m_TriggerTowerTool->channelID(ttEta, ttPhi, 1);
        coolIDs.push_back(idEM.id());
        coolIDs.push_back(idHad.id());  
      }
      else if (region == JetElementKeyBase::EndCap3) { // 2 TT per JE
        for (int ieTT = 0; ieTT < 2; ++ieTT) {
          TriggerTowerKey ttKey(phi, eta - etaWidth/4 + ieTT*etaWidth/2.);
          double ttEta = ttKey.eta();
          double ttPhi = ttKey.phi();
          L1CaloCoolChannelId idEM  = m_TriggerTowerTool->channelID(ttEta, ttPhi, 0);
          L1CaloCoolChannelId idHad = m_TriggerTowerTool->channelID(ttEta, ttPhi, 1);
          coolIDs.push_back(idEM.id());
          coolIDs.push_back(idHad.id());
        }     
      }
      else if (region == JetElementKeyBase::FCAL) { // 4 TT, in a row in eta. Beware of double-counting here!
        double etaStep = (etaWidth/4.) * ( eta > 0 ? 1 : -1 );
        double etaMin = eta - (1.5*etaStep);
        for (int ieTT = 0; ieTT < 4; ++ieTT) {
          TriggerTowerKey ttKey(phi, etaMin + ieTT*etaStep);
          double ttEta = ttKey.eta();
          double ttPhi = ttKey.phi();
          L1CaloCoolChannelId idEM  = m_TriggerTowerTool->channelID(ttEta, ttPhi, 0);
          L1CaloCoolChannelId idHad = m_TriggerTowerTool->channelID(ttEta, ttPhi, 1);
          std::map< unsigned int, int>::iterator found = usedFCALTTs.find(idEM.id());
          if (found == usedFCALTTs.end()) {
            coolIDs.push_back(idEM.id());
            coolIDs.push_back(idHad.id());
            usedFCALTTs.insert(std::map<unsigned int, int>::value_type(idEM.id(),1)); 
          }
        }     
      }
      
      // Hence get CoolIDs and push these back
      
      // Now iterate coordinate
      tempCoord = get.upPhi(tempCoord); // Increment phi coordinate
    } // end phi offset loop
    tempCoord = get.rightEta(tempCoord); // Increment eta coordinate
    tempEta = tempCoord.eta();
    if (tempEta == TrigT1CaloDefs::RegionERROREtaCentre) break; // gone outside coverage
  } // end eta offset loop

  
}


} // end of namespace
