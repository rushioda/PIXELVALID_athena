/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

#include <algorithm>
#include <cassert>
template <class HIT>
void 	
TimedHitPtrCollection<HIT>::insert(const PileUpTimeEventIndex& timeEventIndex,
				   const AthenaHitsVector<HIT>* inputCollection) {
  assert(inputCollection);
  typename AthenaHitsVector<HIT>::const_iterator i(inputCollection->begin());
  typename AthenaHitsVector<HIT>::const_iterator e(inputCollection->end());
  while (i!=e) m_hits.push_back(TimedHitPtr<HIT>(timeEventIndex.time(), timeEventIndex.index(),*i++));
  if (m_sorted) {
    m_sorted=false;
    throw SortedException();
  }
}

template <class HIT>
void 	
TimedHitPtrCollection<HIT>::insert(float evtTime, 
				   const AthenaHitsVector<HIT>* inputCollection) {
  assert(inputCollection);
  typename AthenaHitsVector<HIT>::const_iterator i(inputCollection->begin());
  typename AthenaHitsVector<HIT>::const_iterator e(inputCollection->end());
  while (i!=e) m_hits.push_back(TimedHitPtr<HIT>(evtTime, *i++));
  if (m_sorted) {
    m_sorted=false;
    throw SortedException();
  }
}


  ///returns an iterator range with the hits of current detector element
template <class HIT> 
bool 
TimedHitPtrCollection<HIT>::nextDetectorElement(const_iterator& b, const_iterator& e) const {
  if (!m_sorted) sortVector();
  b = m_currentHit;
  while (m_currentHit != m_hits.end() && !(*b < *m_currentHit)) ++m_currentHit;
  e = m_currentHit;
  return (b != e);
}
 
template <class HIT>
void 
TimedHitPtrCollection<HIT>::sortVector() const {
  std::stable_sort(m_hits.begin(), m_hits.end());
  m_currentHit = m_hits.begin();
  m_sorted=true;
}

