//
// ********************************************************************
// * License and Disclaimer                                           *
// *                                                                  *
// * The  Geant4 software  is  copyright of the Copyright Holders  of *
// * the Geant4 Collaboration.  It is provided  under  the terms  and *
// * conditions of the Geant4 Software License,  included in the file *
// * LICENSE and available at  http://cern.ch/geant4/license .  These *
// * include a list of copyright holders.                             *
// *                                                                  *
// * Neither the authors of this software system, nor their employing *
// * institutes,nor the agencies providing financial support for this *
// * work  make  any representation or  warranty, express or implied, *
// * regarding  this  software system or assume any liability for its *
// * use.  Please see the license in the file  LICENSE  and URL above *
// * for the full disclaimer and the limitation of liability.         *
// *                                                                  *
// * This  code  implementation is the result of  the  scientific and *
// * technical work of the GEANT4 collaboration.                      *
// * By using,  copying,  modifying or  distributing the software (or *
// * any work based  on the software)  you  agree  to acknowledge its *
// * use  in  resulting  scientific  publications,  and indicate your *
// * acceptance of all terms of the Geant4 Software license.          *
// ********************************************************************
//
//
// $Id: QuirkTransportation.icc 583415 2014-02-14 16:44:26Z jblack $
// GEANT4 tag $Name: geant4-09-04-patch-01 $
//

// 
//
//        Inline function implementation.
//
// =======================================================================
// Created:  9 June 1998, J. Apostolakis
// =======================================================================
//

inline void
QuirkTransportation::SetPropagatorInField( G4PropagatorInField* pFieldPropagator)
{
   m_fieldPropagator= pFieldPropagator;
}

inline G4PropagatorInField* QuirkTransportation::GetPropagatorInField()
{
   return m_fieldPropagator;
}

inline G4bool QuirkTransportation::DoesGlobalFieldExist()
{
  G4TransportationManager* transportMgr;
  transportMgr= G4TransportationManager::GetTransportationManager();

  // fFieldExists= transportMgr->GetFieldManager()->DoesFieldExist();
  // return fFieldExists;
  return transportMgr->GetFieldManager()->DoesFieldExist();
}

inline void QuirkTransportation::SetVerboseLevel( G4int verboseLev )
{
  m_verboseLevel= verboseLev;
}

inline G4int QuirkTransportation::GetVerboseLevel( ) const
{
  return m_verboseLevel;
}

inline G4double QuirkTransportation::GetThresholdWarningEnergy() const
{
  return m_threshold_Warning_Energy;
}
 
inline G4double QuirkTransportation::GetThresholdImportantEnergy() const
{ 
  return m_threshold_Important_Energy;
} 

inline G4int QuirkTransportation::GetThresholdTrials() const
{
  return m_thresholdTrials;
}

inline void QuirkTransportation::SetThresholdWarningEnergy( G4double newEnWarn )
{
  m_threshold_Warning_Energy= newEnWarn;
}

inline void QuirkTransportation::SetThresholdImportantEnergy( G4double newEnImp )
{
  m_threshold_Important_Energy = newEnImp; 
}

inline void QuirkTransportation::SetThresholdTrials(G4int newMaxTrials )
{
  m_thresholdTrials = newMaxTrials; 
}

     // Get/Set parameters for killing loopers: 
     //   Above 'important' energy a 'looping' particle in field will 
     //   *NOT* be abandoned, except after fThresholdTrials attempts.
     // Below Warning energy, no verbosity for looping particles is issued

inline G4double QuirkTransportation::GetMaxEnergyKilled() const
{
  return m_maxEnergyKilled; 
}

inline G4double QuirkTransportation::GetSumEnergyKilled() const
{
  return m_sumEnergyKilled;
}

inline void QuirkTransportation::ResetKilledStatistics(G4int report)
{
  if( report ) { 
    G4cout << " QuirkTransportation: Statistics for looping particles " << G4endl;
    G4cout << "   Sum of energy of loopers killed: " <<  m_sumEnergyKilled << G4endl;
    G4cout << "   Max energy of loopers killed: " <<  m_maxEnergyKilled << G4endl;
  } 

  m_sumEnergyKilled= 0;
  m_maxEnergyKilled= -1.0*CLHEP::GeV;
}
     // Statistics for tracks killed (currently due to looping in field)

inline void QuirkTransportation::EnableShortStepOptimisation(G4bool optimiseShortStep)
{ 
  m_shortStepOptimisation=optimiseShortStep;
}
