/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/


namespace MuonCalib {
  //Retrieve a requested parameter by strip hashID from the local cache for the client.
  //Only reason for this template is so we don't have to retype same code for every
  //overloaded function. 
  template <class data_type> StatusCode CscCoolStrSvc::getParameterTemplated(data_type &retData, 
      const std::string & parName, const unsigned int & index) const
  {


    //Start with false, only set to true once we manage to retrieve the parameter
    bool succeed = false;

    std::map<std::string, CscCondDataCollectionBase*>::const_iterator itr = m_parNameMap.find(parName);
    if( itr == m_parNameMap.end())
    {
      if(parName == "t0phase" || parName == "t0base"){
        static bool firstTime = true;
        if(firstTime) m_log << MSG::WARNING << "Attempted to request t0 parameters (t0phase or t0base) from CscCoolStrSvc. These are not yet implemented but will be in the near future. You can probably ignore this WARNING." << std::endl;
        firstTime = false;
        return StatusCode::RECOVERABLE;
      }
      
      m_log << MSG::ERROR << "There is no parameter loaded with name " << parName << ". Check spelling, or ensure you had it added in your jobOptions." << endmsg; 
      return StatusCode::RECOVERABLE;
    }

    CscCondDataCollection<data_type> * coll = dynamic_cast<CscCondDataCollection<data_type> *>( itr->second);
    if(!coll){
      m_log << MSG::ERROR  <<  "Failed to cast datatype properly for parameter \"" << parName << "\"" << endmsg;
      return StatusCode::RECOVERABLE;
    }

    if(index > coll->size() -1)
    {
      m_log << MSG::ERROR 
        << "Requested index " << (coll->getParCat() == "CHANNEL" ? " (channel hash) ":"") << index 
        << " is too large for " << parName <<". The requested parameter (" << coll->getParName() << ") is of the  \"" << coll->getParCat() 
        << "\" category, which has a defined maximum value of "  << (coll->getSize()-1)
        << ". This is likely an error upstream of CscCoolStrSvc creating an invalid identifier or hash id." <<  endmsg;
      retData = coll->getParDefault();
      return StatusCode::RECOVERABLE;
    }

    CscCondData<data_type> * condData = (*coll)[index];

    //A common error seems to be having swapped the multilayer when 
    //generating the channel hash. We'll try the other multilayer if
    //this seems to be what's happening
    if(!condData && coll->getParCat() == "CHANNEL") {

      //If we are looking at invalid chamber layer (1), check corresponding channel in chamber layer 2
      Identifier id;
      m_cscId->get_id(index,id,&m_channelContext);
      if(m_cscId->chamberLayer(id) == 1)
      {
        int newHash = swapChamberLayerReturnHash(id); 
        condData = coll->at(newHash);
        if(condData)  
        {
          if(!ignoreBadMultilayer())
          {
            if(m_numFailedRequests < m_maxFailedRequests) 
              m_log << MSG::WARNING << "Invalid chamber layer requested when retrieveing " 
                << parName 
                << ". Tried corresponding channel in valid chamber layer and found good data." 
                << endmsg;  
            if(m_numFailedRequests++ == m_maxFailedRequests) m_log << MSG::WARNING 
              << "Reached maximum number of problematic requests to CscCoolStrSvc. No further warnings will be printed." 
                << endmsg; 

          }
        }
      }
    }//end if "CHANNEL" category


    //If we still haven't found data, print a warning
    if(!condData)
    {
      //Return a default value
      retData = coll->getParDefault();
      if(m_numFailedRequests < m_maxFailedRequests) {
        m_log << MSG::WARNING << "Requested index " << index << " has no data cached for parameter " << parName << ". Either its not valid (such as a hash Id for a chamber never installed) or there was a problem caching the database to memory. Returning default value of " << retData << endmsg;
      }
      if(m_numFailedRequests++ == m_maxFailedRequests) m_log << MSG::WARNING << "Reached maximum number of failed requests to CscCoolStrSvc. No further warnings will be printed." << endmsg; 
    }
    else
    {
      succeed = true; //We succeeded in geting the conditions data.
      retData = condData->getValue();
    }

    if(succeed)
      return StatusCode::SUCCESS;
    else 
      return StatusCode::RECOVERABLE;
  }//end getParameterTemplated()


  /**mergeCollections
    Merges collections 
   */
  template <typename data_type> StatusCode CscCoolStrSvc::mergeCollections(const CscCondDataCollectionBase * & newCollBase, 
      const CscCondDataCollectionBase * & refCollBase)
  {
    if(m_debug) m_log << MSG::DEBUG << "Merging collections for parameter " << newCollBase->getParName() << endmsg;

    const CscCondDataCollection<data_type> * newColl = dynamic_cast<const CscCondDataCollection<data_type>*>(newCollBase);
    if(!newColl){
      m_log << MSG::ERROR  <<  "Failed to cast datatype properly for newColl in mergeCollections. Maybe a configuration problem in CSCCondDB.py?" << endmsg;
      return StatusCode::RECOVERABLE;
    }

    const CscCondDataCollection<data_type> * refColl = dynamic_cast<const CscCondDataCollection<data_type>*>(refCollBase);
    if(!refColl){
      m_log << MSG::ERROR  <<  "Failed to cast datatype properly for refColl in mergeCollections. Maybe a configuration problem in CSCCondDB.py?" << endmsg;
      return StatusCode::RECOVERABLE;
    }

    const std::string & parName = refColl->getParName();
    const std::string & cat = refColl->getParCat();

    unsigned int numEntries = newColl->size();
    if(numEntries != newColl->size() )
    {
      m_log << MSG::ERROR << "New collection has " << newColl->size() 
        << " entries. Reference has " << refColl->size() << "." << endmsg;
      return StatusCode::RECOVERABLE;
    }

    static const std::string version_number = "02-00";

    //getChamberCoolChannel

    const unsigned int maxCoolChan = refColl->getNumCoolChan(); //cool channels start at 1
    if(m_verbose) m_log << MSG::VERBOSE << "Maximum cool channel for this parameter is " 
      << maxCoolChan << endmsg;

    //strVec is a vector of the strings we'll store in the database. The indices of the
    //vector are the cool channel -1.
    std::vector<std::string> strVec; 
    strVec.resize(maxCoolChan);

    //initialize all strings with metadata. Right now, the only meta data is the
    //version number of the string. Eventually we may add extra data such as 
    //category and such
    std::vector<std::string>::iterator strItr = strVec.begin();
    std::vector<std::string>::iterator strEnd = strVec.end();
    for(; strItr != strEnd ; strItr++) {
      *strItr += version_number;
      *strItr += " <BEGIN_DATA>";
    }

    std::vector<bool> chansToUpdate(maxCoolChan,false);

    //Loop through every index.
    //If the new collection has data for that index, use the new value
    //Otherwise check to see if reference collection (from cool) has one.
    //A null at the end of this simply won't be stored in cool 
    bool CoolAsmValsFilled[32][5];  //to track which ASMs have been filled.
    for (unsigned int iSector=0; iSector < 32; iSector++)
    { for (unsigned int iASM=0; iASM < 5; iASM++)
      { CoolAsmValsFilled[iSector][iASM] = false;
    } }
    for(unsigned int index =0 ;index < numEntries; index++) {
      const CscCondData<data_type> * mergeDatum = NULL; 
      const CscCondData<data_type> * newDatum = (*newColl)[index];
      const CscCondData<data_type> * refDatum = (*refColl)[index];

      if(newDatum) 
        mergeDatum = newDatum;
      else if(refDatum && m_doMerge)
        mergeDatum = refDatum;

      if(m_verbose) m_log << MSG::VERBOSE << "Merged index: " << index 
        << " with pointer at ref " << mergeDatum << endmsg;

      //Only put data if there is data available for it!
      if(mergeDatum) { 

        std::stringstream ss;
        unsigned int coolChan =0;

        //#CATCHANGE - Have to add here if there is a new or changed category
        //CSC category = just one value, very simple string
        if(cat == "CSC" ){

          //In all of these cases, there is no additional identification 
          //info in the string
          ss << " " <<  mergeDatum->getValue();
          coolChan = 1;
        }
        else if( cat == "ENDCAP") {

          std::string stringId;
          if(index == 0)
            stringId = "-1";
          else if(index==1)
            stringId = "1";

          ss << " " << stringId << " " <<  mergeDatum->getValue();
          
          coolChan = index +1;   

        }
        else if( cat == "CHAMBER") {

          unsigned int onlineId;
          if(!coolChamberChannelToOnlineId(index+1, onlineId ).isSuccess()){
            m_log << MSG::ERROR << "Failed to retrieve online Id for chamber during merge." 
              << endmsg;
          }

          ss << " " << std::hex << onlineId <<  " " << std::dec <<  mergeDatum->getValue();
          coolChan = index+1;

        }
        else if (cat == "LAYER") {

          unsigned int onlineId;
          if(!(layerHashToOnlineId(index, onlineId).isSuccess())) {
            m_log << MSG::ERROR << "Failed at gettin layer hash" << endmsg;
            return StatusCode::RECOVERABLE;
          }

          ss << " " << std::hex << onlineId << " " <<  std::dec <<  mergeDatum->getValue();

          if(!onlineIdToCoolChamberChannel(onlineId, coolChan)) {
            m_log << MSG::ERROR << "Failed at getting cool chamber channel from online Id " << std::hex << onlineId << std::dec << endmsg;

            return StatusCode::RECOVERABLE;
          }
        }
        else if (cat == "CHANNEL") {
          Identifier id;
          m_cscId->get_id((IdentifierHash)index,id, &m_channelContext);
          unsigned int onlineId; 
          if(!offlineToOnlineId(id, onlineId).isSuccess()) {
            m_log << MSG::ERROR << "Failed at geting online id!" << endmsg; 
            return StatusCode::RECOVERABLE;
          }

          ss << " " << std::hex << onlineId <<  " "  << std::dec << mergeDatum->getValue();

          if(!onlineIdToCoolChamberChannel(onlineId, coolChan)) {
            m_log << MSG::ERROR << "Failed at getting cool chamber channel from online Id " 
              << std::hex << onlineId << std::dec << endmsg;
            return StatusCode::RECOVERABLE;
          }
          if(m_verbose) m_log << MSG::VERBOSE << "Storing into COOL channel " 
            << coolChan << endmsg;
        }

        else if (cat == "ASM")
        { Identifier id;
          m_cscId->get_id((IdentifierHash)index,id, &m_channelContext);

          unsigned int iChamber;
          unsigned int iASM;
          std::string AsmId;
          if(!offlineToAsmId(id, AsmId, iChamber, iASM).isSuccess())
          { m_log << MSG::ERROR << "Failed at geting ASM id!" << endmsg;
            return StatusCode::RECOVERABLE;
          }

          unsigned int onlineId;
          if(!offlineToOnlineId(id, onlineId).isSuccess())
          { m_log << MSG::ERROR << "Failed at geting online id!" << endmsg;
            return StatusCode::RECOVERABLE;
          }

          if (!CoolAsmValsFilled[iChamber][iASM-1])
          { ss << " " << AsmId << " " << mergeDatum->getValue();
            CoolAsmValsFilled[iChamber][iASM-1] = true;
            if ( !onlineIdToCoolChamberChannel(onlineId, coolChan) )
            { m_log << MSG::ERROR << "Failed at getting cool chamber channel from online Id "
                << std::hex << onlineId << std::dec << endmsg;
              return StatusCode::RECOVERABLE;
            }
            if(m_verbose) m_log << MSG::VERBOSE << "Storing into COOL channel "
              << coolChan << endmsg;
          }
        }//end if cat==asm


        if ( (coolChan==0) && !(cat=="ASM") )  {
          m_log << MSG::ERROR << "Cool chan of 0 reqeusted for update. This is likely a bug."
            << endmsg;
          return StatusCode::RECOVERABLE;
        }

        else if (!(coolChan==0))  {
          chansToUpdate.at(coolChan-1) = true;
          strVec.at(coolChan-1) += ss.str();
        }
        //otherwise coolChan==0 but simply for a redundant ASM value.
      }//end if mergeDatum
    }//end index loop


    ///Store a CondAttrListCollection in TDS 
    std::string folder = refColl->getParFolder();
    CondAttrListCollection* atrc=0;
    m_log << MSG::INFO << "Putting data for parameter " << parName 
      << " into database folder " << folder  << endmsg;

    if (!p_detstore->contains<CondAttrListCollection>(folder)) {
      m_log << MSG::DEBUG << "Creating new CondAttrListCollection for folder "
        << folder << endmsg;
      CondAttrListCollection* atrc=new CondAttrListCollection(true);
      if (StatusCode::SUCCESS!=p_detstore->record(atrc,folder)) {  //create new collection record in TDS
        m_log << MSG::ERROR << "Could not create CondAttrListCollection "
          <<  folder << endmsg;
        return StatusCode::RECOVERABLE;
      }
    }

    //Retrieve pointer to collection in TDS
    //do const cast here so we can add to already exisiting collections
    const CondAttrListCollection* catrc=0;
    if(m_debug) m_log << MSG::DEBUG << "Attempting to retrieve collection (const)" << endmsg;
    if (StatusCode::SUCCESS!=p_detstore->retrieve(catrc,folder)) {
      m_log << MSG::ERROR << "Could not retrieve CondAttrListCollection " 
        <<  folder << endmsg;
      return StatusCode::RECOVERABLE;
    } 
    if(m_debug) m_log << MSG::DEBUG << "Retrieved. Casting away constness." << endmsg;
    atrc=const_cast<CondAttrListCollection*>(catrc);
    if (atrc==0) {
      m_log << MSG::ERROR << "Could not retrieve non-const pointer to atrc" 
        << endmsg;
      return StatusCode::RECOVERABLE;
    }
    if(m_debug) m_log << MSG::DEBUG << "Casted away." << endmsg;

    //AthenaAttributeList holds info for a single COOL channel
      
    //#CATCHANGE - Have to add here if there is a new or changed category
    std::string idElementName;
    if(cat == "CSC")
    {
      //identifier has no real meaning  
      idElementName ="";
    }
    else if(cat == "ENDCAP")
    {
      idElementName = "endcap";
    }
    else//for chamber, layer, channels, or asm, the cool channel corresponds to a chamber
    {
      idElementName = "chamId";
    }//end category check

    coral::AttributeListSpecification* spec=new coral::AttributeListSpecification();
    //CSC Category doesn't have a geoemtry identification element in the list
    if(cat != "CSC") 
      spec->extend(idElementName.c_str(),"int"); 
    spec->extend("Data","string");//the parameter value
    //make the AthenaAttributeList
    AthenaAttributeList *alist  = new AthenaAttributeList(*spec);


    //Now end each string, and submit it to the database;
    strItr = strVec.begin();
    for(unsigned int coolChan =1; coolChan <= maxCoolChan ; coolChan++) {
      //If we don't have new data for this channel, don't update it.
      if(!chansToUpdate.at(coolChan-1))
        continue;

      std::string & dataStr = strVec[coolChan-1];
      dataStr += " <END_DATA>";

      int identifier = 0; 
      if(cat == "CSC")
      {
        //identifier has no real meaning  
        identifier = 0;
      }
      else if(cat == "ENDCAP")
      {
        //identifier is eta
        //No great way to map this. We'll choose coolChan 1 to be eta 1, and
        //coolChan 2 to be eta = -1. This also means 1 = A, 2 = C
        if(coolChan == 1)
          identifier = 1;
        if(coolChan == 2)
          identifier = -1;

      }
      else//for chamber, layer, channels, or asm, the cool channel corresponds to a chamber
      {
        unsigned int onlineId;
        if(!coolChamberChannelToOnlineId(coolChan, onlineId).isSuccess()) {
          m_log << MSG::ERROR 
            << "Failed to retrieve online Id using chamber channel during final write to db." 
            << endmsg;
          return StatusCode::SUCCESS;
        }
        identifier = onlineId;
      }//end category check

      //CSC category doesn't have a geometry identification element in the list
      if(cat != "CSC")
        (*alist)[idElementName.c_str()].setValue(int(identifier));

      (*alist)["Data"].setValue(std::string(dataStr));

      //Finally att attribute list to CondAtrListCollection, which is already
      //registerd with detStore. Then it will be all ready for OutputConditionsAlg
      //to store it in the database.
      CondAttrListCollection::ChanNum newCoolChan =  coolChan;
      atrc->add(newCoolChan, *alist);
    }//end cool channel loop

    return StatusCode::SUCCESS;
  }//end mergeCollections


}//end Namepace MuonCalib
