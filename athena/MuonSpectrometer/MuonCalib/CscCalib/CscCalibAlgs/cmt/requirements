package CscCalibAlgs 
########
########

private
use  AthenaBaseComps            AthenaBaseComps-*               Control

use AtlasPolicy     		AtlasPolicy-* 

use AtlasROOT           AtlasROOT-*             External

use GaudiInterface  		GaudiInterface-*  		External
#use AtlasCORAL           	AtlasCORAL-*    		External
#use AtlasCOOL            	AtlasCOOL-*           	External
#Not used anymore: use AtlasSEAL            	AtlasSEAL-*            	External

#use CondDBObjects		CondDBObjects-*			Database
#use AthenaPoolUtilities  	AthenaPoolUtilities-* 	Database/AthenaPOOL

#use Identifier			Identifier-*			DetectorDescription
use MuonIdHelpers		MuonIdHelpers-*			MuonSpectrometer
use MuonRDO			MuonRDO-*			MuonSpectrometer
#use MuonGeoModel		MuonGeoModel-*		MuonSpectrometer
#use MuonByteStream		MuonByteStream-*		MuonSpectrometer/MuonCnv
use MuonReadoutGeometry   MuonReadoutGeometry-*   MuonSpectrometer/MuonDetDescr


use StoreGate       		StoreGate-*       		Control
use DataModel			      DataModel-*			Control
#use CLIDSvc			      CLIDSvc-*			  Control

use CscCalibTools		    CscCalibTools-*		MuonSpectrometer/MuonCalib/CscCalib
use CscCalibData        CscCalibData-*         MuonSpectrometer/MuonCalib/CscCalib

use MuonCSC_CnvTools    MuonCSC_CnvTools-*  MuonSpectrometer/MuonCnv

#use MuonCondSvc		    	MuonCondSvc-*		MuonSpectrometer/MuonConditions/MuonCondGeneral
use MuonCondInterface		MuonCondInterface-*		MuonSpectrometer/MuonConditions/MuonCondGeneral
#use MuonCondData		    MuonCondData-*			MuonSpectrometer/MuonConditions/MuonCondGeneral


end_private

#Monitoring
#use MuonCalibMonitoring     MuonCalibMonitoring-*    MuonSpectrometer/MuonValidation/MuonDQA

# Test infrastructure
use TestPolicy           	TestPolicy-*
use MinimalRunTime       	MinimalRunTime-* 		Control -no_auto_imports

apply_pattern component_library 
library CscCalibAlgs *.cxx components/*.cxx
#apply_tag  ROOTBasicLibs
##apply_tag  ROOTMathLibs
#apply_tag  ROOTSTLDictLibs
#apply_tag  ROOTGraphicsLibs
#apply_tag  ROOTTableLibs

#apply_pattern dual_use_library files = *.cxx 

apply_pattern declare_joboptions files="*.py"
apply_pattern declare_python_modules files="*.py"

#To compile as debug separately from all else
private 
#macro cppdebugflags '$(cppdebugflags_s)'
#macro_remove componentshr_linkopts "-Wl, -s"
