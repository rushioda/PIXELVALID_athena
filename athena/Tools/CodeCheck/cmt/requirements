package CodeCheck

author Albrand Solveig <albrand@isn.in2p3.fr>

## uses codewizard - from Parasoft
## modifications from Christian's mail of 18th July 2001
##
## modifications October 2001 - make fragments for document style.
## modifcation December 2001 - remove useless lines
## February 2002 - into CVS
## August 2002 add rulechecker
## November - December 2002 - get rulechecker  and codewizard working for release.
## Christian Arnault December 2004 - see below - macro use_JavaSDK added
## April 2005 removed codewizard, and corrected the selection of rule sets

# This package is called CodeCheck and not  "rulechecker" because
# it maybe could use othertools.

## usage : gmake [CODECHECK_STRATEGY="release"] rulechecker
##         gmake [SELECTED_RULES="naming"] rulechecker
##


#------------------------------------------------------
#  All settings defined by this package should be selectively valued 
# only when the CodeCheck tag is active
#
#  This tag is activated only when gmake rulechecker is run. 
# And this is actually triggered by the special target_xxx tag associated with the constituents.
#
#  This specific tag is therefore automatically associated with the generic CodeCheck tag so as
# to have a generic format in this requirements
#
#------------------------------------------------------


# 
# get a java for RuleChecker

macro use_JavaSDK "" CodeCheck "JavaSDK JavaSDK-01-* External"
use $(use_JavaSDK)



#
# But do not add anything to the -I path
#
include_path none




# Now define the default path to put the results
  macro RELATIVE_CODECHECK_OUTPUT_DIRECTORY "" CodeCheck "/CodeCheck" 
  
  macro RULECHECKER "" CodeCheck "/rulechecker" 

# If CODECHECK_STRATEGY is put to "release" then output directory will be changed
# by the make file, but any other value will be leave them untouched.
# The value "release" puts them all in the same place, 
# under a subdirectory with the package version tag
	   
 macro CODECHECK_STRATEGY "" CodeCheck "package"
 
# It does this by changing the value of the following macro 

 macro RULECHECKER_SUFFIX "" CodeCheck "/"  
 
# and then calculating the value of the output directory, either from the
# package root, or from the value of the CODECHECK_RELEASE_OUTPUT_DIRECTORY
# The directory for grouping all the output together 
 
 macro CODECHECK_RELEASE_OUTPUT_DIRECTORY "" CodeCheck  "/afs/cern.ch/user/a/albrand/www/CodeCheck" 
 
# Other possible values of SELECTED_RULES are "naming", "required", "recommended"
# The make file fragment makes a symbolic link between the selected rules file
# and the file "config_RULES" which is used by rulechecker
 
 macro SELECTED_RULES "" CodeCheck "all"

 macro CCTMP "" CodeCheck "/CCTMP"
 macro DOTI "" CodeCheck "/DOTI"

 
 



##### For Rule Checker (do not override the next two unless you know what you are doing!)
## This is the directory where the tool is installed
 macro IRST_DIR ""\
    CERN&CodeCheck "/afs/cern.ch/user/a/albrand/public/IRST2.5"

##       CERN "/afs/cern.ch/sw/lcg/contrib/rulechecker" 
## IRST_CONFIG_DIR is the place where rulechecker looks to find its configuration files

 macro IRST_CONFIG_DIR "" CodeCheck "${IRST_DIR}/userConfig/ATLAS"  
    
## 

    
set atlas_checker_command "" CodeCheck "java -classpath ${IRST_DIR} rules.ATLAS.ATLASRuleChecker "
set atlas_patch_command "" CodeCheck "${IRST_DIR}/patch/patch4atlas.prl"


pattern -global rulechecker \
  tag target_<package>rchk CodeCheck ; \
  document rulechecker <package>rchk -target_tag $(src)*.cxx -group=rulechecker

macro rulechecker_header_fragment "" CodeCheck ""
macro rulechecker_fragment "" CodeCheck ""
macro rulechecker_trailer_fragment "" CodeCheck ""

make_fragment rulechecker_header -suffix=viol
make_fragment rulechecker -suffix=viol -header=rulechecker_header  -dependencies -trailer=rulechecker_trailer
make_fragment rulechecker_trailer

ignore_pattern doxygen
ignore_pattern rulechecker

