ifeq ($(CODECHECK_STRATEGY), release)
 	 CODECHECK_OUTPUT_DIRECTORY = ${CODECHECK_RELEASE_OUTPUT_DIRECTORY}
	 RULECHECKER_SUFFIX = /${version}/
endif
ifeq ($(CODECHECK_STRATEGY), package)
 	 CODECHECK_OUTPUT_DIRECTORY = ${PACKAGE_ROOT}${RELATIVE_CODECHECK_OUTPUT_DIRECTORY}
endif

SELECTED_RULES_FILE = all_RULES
ACTUAL_CONFIG = ${CODECHECK_OUTPUT_DIRECTORY}${CCTMP}
ifeq ($(SELECTED_RULES), naming)
 	 SELECTED_RULES_FILE = naming_RULES
	 
endif
ifeq ($(SELECTED_RULES), required)
 	 SELECTED_RULES_FILE = required_RULES
	
endif
ifeq ($(SELECTED_RULES), recommended)
 	 SELECTED_RULES_FILE = recommended_RULES

endif
 
${CONSTITUENT}_output = ${CODECHECK_OUTPUT_DIRECTORY}${RULECHECKER}${RULECHECKER_SUFFIX}

FILES = $(shell python ${CODECHECKROOT}/share/truncate.py )
	

${CONSTITUENT} ::  create ${OBJS} finish

create :: setup  ${FILES}
	
	$(cpp_silent) $(foreach file_to_copy,${FILES},$(shell /bin/cp ${PACKAGE_ROOT}/src/$(file_to_copy) ${CODECHECK_OUTPUT_DIRECTORY}${CCTMP}))	

setup:: ${CODECHECK_OUTPUT_DIRECTORY} 
	$(cpp_echo) $@
	$(cpp_silent) cd $(bin); 
	$(cpp_silent) if test  -d ${PACKAGE_ROOT}/src/; then \
	  if test ! -d $(CODECHECK_OUTPUT_DIRECTORY) ; then ${mkdir} $(CODECHECK_OUTPUT_DIRECTORY); fi;\
	  if test ! -d $(CODECHECK_OUTPUT_DIRECTORY)${RULECHECKER} ; then ${mkdir} $(CODECHECK_OUTPUT_DIRECTORY)${RULECHECKER}; fi;\
	  if test ! -d $(${CONSTITUENT}_output) ; then ${mkdir} $(${CONSTITUENT}_output); fi;\
	  if test ! -d  ${CODECHECK_OUTPUT_DIRECTORY}${CCTMP} ; then ${mkdir}  ${CODECHECK_OUTPUT_DIRECTORY}${CCTMP}; fi;\
	  if test ! -d  ${CODECHECK_OUTPUT_DIRECTORY}${DOTI} ; then ${mkdir}  ${CODECHECK_OUTPUT_DIRECTORY}${DOTI}; fi;\
	  /bin/cp ${IRST_CONFIG_DIR}/config* ${ACTUAL_CONFIG}; \
	  /bin/cp ${IRST_CONFIG_DIR}/${SELECTED_RULES_FILE} ${ACTUAL_CONFIG}/config_RULES; \
	fi;
	
	

	
	

