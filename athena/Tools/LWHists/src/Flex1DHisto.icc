/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/


//____________________________________________________________________
template <class T>
inline Flex1DHisto<T> * Flex1DHisto<T>::create(unsigned nbins, const double& xmin, const double& xmax)
{
  return new(LWPools::acquire(sizeof(Flex1DHisto<T>)+extraAllocSize(nbins))) Flex1DHisto<T>(nbins,xmin,xmax);
}

//____________________________________________________________________
template <class T>
template <class TFloat>
inline Flex1DHisto<T> * Flex1DHisto<T>::create(unsigned nbins, const TFloat* xbins )
{
  return new(LWPools::acquire(sizeof(Flex1DHisto<T>)+extraAllocSize(nbins))) Flex1DHisto<T>(nbins,xbins);
}

//____________________________________________________________________
template <class T>
inline void Flex1DHisto<T>::destroy(Flex1DHisto<T> *h)
{
  if (h) {
    h->~Flex1DHisto<T>();
    LWPools::release(reinterpret_cast<char*>(h),sizeof(Flex1DHisto<T>)+extraAllocSize(h->getNBins()));
  }
}

//____________________________________________________________________
template <class T>
inline Flex1DHisto<T>::Flex1DHisto( unsigned nbins,
				    const double& xmin, const double& xmax )
  : m_invDelta(nbins/(xmax-xmin)),
    m_sumW(0),
    m_sumW2(0),
    m_sumWX(0),
    m_sumWX2(0),
    m_nEntries(0),
    m_nbinsPlus1(nbins+1),
    m_xmin(xmin),
    m_xmax(xmax),
    m_varBins(0),
    m_flexArray(nbins+2)
{
  assert(xmin<xmax);
  assert(nbins>0);
}

//____________________________________________________________________
template <class T>
template <class TFloat>
inline Flex1DHisto<T>::Flex1DHisto( unsigned nbins, const TFloat* xbins )
  : m_invDelta(nbins/(xbins[nbins]-xbins[0])),
    m_sumW(0),
    m_sumW2(0),
    m_sumWX(0),
    m_sumWX2(0),
    m_nEntries(0),
    m_nbinsPlus1(nbins+1),
    m_xmin(xbins[0]),
    m_xmax(xbins[nbins]),
    m_varBins(LWPools::acquire<float>(nbins+1)),
    m_flexArray(nbins+2)
{
  assert(xbins);
  assert(m_xmin<m_xmax);
  assert(nbins>0);
#ifndef NDEBUG
  for (unsigned i = 0; i<nbins;++i)
    assert(xbins[i]<xbins[i+1]);
#endif
  for (unsigned i = 0; i<m_nbinsPlus1;++i)
    m_varBins[i]=xbins[i];
}

//____________________________________________________________________
template <class T>
inline Flex1DHisto<T>::~Flex1DHisto()
{
  if (m_varBins)
    LWPools::release(m_varBins,m_nbinsPlus1);
}

//____________________________________________________________________
template <class T>
inline unsigned Flex1DHisto<T>::valueToBin(const double& x) const
{
  return LWBinUtils::valueToBin( x, m_varBins, m_invDelta,m_xmin, m_xmax,m_nbinsPlus1 );
}

//____________________________________________________________________
template <class T>
inline double Flex1DHisto<T>::getBinCenter(int bin) const
{
  return LWBinUtils::getBinCenter( bin, m_varBins,m_invDelta, m_xmin,m_nbinsPlus1);
}

//____________________________________________________________________
template <class T>
inline void Flex1DHisto<T>::fill(const double& x)
{
  //Fixme: make sure that we always abort on nan's (in non-strict-root mode)
  unsigned bin = valueToBin(x);
#ifndef NDEBUG
  if (bin==USHRT_MAX)
    return;
#endif
  m_flexArray.fill(bin);
  //Update stats (sums not for over/under flow):
  ++m_nEntries;
  if (bin>0&&bin<m_nbinsPlus1) {
    ++m_sumW;
    ++m_sumW2;
    m_sumWX  += x;
    m_sumWX2 += x*x;
  }
}

//____________________________________________________________________
template <class T>
inline void Flex1DHisto<T>::fill(const double& x, const double& w)
{
#ifndef NDEBUG
  if (w!=w) {
    std::cout<<"LWHisto: Saw NaN in fill weight"<<std::endl;
    return;
  }
#endif
  unsigned bin = valueToBin(x);
#ifndef NDEBUG
  if (bin==USHRT_MAX)
    return;
#endif
  m_flexArray.fill(bin,w);
  //Update stats (sums not for over/under flow):
  ++m_nEntries;
  if (bin>0&&bin<m_nbinsPlus1) {
    //NB: root used to use fabs(w) instead of w in the formulas below:
    m_sumW   += w;
    m_sumW2  += w*w;
    double z(w*x);
    m_sumWX  += z;
    m_sumWX2 += z*x;
  }
}

//____________________________________________________________________
template <class T>
inline unsigned Flex1DHisto<T>::getEntries() const
{
  return m_nEntries;
}

//____________________________________________________________________
template <class T>
inline void Flex1DHisto<T>::setEntries(unsigned n)
{
  m_nEntries = n;
}

//____________________________________________________________________
template <class T>
inline double Flex1DHisto<T>::getSumW() const
{
  return m_sumW;
}

//____________________________________________________________________
template <class T>
inline double Flex1DHisto<T>::getSumW2() const
{
  return m_sumW2;
}

//____________________________________________________________________
template <class T>
inline double Flex1DHisto<T>::getSumWX() const
{
  return m_sumWX;
}

//____________________________________________________________________
template <class T>
inline double Flex1DHisto<T>::getSumWX2() const
{
  return m_sumWX2;
}

//____________________________________________________________________
template <class T>
inline void Flex1DHisto<T>::setSums( const double& sumW,
				     const double& sumW2,
				     const double& sumWX,
				     const double& sumWX2 )
{
  m_sumW = sumW;
  m_sumW2 = sumW2;
  m_sumWX = sumWX;
  m_sumWX2 = sumWX2;
}

//____________________________________________________________________
template <class T>
inline void Flex1DHisto<T>::copyContents(T*__restrict__ cont, double*__restrict__ err) const
{
  m_flexArray.copyContents(cont,err);
}

//____________________________________________________________________
template <class T>
inline double Flex1DHisto<T>::Integral() const
{
  return m_flexArray.Integral()-m_flexArray.getBinContent(0)-m_flexArray.getBinContent(m_nbinsPlus1);
}

//____________________________________________________________________
template <class T>
inline bool Flex1DHisto<T>::holdsSeparateSumW2Info() const
{
  return m_flexArray.holdsSeparateSumW2Info();
}

//____________________________________________________________________
template <class T>
inline double Flex1DHisto<T>::getBinContent(unsigned bin) const
{
  if (bin>m_nbinsPlus1)
#ifdef LW_STRICT_ROOT_BEHAVIOUR
    bin = m_nbinsPlus1;
#else
    return 0.0;
#endif
  assert(bin<m_nbinsPlus1+1);
  return m_flexArray.getBinContent(bin);
}

//____________________________________________________________________
template <class T>
inline double Flex1DHisto<T>::getBinError(unsigned bin) const
{
  if (bin>m_nbinsPlus1)
#ifdef LW_STRICT_ROOT_BEHAVIOUR
    bin = m_nbinsPlus1;
#else
    return 0.0;
#endif
  assert(bin<m_nbinsPlus1+1);
  return m_flexArray.getBinError(bin);
}

//____________________________________________________________________
template <class T>
inline void Flex1DHisto<T>::getBinContentAndError(unsigned bin, double& cont, double& err ) const
{
  //float/integer version
  if (bin>m_nbinsPlus1)
#ifdef LW_STRICT_ROOT_BEHAVIOUR
    bin = m_nbinsPlus1;
#else
    return;
#endif
  assert(bin<m_nbinsPlus1+1);
  T tmp;
  m_flexArray.getBinContentAndError(bin,tmp,err);
  cont = static_cast<double>(tmp);
}

//____________________________________________________________________
template <>
inline void Flex1DHisto<double>::getBinContentAndError(unsigned bin, double& cont, double& err ) const
{
  //double version
  if (bin>m_nbinsPlus1) {
#ifdef LW_STRICT_ROOT_BEHAVIOUR
    bin = m_nbinsPlus1;
#else
    cont = 0;
    err = 0;
    return;
#endif
  }
  assert(bin<m_nbinsPlus1+1);
  m_flexArray.getBinContentAndError(bin,cont,err);
}

//____________________________________________________________________
template <class T>
inline void Flex1DHisto<T>::setBinContent(unsigned bin, const double& c)
{
  if (bin>m_nbinsPlus1)
    return;
  assert(bin<m_nbinsPlus1+1);
  m_flexArray.setBinContent(bin,static_cast<T>(c));
#ifdef LW_STRICT_ROOT_BEHAVIOUR
  if (bin==m_nbinsPlus1)//inconsistent root behaviour for last bin...
    return;
#endif
  ++m_nEntries;
  m_sumW = 0;//As in ROOT
}

//____________________________________________________________________
template <class T>
inline void Flex1DHisto<T>::setBinError(unsigned bin, const double& e)
{
  if (bin>m_nbinsPlus1) {//as in root
#ifdef LW_STRICT_ROOT_BEHAVIOUR
    m_flexArray.forcePretendSumWMode();
#endif
    return;
  }
  assert(bin<m_nbinsPlus1+1);
  m_flexArray.setBinError(bin,e);
}

//____________________________________________________________________
template <class T>
inline void Flex1DHisto<T>::setBinContentAndError(unsigned bin, const double& cont, const double& err )
{
  if (bin>m_nbinsPlus1) {//as in root
#ifdef LW_STRICT_ROOT_BEHAVIOUR
    m_flexArray.forcePretendSumWMode();
#endif
    return;
  }
  assert(bin<m_nbinsPlus1+1);
  m_flexArray.setBinContentAndError(bin,static_cast<T>(cont),err);
#ifdef LW_STRICT_ROOT_BEHAVIOUR
  if (bin==m_nbinsPlus1)//inconsistent root behaviour for last bin...
    return;
#endif
  ++m_nEntries;
  m_sumW = 0;//As in ROOT
}

//____________________________________________________________________
template <class T>
inline void Flex1DHisto<T>::resetActiveBinLoop()
{
  m_flexArray.resetActiveBinLoop();
}

//____________________________________________________________________
template <class T>
inline bool Flex1DHisto<T>::getNextActiveBin(unsigned& bin, double& content, double& error)
{
  //float/integer version
  T tmp(0);//init to avoid gcc43 warning.
  bool b = m_flexArray.getNextActiveBin(bin,tmp,error);
  content = static_cast<double>(tmp);
  return b;
}

//____________________________________________________________________
template <>
inline bool Flex1DHisto<double>::getNextActiveBin(unsigned& bin, double& content, double& error)
{
  //double version
  return m_flexArray.getNextActiveBin(bin,content,error);
}

//____________________________________________________________________
template <class T>
inline void Flex1DHisto<T>::scaleContentsAndErrors( const double& fact )
{
   m_sumW *= fact;
   m_sumW2 *= fact*fact;
   m_sumWX *= fact;
   m_sumWX2 *= fact;
   m_flexArray.scaleContentsAndErrors(fact);
}


#ifdef LW_DEBUG_HEAVY_USERS

//____________________________________________________________________
template <class T>
inline void Flex1DHisto<T>::countCall(const std::pair<void*,void*>&addresses)
{
  std::map<std::pair<void*,void*>,unsigned long>::iterator it = m_callmap.find(addresses);
  if (it==m_callmap.end())
    m_callmap[addresses]=0;
  else
    ++(it->second);
}

//____________________________________________________________________
template <class T>
inline void Flex1DHisto<T>::produceReport(const char*histname)
{
  std::map<std::pair<void*,void*>,unsigned long>::iterator it,itE(m_callmap.end());
  for(it=m_callmap.begin();it!=itE;++it) {
    if (it->second>0) {
      const char * caller = LWHistTraceUtils::getSymbol(it->first.second);
      const char * calledmethod = LWHistTraceUtils::getSymbol(it->first.first);
      std::cout<<"LWHists WARNING: Method in histogram called "<<it->second<<" times: "<<calledmethod<<" from "<<caller<<" (histogram named \""<<histname<<"\")"<<std::endl;
      //fixme: do free on caller and calledmethod
    }
  }
}

#endif
