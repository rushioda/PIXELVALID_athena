#! /usr/bin/env sh

# Defaults
T_RELEASE="@RELEASE@"
T_RELTYPE="@RELTYPE@"
T_RELEASEBASE=dist
ATLAS_ROOT=$SITEROOT
T_SCRIPTPATH=`dirname $0`
T_SCRIPTPATH=`echo $T_SCRIPTPATH|sed -e "s#^./#$PWD/#"`
[ "$T_INCPATH" == "" ] && export T_INCPATH="$T_SCRIPTPATH/../include"
T_DATAPATH=${PWD}/data
T_PREFIX="KitValidation"
T_TRANSVER="@KVTVERSION@"
T_TRANSDESC="@KVTDESC@"
T_KVPOSTTAG="@KVPOSTTAG@"
T_TRANSAUTH="@KVTAUTHOR@"
T_KVPOSTURL="@KVPOSTURL@"

# help
source ${T_INCPATH}/transformHelp.def

# copy files
source ${T_INCPATH}/copy.def

# End-Of-Job tasks
source ${T_INCPATH}/checkfiles.def

# Path utils
source ${T_INCPATH}/JTPathUtils.def

# Get the command line options
source ${T_INCPATH}/transformOptions.def

# Colors
source ${T_INCPATH}/colors.def

# Parameters
T_INPATH="@INPATH@"
T_INFILE="@INFILE@"
T_INPOOL="@INPOOL@"
T_OUTPATH="@OUTPATH@"
T_OUTFILE="@OUTFILE@"
T_OUTNTUPLE="@OUTNTUPLE@"
T_LOGFILE="@LOGFILE@"

# Output directory
mkdir -p ${T_OUTPATH}

# Working directory
T_TMPDIR=${T_TEMPPATH}/atlas.tmp$$
mkdir -p ${T_TMPDIR}
cd ${T_TMPDIR}

# Setup the runtime environment
kvtSetup
export T_POOLFILE=${T_INPOOL}
JT_SEARCHPATH="${T_INPATH}"

# Prepare the input files
unset T_INFILELIST
for infile in `echo ${T_INFILE}`; do
  infiletype=`echo ${infile} | cut -d : -f 1`
  infilename=`echo ${infile} | cut -d : -f 2`
  if [ "${infiletype}" == "filelist" ] ; then
    T_INFILELIST="${infilename}"
  else
    INPUTFILE=`JTPathFinder $infilename`
    [ "$T_INFILELIST" != "" ] && echo "${INPUTFILE}" >> ${T_INFILELIST}
    ln -fs `JTPathBuilder $INPUTFILE` .
  fi
done
[ -s "$T_INPATH/$T_POOLFILE" ] && cp $T_INPATH/$T_POOLFILE .
if [ "$T_INFILELIST" != "" ] ; then
  T_INFILE="${T_INFILELIST}"
  echo "Input file list contents:" >> ${T_LOGFILE}
  echo "=========================" >> ${T_LOGFILE}
  cat ${T_INFILE}                  >> ${T_LOGFILE}
  echo "=========================" >> ${T_LOGFILE}
fi

# Prestage files
PRESTAGE="@KVPRESTAGE@"
if [ "$PRESTAGE" != "" ] ; then
  echo "[KVT] Prestaging $PRESTAGE"
  wget -o kvprestage.out -N $PRESTAGE
  [ $? -ne 0 ] && cat kvprestage.out
fi

#--------------------------------------------------------------------------
#          transformation script call
#--------------------------------------------------------------------------
#if [ "`echo @TRF@ | grep \.py$`" == "" ] ; then
#  get_files @TRF@ &> /dev/null
#  EXEPATH="${PWD}/"
#else
#  EXEPATH=""
#fi
EXEPATH=""
if [ ! -s "@TRF@" ] ; then
  get_files @TRF@ &> /dev/null
  [ -s "@TRF@" ] && EXEPATH="${PWD}/"
fi
if [ "${VERBOSE}" == "yes" ] ; then
  ${EXEPATH}@TRF@ @SIGNATURE@ 2>&1 | tee -a ${T_LOGFILE}
  retcode=$?
  #VERBOSE="no"
else
  ${EXEPATH}@TRF@ @SIGNATURE@ >> ${T_LOGFILE} 2>&1 
  retcode=$?
fi

# Error report
[ "$T_GUESSPROBLEM" = "yes" -a -f checklog.txt ] && cat checklog.txt

# Copy files
copyFiles @COPYFILES@ 

# End-Of-Job tasks
if [ $retcode -eq 0 ] ; then
  checkFiles @CHECKFILES@
  retcode=$?
fi

# Post KV results to the central server
if [ "$T_POST" == "yes" -o "$T_POST" == "YES" ] ; then
  [ -s ${T_OUTPATH}/AtRndmGenSvc.out ] && \
    T_RNDSEED_OPT="--rand=\"${T_OUTPATH}/AtRndmGenSvc.out\""
  [ "${T_KVPOSTTAG}" != "" ] && \
    T_KVPOSTTAG_OPT="--tag=\"${T_KVPOSTTAG}\""
  gzip -c ${T_OUTPATH}/${T_LOGFILE} > ${T_LOGFILE}.gz
  [ -f "KV.sid.tmp" ] && rm -f KV.sid.tmp
  if [ "$T_KVPOSTURL" != "" ] ; then
    KVPOSTHOST="`echo $T_KVPOSTURL | cut -d: -f 2- | sed 's#^/*##g' | cut -d '/' -f 1`"
    KVPOSTSEL="/`echo $T_KVPOSTURL | cut -d: -f 2- | sed 's#^/*##g' | cut -d '/' -f 2-`"
    T_KVPOSTURL_OPT="--host $KVPOSTHOST --sel $KVPOSTSEL"
  fi
  if [ $retcode -eq 0 ] ; then
    [ "${VERBOSE}" == "yes" ] && echo "@KVPATH@/kvpost.py --sid=\"${T_SID}\" --rel=\"${T_RELEASE}${T_RELTYPE}\" --test=\"`basename $0`\" --desc=\"${T_TRANSDESC}\" --info=\"${T_OUTPATH}/jobInfo.xml\" --log=\"$PWD/${T_LOGFILE}.gz\" ${T_KVPOSTURL_OPT} ${T_KVPOSTTAG_OPT} ${T_RNDSEED_OPT} --res=\"OK\""
    eval @KVPATH@/kvpost.py --sid=\"${T_SID}\" \
                   --rel=\"${T_RELEASE}${T_RELTYPE}\" \
                   --test=\"`basename $0`\" --desc=\"${T_TRANSDESC}\" \
                   --info=\"${T_OUTPATH}/jobInfo.xml\" \
                   --log=\"$PWD/${T_LOGFILE}.gz\" ${T_KVPOSTURL_OPT} ${T_KVPOSTTAG_OPT} ${T_RNDSEED_OPT} \
                   --res=\"OK\" > KV.sid.tmp
    [ $? -eq 0 ] && mv -f KV.sid.tmp $T_KVWD/KV.sid || mv -f KV.sid.tmp KV.sid.err
  else
    [ "${VERBOSE}" == "yes" ] && echo "@KVPATH@/kvpost.py --sid=\"${T_SID}\" --rel=\"${T_RELEASE}${T_RELTYPE}\" --test=\"`basename $0`\" --desc=\"${T_TRANSDESC}\" --info=\"${T_OUTPATH}/jobInfo.xml\" --log=\"$PWD/${T_LOGFILE}.gz\" ${T_KVPOSTURL_OPT} ${T_KVPOSTTAG_OPT} ${T_RNDSEED_OPT} --res=\"FAILED\""
    eval @KVPATH@/kvpost.py --sid=\"${T_SID}\" \
                   --rel=\"${T_RELEASE}${T_RELTYPE}\" \
                   --test=\"`basename $0`\" --desc=\"${T_TRANSDESC}\" \
                   --info=\"${T_OUTPATH}/jobInfo.xml\" \
                   --log=\"$PWD/${T_LOGFILE}.gz\" ${T_KVPOSTURL_OPT} ${T_KVPOSTTAG_OPT} ${T_RNDSEED_OPT} \
                   --res=\"FAILED\" > KV.sid.tmp
    [ $? -eq 0 ] && mv -f KV.sid.tmp $T_KVWD/KV.sid || mv -f KV.sid.tmp KV.sid.err
  fi
  rm -f ${T_LOGFILE}.gz
fi

# Check if an error occurred
if [ $retcode -ne 0 ] ; then
  cd -; rm -fr ${T_TMPDIR}
  exit ${retcode}
fi
                                                                                
# Clean up
cd -
rm -fr ${T_TMPDIR}

exit ${retcode}
