#!/bin/sh

# KV working directory
export T_KVWD="$PWD"

# Defaults
ATLAS_ROOT=$ATLAS_VO_SW_DIR/software
T_CURPATH=`dirname $0`
T_KVINCPATH=${T_CURPATH}/../include
T_KVTTEMPLATEPATH=${T_CURPATH}/../templates
T_KVCMTPATH=${T_CURPATH}/../cmt
[ "$T_CONF" == "" ] && T_CONF=${T_CURPATH}/../etc/KitValidation.conf
T_TMPFILE=/tmp/KitValidation.$$
T_DATAPATH=$T_KVWD/data
T_ERRLOG=$T_KVWD/KitValidation.err
export T_SID="0"
T_KVOUT=$T_KVWD/KitValidation.out

# help
source ${T_KVINCPATH}/KitValidationHelp.def

# version
source ${T_KVINCPATH}/version.def

# Conf file utilities
source ${T_KVINCPATH}/confUtils.def

# Get the command line options
source ${T_KVINCPATH}/KitValidationOptions.def

# Colors
source ${T_KVINCPATH}/colors.def

# Path utilities
source ${T_KVINCPATH}/pathUtils.def

# Options to pass to the test scripts
[ "$VERBOSE" = "yes" ] && VERBOSE_OPT="-v"
[ "$T_GRID" != "" ] && T_GRID_OPT="-G ${T_GRID}"
[ "$T_COLOR" = "no" ] && T_COLOR_OPT="--bw"
[ "$T_NOSTOP" = "yes" ] && T_NOSTOP_OPT="-n"
[ "$T_GUESSPROBLEM" = "yes" ] && T_GUESSPROBLEM_OPT="-g"
[ "$T_SAVECORE" = "yes" ] && T_SAVECORE_OPT="-C"
[ "$T_RELEASEBASE" != "" ] && T_RELEASEBASE_OPT="-b ${T_RELEASEBASE}"
[ "$T_KVPROJECT" != "" ] && T_KVPROJECT_OPT="--project ${T_KVPROJECT}"


if [ "$T_CONTEXT" = "kit" ] ; then
  if [ "$T_KVPROJECT" == "" ] ; then
    # Monolithic releases
    # Setup the kit
    if [ ! -f $ATLAS_ROOT/setup.sh ] ; then
      echo "Cannot find $ATLAS_ROOT/setup.sh"
      KVcleanup                          # Perform a full cleanup
      exit 1
    fi
    source $ATLAS_ROOT/setup.sh
  else
    # Project builds
    # Setup the kit
    if [ ! -f $ATLAS_ROOT/cmtsite/setup.sh ] ; then
      echo "Cannot find $ATLAS_ROOT/cmtsite/setup.sh"
      KVcleanup                          # Perform a full cleanup
      exit 1
    fi
    [ "$SITEROOT" == "" ] && \
       source $ATLAS_ROOT/cmtsite/setup.sh -tag=${T_KVPROJECT},${T_RELEASE}
  fi
  [ "$SITEROOT" != "" ] && ATLAS_ROOT=$SITEROOT
  if [ "$GCC_SITE" = "" ] ; then
    GCC_DIR_GCC3=gcc-alt-3.2
    GCC_DIR="${GCC_DIR_GCC3}"
    GCC_SITE="/usr/local/$GCC_DIR"
  fi
  eval GCC_SITE=$GCC_SITE
  export PATH="${GCC_SITE}/bin":${PATH}
  export LD_LIBRARY_PATH="${GCC_SITE}/lib":${LD_LIBRARY_PATH}
fi

[ "$SITEROOT" == "" ] && SITEROOT=$ATLAS_ROOT

if [ "$T_SETUPONLY" = "yes" ] ; then
  echo export RELEASE=$T_RELEASE > setup-${T_RELEASE}.sh
  echo source $ATLAS_ROOT/setup.sh >> setup-${T_RELEASE}.sh
  echo export GCC_SITE=$GCC_SITE >> setup-${T_RELEASE}.sh
  echo export PATH="\${GCC_SITE}/bin":\${PATH} >> setup-${T_RELEASE}.sh
  echo export LD_LIBRARY_PATH="\${GCC_SITE}/lib":\${LD_LIBRARY_PATH} >> setup-${T_RELEASE}.sh
  chmod +x setup-${T_RELEASE}.sh
  echo -e "${C_SPECIAL}Configuration script ${C_HIGHLIGHT}setup-${T_RELEASE}.sh${C_SPECIAL} created${C_NORMAL}"
  KVcleanup                          # Perform a full cleanup
  exit 0
fi

if [ "$VERBOSE" == "yes" ] ; then
  echo "Getting compiler from $GCC_SITE"
  gcc -v 2>&1
fi

# Autodiscovery the tests
if [ "$T_AUTODISCOVERY" == "yes" ] ; then
  [ "$VERBOSE" == "yes" ] && echo "Autodiscovering tests. Please wait..."
  T_AUTODISCOVERYTESTS=autodiscovery.tmp.$$
  TMPTESTCONF=kv.testconf.tmp.$$
  rm -f $TMPTESTCONF
  # Perform the AutoDiscovery only we did not ask for a custom conf
  if [ "$T_XMLCONF" == "" ] ; then
    testAutoDiscovery > $T_AUTODISCOVERYTESTS
    if [ -s "$T_AUTODISCOVERYTESTS" ] ; then     # Add the autodiscovered tests
      rm -f $T_KVWD/KitValidation.autoconf       # to a custom configuration file
      cp $T_CONF $T_KVWD/KitValidation.autoconf
      T_CONF=$T_KVWD/KitValidation.autoconf
      if [ "$T_KVPROJECT" == "" ] ; then
        SEARCHPATH="`(cd ${ATLAS_ROOT}/${T_RELEASEBASE}/${T_RELEASE}/Control/AthenaRunTime/*/cmt;source setup.sh;echo ${DATAPATH})`"
      else
        SEARCHPATH="`(cd ${ATLAS_ROOT}/${T_KVPROJECT}/${T_RELEASE}/${T_KVPROJECT}RunTime/cmt;source setup.sh;echo ${DATAPATH})`"
      fi
      cat $T_AUTODISCOVERYTESTS | while read testconf; do
        T_XMLCFG="`pathFinder $testconf f:l | tail -n 1 2> /dev/null`"
        T_XMLCFG="`pathBuilder $T_XMLCFG`"
        createTest $T_XMLCFG $T_KVTTEMPLATEPATH/template.kvt >> $TMPTESTCONF
      done
      prepareConf $TMPTESTCONF >> $T_CONF
      rm -f $TMPTESTCONF
    fi
  else
    # get the configuration from a URL
    echo "[KV-TESTCONF] Getting test definitions from ${T_XMLCONF}"
    if [ "`echo ${T_XMLCONF} | sed 's#\(.*\)://\(.*\)#\1#g'`" == "file" ] ; then
        COPYFROM="`echo ${T_XMLCONF} | sed 's#\(.*\):/\(.*\)#\2#g'`"
        COPYTO="`basename $COPYFROM`"
        cp "${COPYFROM}" "${COPYTO}" &> xmlcopy.log
        COPYRC=$?
    else
        eval wget -o xmlcopy.log "${T_XMLCONF}"
        COPYRC=$?
    fi
    [ $COPYRC -ne 0 ] && echo "[KV-WGET] `cat xmlcopy.log`"
    T_XMLCFG="$PWD/`basename ${T_XMLCONF}`"
    if [ -s "$T_XMLCFG" ] ; then
      rm -f $T_KVWD/KitValidation.autoconf       # use a custom configuration file
      cp $T_CONF $T_KVWD/KitValidation.autoconf
      T_CONF=$T_KVWD/KitValidation.autoconf
      KVInstallFiles
      createTest $T_XMLCFG $T_KVTTEMPLATEPATH/template.kvt >> $TMPTESTCONF
      prepareConf $TMPTESTCONF >> $T_CONF
      rm -f $TMPTESTCONF
    else
      echo "[KV-TESTCONF] Unable to process $T_XMLCFG"
    fi
  fi
fi

# Check if we need to print the configuration file only
if [ "$T_SHOWCONF" != "" ] ; then
  showConf $T_SHOWCONF
  KVcleanup                          # Perform a full cleanup
  exit 0
fi

# Build the file prefix
# Special cases for the supported GRIDs
if [ "${T_GRID}" == "lcg" -o "${T_GRID}" == "LCG" ] ; then
  prefix=`edg-rm --vo atlas pi | grep "^default CE" | cut -d ':' -f 2 | sed 's/ //g'`
  [ "${prefix}" = "" ] && prefix=`hostname`
  T_PREFIX_OPT="--prefix KitValidation-${prefix}"
else
  T_PREFIX_OPT="--prefix KitValidation"
fi

# Adapt the KV prefix, if required
if [ "$T_KVPREFIX" != "" ] ; then
  T_KVTAG="[`echo $T_KVPREFIX | sed -e "s#@.*##g" -e 's# $##g'`] "
fi

# Extend the PATH
export PATH=$T_CURPATH:$PATH

# Run some tests

printf "\n" | tee -a $T_KVOUT
printf \
"${C_BANNER}" | tee -a $T_KVOUT
printf \
"${T_KVTAG}############################################################\n" | tee -a $T_KVOUT
printf \
"${T_KVTAG}##        Atlas Distribution Kit Validation Suite         ##\n" | tee -a $T_KVOUT
printf \
"${T_KVTAG}##                 %-10s  v%-10s                ##\n" \
"$KVDATE" "$KVVER-$KVREV" | tee -a $T_KVOUT
printf \
"${T_KVTAG}##                                                        ##\n" | tee -a $T_KVOUT
printf \
"${T_KVTAG}## ${C_SPECIAL}%30s${C_BANNER} ##\n" "$KVAUTHOR" | tee -a $T_KVOUT
printf \
"${T_KVTAG}############################################################" | tee -a $T_KVOUT
printf "${C_NORMAL}" | tee -a $T_KVOUT
printf "\n" | tee -a $T_KVOUT

let counter=0
echo 0 > $T_TMPFILE
T_KVTESTRELNAME="AtlasRelease"
[ "$T_KVPROJECT" != "" ] && T_KVTESTRELNAME="$T_KVPROJECT"
if [ "$T_RELEASE" ] ; then
  echo -e "${C_SPECIAL}${T_KVTAG}Testing ${T_KVTESTRELNAME} ${C_BANNER}${T_RELEASE}${T_RELTYPE}${C_NORMAL}" | tee -a $T_KVOUT
else
  echo -e "${C_SPECIAL}${T_KVTAG}Testing all ${T_KVTESTRELNAME} releases${C_NORMAL}" | tee -a $T_KVOUT
fi

# If a specific kvt file has been specified build a temporary, custom conf file
if [ "$T_KVT" != "" ] ; then
  T_CONF="$T_KVWD/KitValidation.autoconf"
  rm -f $T_CONF
  SEARCHPATH="$JOBTRANSFORMSROOT/share:$T_CURPATH/../../../JobTransforms/JobTransforms-$T_TRANSTAG-*/share:$T_CURPATH/../../../JobTransforms/JobTransforms-*/share:$T_CURPATH/../../../JobTransforms/share:$T_CURPATH/../../../JobTransforms/JobTransforms-*:$JOBTRANSFORMSROOT:$SITEROOT/Tools/JobTransforms:$T_KVWD/InstallArea/share"
  T_INCPATH="`pathFinder include | grep JobTransforms | tail -n 1 2>/dev/null`"
  export T_INCPATH="`pathBuilder $T_INCPATH`"
  T_KVTFILE="`pathFinder $T_KVT | tail -n 1 2>/dev/null`"
  T_KVTFILE="`pathBuilder $T_KVTFILE`"
  T_KVTDESC="`$T_KVTFILE -V 2> /dev/null | grep Info | cut -d ':' -f 2 | sed -e 's/^ //g' -e 's/ v$//g'`"
  [ "$T_KVTDESC" == "" ] && T_KVTDESC="Custom test"
  cat > $T_CONF <<EOF
SEARCHPATH=$SEARCHPATH
$T_RELEASE:custom:$T_KVT:$T_KVTDESC
EOF
fi

if [ "$T_RELEASE" != "" ] ; then
  egrep "(${T_RELEASE}|ALL)" $T_CONF | grep -v "^#" | grep -v SEARCHPATH
else
  grep ":" $T_CONF | grep -v "^#" | grep -v SEARCHPATH
fi | while read line ; do
  let counter+=1
  if [ "$T_RELEASE" != "" ] ; then
    release=$T_RELEASE
  else
    release=`echo $line | cut -d: -f1`
  fi
  TEST_SUITE=`echo $line | cut -d: -f2`
  TEST_NAME=`echo $line | cut -d: -f3`
  TEST_DESC=`echo $line | cut -d: -f4`
  TEST_OPTS=`echo $line | cut -d: -f5`
  if [ -z "$TEST_DESC" ] ; then
    TEST_DESC=`basename $TEST_NAME`
  fi

  # Guess where the tranformation is
  T_TRANSTAG=`echo $T_RELEASE|awk -F '.' '{ printf "%02d-%02d-%02d",$1,$2,$3}'`
  SEARCHPATH="`grep ^SEARCHPATH $T_CONF | cut -d '=' -f 2 \
             | sed -e "s#%ROOT#$T_CURPATH#g" -e "s#%VER#$T_TRANSTAG#g"`:$SEARCHPATH"
  T_STATUS="`testStatus $TEST_NAME $TEST_SUITE`"
  if [ "$T_STATUS" == "enabled" ] ; then
    if [ "$T_SCRIPTPATH" == "" ] ; then
      T_TRANSFORM="`pathFinder $TEST_NAME | tail -n 1 2>/dev/null`"
      T_TRANSFORM="`pathBuilder $T_TRANSFORM`"
    else
      T_TRANSFORM=$T_SCRIPTPATH/$TEST_NAME
    fi
    T_INCPATH="`pathFinder include | grep JobTransforms | tail -n 1 2>/dev/null`"
    export T_INCPATH="`pathBuilder $T_INCPATH`"

    # Check if we have to execute this transformation
    if [ "$T_SUITE" == "" -o "$T_SUITE" == "$TEST_SUITE" ] ; then
      if [ "$T_TEST" == "" -o "$T_TEST" == "$TEST_NAME" ] ; then
        if [ -f "$T_TRANSFORM" -a "$T_STATUS" == "enabled" ] ; then
          [ "$VERBOSE" == "yes" ] && echo "${T_KVTAG}Calling $T_TRANSFORM"
          [ "$T_MARK" == "yes" ] && \
             echo -e "${T_KVTAG}${C_SPECIAL}<$TEST_NAME BEGIN>${C_NORMAL}"
          KVTESTOUT=tmp.kv.out.$$
          T_TRANSFORMERR="`basename $T_TRANSFORM`.err.$$"
          if [ "$T_KVPREFIX" != "" ] ; then
            T_KVTESTTAG="[`echo $T_KVPREFIX \
                         | sed -e "s#@NAME#$TEST_NAME#g" -e "s#\.kvt##g"`] "
          fi
          ($T_TRANSFORM -r $release $T_RELEASEBASE_OPT -p $ATLAS_ROOT \
                        -d $T_DATAPATH -t $T_TEMPPATH \
                           $VERBOSE_OPT $T_GRID_OPT $T_COLOR_OPT \
                           $T_NOSTOP_OPT $T_GUESSPROBLEM_OPT \
                           $T_SAVECORE_OPT $T_PREFIX_OPT \
                           $T_KVPROJECT_OPT $TEST_OPTS \
                           2>$T_TRANSFORMERR; echo $? > $KVTESTOUT) \
                           | sed "s#^#${T_KVTESTTAG}#"
          let KVTESTRES=`cat $KVTESTOUT`
          rm -f $KVTESTOUT
          [ "$T_MARK" == "yes" ] && \
             echo -e "${T_KVTAG}${C_SPECIAL}<$TEST_NAME END>${C_NORMAL}"
          if [ $KVTESTRES != 0 ] ; then
            printf "${T_KVTESTTAG}%-45s [${C_FAILURE}FAILED${C_NORMAL}][${C_FAILURE}ERR=%3d${C_NORMAL}]\n" \
                   "$TEST_DESC" "$KVTESTRES"| tee -a $T_KVOUT
            let failure_code=`cat ${T_TMPFILE}`+1
            echo $failure_code > $T_TMPFILE
            [ "$T_NOSTOP" == "no" ] && break
          else
            printf "${T_KVTESTTAG}%-45s [  ${C_SUCCESS}OK${C_NORMAL}  ]\n" \
                   "$TEST_DESC" | tee -a $T_KVOUT
          fi
          # Check the session ID
          [ -s "$T_KVWD/KV.sid" ] && export T_SID="`cat $T_KVWD/KV.sid | tail -n 1`"
          # Check if a trf error occurred
          if [ -s $T_TRANSFORMERR ] ; then
            echo "============================" >> $T_ERRLOG
            echo "$T_TRANSFORM"                 >> $T_ERRLOG
            cat $T_TRANSFORMERR                 >> $T_ERRLOG
          fi
          rm -fr $T_TRANSFORMERR
        else
          T_ERRMSG="${T_KVTAG}Cannot find $TEST_NAME (not in $SEARCHPATH)"
          [ "$VERBOSE" = "yes" ] && echo "$T_ERRMSG"
        fi
      fi
    fi
  fi
done

let retcode=`cat $T_TMPFILE`
rm -fr $T_TMPFILE
echo 
echo -ne "${C_RESULT}" | tee -a $T_KVOUT
echo -e "${T_KVTAG}##################################################" | tee -a $T_KVOUT
T_KVRESULT="FAILED"
if [ $retcode == 0 ] ; then
  echo -e \
   "${T_KVTAG}##   $T_KVTESTRELNAME ${T_RELEASE}${T_RELTYPE} Validation [  ${C_SUCCESS}OK${C_RESULT}  ]" | tee -a $T_KVOUT
  T_KVRESULT="OK"
else
  echo -e \
   "${T_KVTAG}##   $T_KVTESTRELNAME ${T_RELEASE}${T_RELTYPE} Validation [${C_FAILURE}FAILED${C_RESULT}]" | tee -a $T_KVOUT
fi
echo -e "${T_KVTAG}##################################################" | tee -a $T_KVOUT
echo -e "${C_NORMAL}" | tee -a $T_KVOUT

# Send the output file, if requested
[ -s "$T_KVWD/KV.sid" ] && export T_SID="`cat $T_KVWD/KV.sid | tail -n 1`"
if [ "$T_POST" == "yes" -o "$T_POST" == "YES" ] ; then
  [ "$T_KVPOSTTAG" != "" ] && T_KVPOSTTAG_OPT="--tag \"$T_KVPOSTTAG\""
  if [ "$T_KVPOSTURL" != "" ] ; then
    KVPOSTHOST="`echo $T_KVPOSTURL | cut -d: -f 2- | sed 's#^/*##g' | cut -d '/' -f 1`"
    KVPOSTSEL="/`echo $T_KVPOSTURL | cut -d: -f 2- | sed 's#^/*##g' | cut -d '/' -f 2-`"
    T_KVPOSTURL_OPT="--host $KVPOSTHOST --sel $KVPOSTSEL"
  fi
  eval kvpost.py --sid=\"${T_SID}\" --rel=\"${T_RELEASE}${T_RELTYPE}\" --test=\"${T_KVTESTRELNAME}\" \
                 --desc=\"${T_KVTESTRELNAME} ${T_RELEASE} Validation\" --log=\"${T_KVOUT}\" \
                 --res=\"${T_KVRESULT}\" ${T_KVPOSTURL_OPT} ${T_KVPOSTTAG_OPT} > /dev/null
fi
[ -f "$T_KVWD/KV.sid" ] && rm -f $T_KVWD/KV.sid

# Perform a full cleanup
KVcleanup

exit $retcode
