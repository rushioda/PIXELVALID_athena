# Utility functions

# Find a path starting from a string = path1:path2:path3:...:pathn
pathFinder ()
{
  CHECK_FILE="$1"
  FILE_TYPE="$2"
  if [ "$SEARCHPATH" = "" ] ; then
    return -1
  fi

  echo "$SEARCHPATH" \
  | awk -F ':' '{ for (i=1; i<=NF; i++) print $i }' 2> /dev/null \
  | while read current_path; do
    FINDPATH=`eval \ls -d $current_path/$CHECK_FILE 2> /dev/null`
    if [ "$FINDPATH" != "" ] ; then
      for item in $FINDPATH ; do
        if [ "$FILE_TYPE" != "" ] ; then
          FTLIST="`echo $FILE_TYPE | sed 's/:/ /g'`"
          for ftype in $FTLIST; do
            if [ "$FTOPT" != "" ] ; then
              FTOPT="$FTOPT -o -type $ftype"
            else
              FTOPT="-type $ftype"
            fi
          done
          find $current_path/${CHECK_FILE}* -path "*${CHECK_FILE}" $FTOPT
        else
          echo $item
        fi
      done
      return 0
    fi
  done

  return 1
}

# Build a full path starting from a releative one
pathBuilder ()
{
  PATHSTRING=$1
  TMPFILE=/tmp/tmp-path.$$
  if [ "$PATHSTRING" = "" ] ; then
    return -1
  fi

  NEWPATH=""
  SKIPNEXT=0
  PATHSTRING="`echo $PATHSTRING | sed -e "s#^\./##g"`"
  FIRSTCHAR="`echo $PATHSTRING | cut -b 1`"
  [ "$FIRSTCHAR" != "/" ] && PATHSTRING="$PWD/$PATHSTRING"
  echo $PATHSTRING \
  | awk -F '/' '{ for (i=NF; i>1; i--) print $i }' \
  | while read line ; do
    if [ "$line" != "." -a "$line" != ".." -a "$line" != "" -a $SKIPNEXT -eq 0 ]
    then
      NEWPATH="`cat $TMPFILE 2>/dev/null`"
      if [ "$NEWPATH" != "" ] ; then
        echo -n $line/$NEWPATH > $TMPFILE
      else
        echo -n $line > $TMPFILE
      fi
    fi
    if [ "$line" = ".." ] ; then
      let SKIPNEXT+=1
    else
      [ $SKIPNEXT -ne 0 ] && let SKIPNEXT-=1
    fi
  done

  echo "/"`cat $TMPFILE`
  rm -fr $TMPFILE

  return 0
}

KVcleanup() {
  # Remove the the produced data, if needed
  if [ "$T_KEEPDATA" != "yes" ] ; then
     [ -d "$T_DATAPATH" ] && rm -fr $T_DATAPATH
  fi

  # Remove the temporary, custom configuration file, if needed
  [ "`basename $T_CONF`" == "KitValidation.autoconf" ] && rm -f $T_CONF

  # Remove the temporary, autodiscovery tests list, if needed
  [ -s "$T_AUTODISCOVERYTESTS" ] && rm -f $T_AUTODISCOVERYTESTS

  # Remove the output file, if needed
  [ -s "$T_KVOUT" ] && rm -f $T_KVOUT
}
