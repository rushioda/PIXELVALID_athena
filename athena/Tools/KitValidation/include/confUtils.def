# Configuration file utility functions

# List all available items in the conf file
showConf ()
{
  T_TARGET=$1
  TMPSHOW=show.tmp.$$

  # Parse the logfile
  if [ "$T_RELEASE" ] ; then
    egrep "(${T_RELEASE}|ALL)" $T_CONF | grep -v "^#"
  else
    grep ":" $T_CONF | grep -v "^#"
  fi | while read line ; do
    TEST_SUITE=`echo $line | cut -d: -f2`
    if [ "$T_TARGET" == "suite" ] ; then
      if [ "$T_SUITE" == "" -o "$T_SUITE" == "$TEST_SUITE" ] ; then
        echo $TEST_SUITE >> $TMPSHOW
      fi
    else
      TEST_NAME=`echo $line | cut -d: -f3`
      TEST_DESC=`echo $line | cut -d: -f4`
      if [ "$T_SUITE" == "" -o "$T_SUITE" == "$TEST_SUITE" ] ; then
        if [ "$T_TEST" == "" -o "$T_TEST" == "$TEST_NAME" ] ; then
          printf "%-30s --> %s\n" "$TEST_NAME" "$TEST_DESC" >> $TMPSHOW
        fi
      fi
    fi
  done

  # Print the result
  cat $TMPSHOW | sort | uniq

  # Remove the temporary file
  rm -f $TMPSHOW

  return 0
}


testStatus() {
  TESTNAME="`basename ${1}`"
  SUITENAME="${2}"

  STAT="enabled"
  for TN in `echo $T_DISABLE | sed 's#,# #g' 2>/dev/null`; do
    [ "$TN" == "ALL" -o "$TN" == "$TESTNAME" -o "$TN" == "$SUITENAME" ] && STAT="disabled"
  done
  for TN in `echo $T_ENABLE | sed 's#,# #g' 2>/dev/null`; do
    [ "$TN" == "$TESTNAME" -o "$TN" == "$SUITENAME" ] && STAT="enabled"
  done
  echo $STAT

  return 0
}

KVInstallFiles() {
  export CMTPATH=$T_KVWD:$CMTPATH
  if [ "$T_KVPROJECT" == "" ] ; then
    T_KVRT="${SITEROOT}/${T_RELEASEBASE}/${T_RELEASE}/Control/AthenaRunTime/*/cmt"
  else
    T_KVRT="${SITEROOT}/${T_KVPROJECT}/${T_RELEASE}/${T_KVPROJECT}Release/cmt"
    [ "${T_ADDSEARCH}" != "" ] && T_KVADDRT="`/bin/ls -d ${SITEROOT}/${T_ADDSEARCH}/*/${T_ADDSEARCH}Release/cmt 2>/dev/null | tail -n 1`"
  fi
  # Install the relevant files
  (cd $T_KVCMTPATH;cmt config &> /dev/null)
  (cd $T_KVCMTPATH;make install &> /dev/null)
  (cd $T_KVCMTPATH;cmt broadcast cmt config &> /dev/null)
  (cd $T_KVCMTPATH;cmt broadcast make install &> /dev/null)
  if [ "$T_KVPROJECT" == "" ] ; then
    (cd $T_KVRT; cmt broadcast make install &> /dev/null)
  fi
}

testAutoDiscovery() {
  CMTTESTCONF=cmttestconf.tmp.$$
  rm -f $RTPKGFILE

  # Install the relevant files
  KVInstallFiles

  # Get the name of the test configuration files
  (cd $T_KVCMTPATH;cmt show macro_names 2>/dev/null | grep TestConfiguration) \
    >> $CMTTESTCONF
  if [ "$SITEROOT" != "" ] ; then
    # Search in all packages
    for RTPKG in `\find $SITEROOT -maxdepth 4 -type d -path "*Release/cmt" 2>/dev/null`; do
      [ "$VERBOSE" == "yes" ] && echo "Searching ${RTPKG}..." > /dev/stderr
      (cd ${RTPKG}; cmt show macro_names 2>/dev/null | grep TestConfiguration | sed "s#\$#,${RTPKG}#") \
        >> $CMTTESTCONF
    done
  else
    # Search in selected packages
    (cd $T_KVRT; cmt show macro_names 2>/dev/null | grep TestConfiguration | sed "s#\$#,${T_KVRT}#") \
      >> $CMTTESTCONF
    if [ "$T_KVADDRT" != "" ] ; then
      (cd $T_KVADDRT;cmt show macro_names 2>/dev/null | grep TestConfiguration | sed "s#\$#,${T_KVADDRT}#") \
      >>  $CMTTESTCONF
    fi
  fi
  cat $CMTTESTCONF | cut -d ',' -f 1 | sort | uniq | \
  while read XML; do
    XMLPATH="`grep $XML $CMTTESTCONF | tail -n 1 | cut -d',' -f 2`"
    T_XML="`(cd ${XMLPATH};cmt show macro_value ${XML})`"
    #T_XML="`(cd $T_KVCMTPATH;cmt show macro_value ${XML})`"
    if [ "$T_XML" == "" ] ; then
      T_XML="`(cd $T_KVRT; cmt show macro_value ${XML})`"
      if [ "$T_XML" == "" -a "$T_KVADDRT" != "" ] ; then
        T_XML="`(cd $T_KVADDRT; cmt show macro_value ${XML})`"
      fi
    fi
    T_XML="`basename $T_XML`"
    echo $T_XML
  done

  # Clean up
  rm -fr $CMTTESTCONF

  return 0
}


buildKVT() {
  KVTTEMPLATE="${1}"
  REL="${2}"
  KVTDESC="${3}"
  KVTAUTHOR="${4}"
  KVTVERSION="${5}"
  KVPRESTAGE="${6}"
  INPATH="${7}"
  INFILE="${8}"
  INPOOL="${9}"
  OUTDESC="${10}"
  OUTFILE="${11}"
  OUTNTUPLE="${12}"
  TRF="${13}"
  SIGNATURE="${14}"
  LOGFILE="${15}"

  RELN="`echo $REL | cut -d':' -f 1`"
  RELT="`echo $REL | awk -F':' '{if ($2) print "-"$2}' | sed 's/^-*/-/g'`"

  sed -e "s#@RELEASE@#$RELN#g" \
      -e "s#@RELTYPE@#$RELT#g" \
      -e "s#@KVTDESC@#$KVTDESC#g" \
      -e "s#@KVTAUTHOR@#$KVTAUTHOR#g" \
      -e "s#@KVTVERSION@#$KVTVERSION#g" \
      -e "s#@KVPRESTAGE@#$KVPRESTAGE#g" \
      -e "s#@KVPOSTTAG@#$T_KVPOSTTAG#g" \
      -e "s#@KVPOSTURL@#$T_KVPOSTURL#g" \
      -e "s#@KVPATH@#$T_CURPATH#g" \
      -e "s#@INPATH@#$INPATH#g" \
      -e "s#@INFILE@#$INFILE#g" \
      -e "s#@INPOOL@#$INPOOL#g" \
      -e "s#@OUTPATH@#$OUTPATH#g" \
      -e "s#@OUTFILE@#$OUTFILE#g" \
      -e "s#@OUTNTUPLE@#$OUTNTUPLE#g" \
      -e "s#@TRF@#$TRF#g" \
      -e "s#@SIGNATURE@#$SIGNATURE#g" \
      -e "s#@LOGFILE@#$LOGFILE#g" \
      -e "s#@COPYFILES@#$COPYFILES#g" \
      -e "s#@CHECKFILES@#$CHECKFILES#g" \
      ${KVTTEMPLATE}

  return 0
}


parseXML() {

  CONF="${1}"
  NUM="${2}"

  /usr/bin/env python <<EOF
import sys, string
from xml.dom import minidom, Node


class KVCommonConfParser:
    testNum = 0
    kvnode  = None

    def getKVnode(self,node):
        kvnode = None
        for child in node.childNodes:
            if child.nodeType == Node.ELEMENT_NODE:
                if child.nodeName == 'kv':
                    self.kvnode = child
                else:
                    self.getKVnode(child)

    def showTest(self,node, num):
        for child in node.childNodes:
            content = []
            if child.nodeType == Node.ELEMENT_NODE:
                if (child.nodeName == 'kvtest' or child.nodeName == 'test'):
                    self.testNum = self.testNum + 1
                    for (name,value) in child.attributes.items():
                        if (self.testNum == num):
                            if (name=='name'): print 'TESTNAME: %s' % value
                            if (name=='enabled'): print 'ENABLED: %s' % value
                self.showTest(child, num)
            elif child.nodeType == Node.TEXT_NODE:
                val = string.strip(child.nodeValue)
                if (val != ''): content.append(val)
            if ((node.parentNode.nodeName == 'kvtest' or node.parentNode.nodeName == 'test') and content):
                if (self.testNum == num):
                    tag = string.upper(node.nodeName)
                    val = string.strip(string.join(content))
                    print '%s: %s' % (tag, val)

    def parse(self,conf,num):
        try:
            doc = minidom.parse(conf)
            self.getKVnode(doc)
            if self.kvnode:
                self.showTest(self.kvnode,num)
        except:
            print >> sys.stderr, "Cannot parse conf file %s" % conf

    def tests(self):
        return self.testNum

if __name__ == '__main__':
    kvcfg = KVCommonConfParser()
    kvcfg.parse("$CONF",$NUM)
    if ($NUM == 0): print kvcfg.tests()
EOF

  return 0
}

createTest() {
  XMLCONF="${1}"
  KVTTEMPLATE="${2}"
  TMPTESTDEF=kv.testdef.tmp.$$
  rm -f $TMPTESTDEF

  NUMTESTS=`parseXML $XMLCONF 0`
  for TESTINDX in `seq 1 $NUMTESTS`; do
    # Create the configuration line
    parseXML $XMLCONF $TESTINDX > $TMPTESTDEF
    TESTNAME="`grep ^TESTNAME $TMPTESTDEF     | tail -n 1 | cut -d':' -f 2- \
                                              | sed 's/^ *//g'`"
    REL="`grep ^RELEASE $TMPTESTDEF           | tail -n 1 | cut -d':' -f 2- \
                                              | sed 's/^ *//g'`"
    SUITE="`grep ^KVSUITE $TMPTESTDEF         | tail -n 1 | cut -d':' -f 2- \
                                              | sed 's/^ *//g'`"
    PRESTAGE="`grep ^KVPRESTAGE $TMPTESTDEF   | tail -n 1 | cut -d':' -f 2- \
                                              | sed 's/^ *//g'`"
    if [ "$SUITE" == "" ] ; then
      SUITE="`grep ^SUITE $TMPTESTDEF         | tail -n 1 | cut -d':' -f 2- \
                                              | sed 's/^ *//g'`"
    fi
    AUTHOR="`grep ^AUTHOR $TMPTESTDEF         | tail -n 1 | cut -d':' -f 2- \
                                              | sed 's/^ *//g'`"
    VERSION="`grep ^VERSION $TMPTESTDEF       | tail -n 1 | cut -d':' -f 2- \
                                              | sed 's/^ *//g'`"
    INPATH="`grep ^INPATH $TMPTESTDEF         | tail -n 1 | cut -d':' -f 2- \
                                              | sed 's/^ *//g'`"
    INFILE="`grep ^INFILE $TMPTESTDEF         | tail -n 1 | cut -d':' -f 2- \
                                              | sed 's/^ *//g'`"
    INPOOL="`grep ^INPOOL $TMPTESTDEF         | tail -n 1 | cut -d':' -f 2- \
                                              | sed 's/^ *//g'`"
    OUTPATH="`grep ^OUTPATH $TMPTESTDEF       | tail -n 1 | cut -d':' -f 2- \
                                              | sed 's/^ *//g'`"
    OUTFILE="`grep ^OUTFILE $TMPTESTDEF       | tail -n 1 | cut -d':' -f 2- \
                                              | sed 's/^ *//g'`"
    OUTNTUPLE="`grep ^OUTNTUPLE $TMPTESTDEF   | tail -n 1 | cut -d':' -f 2- \
                                              | sed 's/^ *//g'`"
    LOGFILE="`grep ^LOGFILE $TMPTESTDEF       | tail -n 1 | cut -d':' -f 2- \
                                              | sed 's/^ *//g'`"
    TRF="`grep ^TRF $TMPTESTDEF               | tail -n 1 | cut -d':' -f 2- \
                                              | sed 's/^ *//g'`"
    SIGNATURE="`grep ^SIGNATURE $TMPTESTDEF   | tail -n 1 | cut -d':' -f 2- \
                                              | sed 's/^ *//g'`"
    DESC="`grep ^DESC $TMPTESTDEF             | tail -n 1 | cut -d':' -f 2- \
                                              | sed 's/^ *//g'`"
    COPYFILES="`grep ^COPYFILES $TMPTESTDEF   | tail -n 1 | cut -d':' -f 2- \
                                              | sed 's/^ *//g'`"
    CHECKFILES="`grep ^CHECKFILES $TMPTESTDEF | tail -n 1 | cut -d':' -f 2- \
                                              | sed 's/^ *//g'`"
    PRIO="`grep ^PRIORITY $TMPTESTDEF         | tail -n 1 | cut -d':' -f 2- \
                                              | sed 's/^ *//g'`"
    ENABLED="`grep ^ENABLED $TMPTESTDEF       | tail -n 1 | cut -d':' -f 2- \
                                              | sed 's/^ *//g' \
                                              | tr '[:lower:]' '[:upper:]'`"
    for TN in `echo $T_ENABLE | sed 's#,# #g' 2>/dev/null`; do
      [ "$TN" == "${TESTNAME}.kvt" -o "$TN" == "$SUITE" ] && ENABLED="TRUE"
    done
    if [ "$ENABLED" == "TRUE" ] ; then
      [ "$TESTNAME" == "" ] && TESTNAME="KV_${TRF}_dynamic"
      TESTNAME="${TESTNAME}.kvt"
      TESTDIR="$T_KVWD/InstallArea/share"
      [ ! -d "$TESTDIR" ] && mkdir -p $TESTDIR
      echo "${PRIO}:${REL}:${SUITE}:${TESTNAME}:${DESC}"
      rm -fr $T_KVWD/InstallArea/share/$TESTNAME
      RELNAMETYPE="${T_RELEASE}`echo ${T_RELTYPE} | sed 's/^-/:/g'`"
      buildKVT "$KVTTEMPLATE" "${RELNAMETYPE}" "$DESC" "$AUTHOR" \
               "$VERSION" "$PRESTAGE" "$INPATH" "$INFILE" "$INPOOL" "$OUTPATH" \
               "$OUTFILE" "$OUTNTUPLE" "$TRF" "$SIGNATURE" \
               "$LOGFILE" "$COPYFILES" "$CHECKFILES" \
               > $TESTDIR/$TESTNAME
      chmod +x $TESTDIR/$TESTNAME
    fi
    rm -f $TMPTESTDEF
  done
}

prepareConf() {
  TMPTESTCONF=${1}
  [ -s "$TMPTESTCONF" ] && cat $TMPTESTCONF | sort -t ':' -n | cut -d ':' -f 2-
}
