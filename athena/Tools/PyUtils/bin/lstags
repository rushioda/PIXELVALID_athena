#!/usr/bin/env python
#
# @file:    lstags
# @purpose: List the version (tag) of the currently checked out packages.
#           Optionally compare to the release version and most recent version.
#           Inspired by BaBar's 'statusrel' command.
# @author:  Frank Winklmeier
#

import sys, os
from PyCmt import Cmt
from PyUtils.WorkAreaLib import get_latest_pkg_tag
from PyUtils.Decorators import memoize

class Package:
   def __init__(self, name, version = None, path = ''):
      self.name = name
      self.version = version
      self.path = path


@memoize
def read_pkg_file(filename):
   """Read a packages.txt file and cache the content if already read"""
   try:
      lines = open(filename).readlines()
   except:
      lines = []
   pkgs = {}
   for l in lines:
      if l.startswith('#'): continue
      name,tag = l.split()
      pkgs[name] = tag
   return pkgs
   

def cmake_get_pkg_version(fullPkgName):
   """Get version of package in the release"""

   cpath = os.environ.get('CMAKE_PREFIX_PATH','')
   workDir = os.environ.get('WorkDir_DIR')
   for cdir in cpath.split(os.pathsep):
      if (workDir and cdir.find(workDir)!=-1): continue
      pkgs = read_pkg_file(os.path.join(cdir,'packages.txt'))
      if fullPkgName in pkgs:
         return pkgs[fullPkgName]

   return None
   
def get_pkg_version(fullPkgName, cmt=None):
   if cmt==None:
      v = cmake_get_pkg_version(fullPkgName)
   else:
      v = cmt.get_pkg_version(fullPkgName)
   return v if v!=None else "NOT_FOUND"

def cmt_get_packages(testArea, pkgSupList):
   """Get locally checked out packages"""

   from PyUtils.WorkAreaLib import scan
   cmtPackages = scan( testArea, pkgSupList )
   pkgs = [Package(p.name,p.version,p.path) for p in cmtPackages]
   return pkgs

def cmake_get_packages(testArea, pkgSupList):
   """Get locally checked out packages"""

   from PyUtils.WorkAreaLib import listCMakeDirs
   pkgs = []
   for p in listCMakeDirs(testArea):
      name = os.path.basename(p)
      path = os.path.dirname(p)
      if name not in pkgSupList:
         try:
            version = open(os.path.join(p,'version.cmake')).read().strip()
         except:
            version = 'UNKNOWN'
         pkgs.append(Package(name,version,path))
   return pkgs

def main():

   import logging
   logging.basicConfig(level = logging.WARNING)
   log = logging.getLogger("lstags")
   
   import optparse
   parser = optparse.OptionParser(description="List the version of the locally checked out packages.")
   
   parser.add_option("-d", "--differ", action="store_true", dest="differ",
                     help="only show tags that differ")
   parser.add_option("-r", "--recent", action="store_true", dest="recent",
                     help="show most recent tag in SVN")
   parser.add_option("-q", "--quiet", action="store_true", dest="quiet",
                     help="only print package name (e.g. as input to pkgco/svnco)")
   parser.add_option("-f", "--fullName", action="store_true", dest="fullName",
                     help="print full package name including all containers")
   parser.add_option("-c", "--coCmd", action="store_true", dest="coCmd",
                     help="display checkout command")
   parser.add_option("-n", "--nosupression", action="store_true", dest="nosup",
                     help="do not use default package supression list")
   
   (opt, args) = parser.parse_args()

   # Some consistency checks
   if (opt.coCmd):
      opt.fullName = True
      opt.quiet = True
      opt.recent = False
      
   if (opt.nosup): pkgSupList = []
   else: pkgSupList = ["WorkArea"]

   if 'CMAKE_PREFIX_PATH' in os.environ:
      cmt = None
   else:
      cmt = Cmt.CmtWrapper()

   testArea = os.environ.get("TestArea")
   if testArea==None:
      log.fatal("TestArea environment variable not set. Setup your test release first.")
      return 1
   
   if cmt==None:
      packages = cmake_get_packages(testArea, pkgSupList)
   else:
      packages = cmt_get_packages(testArea, pkgSupList)
   
   for pkg in packages:
      pkgContainer = pkg.path.replace(testArea,"").lstrip("/")
      fullPkgName = pkgContainer + "/" + pkg.name

      if (opt.differ or not opt.quiet):    # Need to know the release version of pkg
         testversion = get_pkg_version(fullPkgName,cmt)
      
      if (not opt.differ or testversion!=pkg.version):
         prefix = ""
         if (opt.fullName): prefix = pkgContainer+"/"

         release = os.environ.get("AtlasVersion","Release")
         msg = prefix+pkg.version;
         
         if (not opt.quiet):
            msg += "  (%s uses %s)" % (release,testversion)
            
         if (opt.recent):
            headversion = get_latest_pkg_tag(fullPkgName)   # this is just using SVN, not CMT
            if headversion==None: headversion="NONE"
            msg += "  (most recent %s)" % (headversion)

         if (opt.coCmd):
            if cmt==None:
               msg = "svnco.py %s" % pkg.version
            else:
               msg = "cmt co -r %s %s" % (pkg.version,fullPkgName)
            
         print msg

   return 0


if __name__ == "__main__":
   try:
      sys.exit(main())
   except KeyboardInterrupt:
      sys.exit(1)
      
