package TestProject

author David Quarrie      <David.Quarrie@cern.ch>

# This is a skeleton package that is designed to help developers with
# their test releases, by making it possible to broadcast build
# commands to all packages that they have checked, and also to create
# the necessary run-time environment. This package, TestProject, is
# designed for use with ATLAS project builds, whereas the TestRelease
# package is designed for use with full builds.
#
#---------------------------------------------------------------------
# This line is necessary to ensure that the Atlas policies and patterns
# are enforced and available.
use AtlasPolicy AtlasPolicy-*

#---------------------------------------------------------------------
# Setup the build environment so that a "cmt broadcast ..." will be
# propagated to all checked out packages. There are two different
# approaches to doing this:
#
# 1. Add a dependency against the complete Atlas project. This will
#    automatically create dependencies against all packages within the
#    project, at the cost of a performance penalty for e.g. running
#    source setup.[c]sh. This is the simpler of the two alternatives
#    since in most cases only minor editting of this file is necessary
#    in order to specify which project is being worked against. Note 
#    that there are potential "gotcha's" with this, especially if the
#    version tag of a checked out package is different from that in the
#    base release.
#
# 2. Add an explicit dependency against each checked out package. The
#    syntax is:
#
#      use <Pkg> <tag> [<parent>]
#
#    where:
#
#     <Pkg>     The name of the package
#     <tag>     The package tag (e.g. MyPackage-00-01-02)
#     <parent>  The parent packages if this is a sub-package
#
#    e.g.
#
#      use AthExHelloWorld AthExHelloWorld-00-* Control/AthenaExamples
#
# If you wish to use strategy 1. above, uncomment the appropriate
# line below corresponding to the project that you're working against.
#use AtlasAnalysisRelease       AtlasAnalysisRelease-*
#use AtlasConditionsRelease     AtlasConditionsRelease-*
#use AtlasCoreRelease           AtlasCoreRelease-*
#use AtlasEventRelease          AtlasEventRelease-*
#use AtlasProductionRelease     AtlasProductionRelease-*
#use AtlasOfflineRelease        AtlasOfflineRelease-*
#use AtlasReconstructionRelease AtlasReconstructionRelease-*
#use AtlasSimulationRelease     AtlasSimulationRelease-*
#use AtlasTriggerRelease        AtlasTriggerRelease-*

# If you wish to use strategy 2. above, insert the relevant use statements for
# your checked out packages here

use AthExHelloWorld AthExHelloWorld-00-* Control/AthenaExamples

#---------------------------------------------------------------------
# Setup the run-time environment. Nothing needs to be done here if you
# use alternative 1 above to setup the build time environment since 
# that is done automatically by the dependency on the <project>Release
# package. However, if you are using alternative 2, you'll need to 
# uncomment one of the the following use statements, or add your
# own in order to setup the run-time environment. There isn't a simple
# way of doing this uniquely.
#use AtlasAnalysisRunTime       AtlasAnalysisRunTime-*       -no_auto_imports
#use AtlasConditionsRunTime     AtlasConditionsRunTime-*     -no_auto_imports
use AtlasCoreRunTime           AtlasCoreRunTime-*           -no_auto_imports
#use AtlasEventRunTime          AtlasEventRunTime-*          -no_auto_imports
#use AtlasProductionRunTime     AtlasProductionRunTime-*     -no_auto_imports
#use AtlasOfflineRunTime        AtlasOfflineRunTime-*        -no_auto_imports
#use AtlasReconstructionRunTime AtlasReconstructionRunTime-* -no_auto_imports
#use AtlasSimulationRunTime     AtlasSimulationRunTime-*     -no_auto_imports
#use AtlasTriggerRunTime        AtlasTriggerRunTime-*        -no_auto_imports
#use MinimalRunTime             MinimalRunTime-* Control     -no_auto_imports
