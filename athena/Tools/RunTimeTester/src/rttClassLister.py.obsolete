import glob, imp, sys, os, types, string


def loadModule(f):

    try:
        return sys.modules[f]
    except KeyError:
        pass
    
    fp, pathname, description = imp.find_module(f)
    # print 'module', f
    # print 'pathname',pathname
    # print 'description',description
    try:
        return imp.load_module(f, fp, pathname, description)
    finally:
        if fp: fp.close()


def rttClassLister(srcPath):
    outText = ''
    nloadGood = 0
    nloadBad  = 0
    classes = [] # a list of all classes instantiated accumulated over all runs
    files = glob.glob(os.path.join(srcPath,'*.py'))
    # files = ['./SrcPaths.py']
    # files = [f for f in files if f.find('Paths')>=0]
    for f in files:
        f = os.path.basename(f)
        mf = f[:-3]
        msg =  'loading: %s:' % mf
        msg = string.ljust(msg,50)
        outText += msg
        try:
            module = loadModule(mf)
            outText +=  'OK\n'
            nloadGood += 1
        except Exception, e:
            outText +=  'ERROR\n'
            nloadBad += 1
            continue

        # dictionary has a string: class
        # where the string is the class name, and the class has the
        # full module qualifictation

        # find the classes for the module
        nclasses = [i for i  in module.__dict__.keys() if
                    isinstance(module.__dict__[i], types.ClassType)]

        # remove those that do not come from the RTT
        toRemove = []
        nonRTTmodules = ['os', 'xml', 'popen']
        for nonRTTmodule in nonRTTmodules:
            toRemove =  [n for n in nclasses
                         if str(module.__dict__[n]).startswith(nonRTTmodule)]
        [nclasses.remove(n) for n in toRemove]
        classes.extend(nclasses)

    temp = {}
    for a in classes: temp[a]=None
    classes = temp.keys()
    classes.sort()
    return (classes, outText, nloadGood, nloadBad)

if __name__ == '__main__':
    startPath = os.getcwd()
    print rttClassLister(startPath )
