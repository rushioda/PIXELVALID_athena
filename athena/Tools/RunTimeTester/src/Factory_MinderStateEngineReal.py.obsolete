from Factory_BaseClass                 import Factory
from LinuxInteractiveMinderStateEngine import LinuxInteractiveMinderStateEngine
from MinderStateEngine                 import MinderStateEngine
from ErrorMinderStateEngine            import ErrorMinderStateEngine
from BatchMinderStateEngine            import BatchMinderStateEngine
from ContainerMinderStateEngine        import ContainerMinderStateEngine
from WorkerMinderStateEngine           import WorkerMinderStateEngine

from exc2string2                       import exc2string2
from RTTSException                     import RTTCodingError

class MinderStateEngineFactory(Factory):
  def __init__(self, logger):
    Factory.__init__(self, logger, self.__class__.__name__)
    
    self.dict = {
      'LinuxInteractiveJobMinder': LinuxInteractiveMinderStateEngine,
      'Minder':                    MinderStateEngine,         # used by WatcherJobMinder through this base class
      'ErrorJobMinder':            ErrorMinderStateEngine,
      'BatchJobMinder':            BatchMinderStateEngine, # used by LSFBatchJobMinder through this base class
      'LSFBatchJobMinder':         BatchMinderStateEngine, # used by LSFBatchJobMinder through this base class
      'ContainerMinder':           ContainerMinderStateEngine,
      'SequentialMinder':          ContainerMinderStateEngine,
      'ParallelMinder':            ContainerMinderStateEngine,
      'ChainJobMinder':            ContainerMinderStateEngine,
      'PseudoJobMinder':           MinderStateEngine,
      'WorkerMinder':              WorkerMinderStateEngine
      }

  def create(self, minder, state='queued'): 

    key = minder.__class__.__name__

    try:
      engine =  self.dict[key](minder, state)
    except:
      msg = 'MinderStateEngineFactory: Cannot create a State engine for minder type %s:\Traceback:\n%s' % (key, exc2string2())
      print msg
      raise RTTCodingError(msg)

    return engine
