'State enegine for Error Minders'

from MinderStateEngine import MinderStateEngine


class ErrorMinderStateEngine(MinderStateEngine):
    """
    Empty state machine. This will be stepped by calls to poll(),
    and will end up in state = success. Different behaviour is obtained
    by subclassing the xxxTest and xxxAction methods.
    """
    
    def __init__(self, minder, state='queued'):
        MinderStateEngine.__init__(self, minder, state)
        
    # -----------------------------------------------

    def functionsMinderMustHave(self): return []

    # -----------------------------------------------

    def fromQueued(self):self.state.set('done')

    # -----------------------------------------------

    def fromRunning(self):
        if self.operatorCloseDownTest(): self.state.set('operatorCloseDown') 
        self.state.set('done')

