import sys
from types import *
def mergeDict(src, dest):
      for k in src.keys():
            dest.setdefault(k,0)
            dest[k] += src[k]
      

def sizeOf(obj, logger):

      objType  = type(obj)
      
      typeDict = {
      BooleanType:         0,
      BufferType:          0,
      BuiltinFunctionType: 0,
      BuiltinMethodType:   0,
      ClassType:           0,
      CodeType:            0,
      ComplexType:         0,
      DictProxyType:       0,
      DictType:            0,
      DictionaryType:      0,
      EllipsisType:        0,
      FileType:            0,
      FloatType:           0,
      FrameType:           0,
      FunctionType:        0,
      GeneratorType:       0,
      InstanceType:        0,
      IntType:             0,
      LambdaType:          0,
      ListType:            0,
      LongType:            0,
      MethodType:          0,
      ModuleType:          0,
      NoneType:            0,
      NotImplementedType:  0,
      ObjectType:          0,
      SliceType:           0,
      StringType:          0,
      StringTypes:         0,
      TracebackType:       0,
      TupleType:           0,
      TypeType:            0,
      UnboundMethodType:   0,
      UnicodeType:         0,
      XRangeType:          0,
      }
      hasStorage = [type(()), type([]), type({}), type('s')]
      for c in hasStorage:
            key = str(c)+'_storage'
            typeDict[key]=0

      if objType not in typeDict.keys():
            logger.warning('sizeOf: unknown type, will not be counted: %s' % str(objType))
            return {}
      typeDict[objType] += 1
      # for item in typeDict.items():
      #      print '%30s   %5d' %  item

      #sys.exit(0)

      containers = [type(()), type([])]
      if objType in containers:
            typeDict[str(objType)+'_storage'] += len(obj)
            
            for e in obj:
                  mergeDict(sizeOf(e, logger), typeDict)


      if hasattr(obj, '__dict__'):
            mergeDict(sizeOf(obj.__dict__, logger), typeDict)

      if objType == type('a'):
            typeDict[str(objType)+'_storage'] += len(obj)
                                         
      if objType == type({}):
            typeDict[str(objType)+'_storage'] += 2*len(obj)
            [mergeDict(sizeOf(v, logger), typeDict) for v in obj.values()]
            
                  
            
            
                  
      
      return typeDict

if __name__ == '__main__':
      class B:
            def __init__(self):
                  self.b = 1
                  #self.bs = 'bbbbbbbbb'
      class A:
            def __init__(self):
                  self.i = 0
                  self.j = 4.2
                  self.k = 'aaaa'
                  self.dict = {}
                  # self.bclass = B
                  self.binst  = B()
                  self.tup    = ()
                  self.list   = []
                  self.ty     = type('a')
      from PseudoLogger import PseudoLogger
      d = sizeOf(A(), PseudoLogger() )
      print '-------final-----'
      for k in d.keys():
            if d[k]>0:
                  print '%40s   %5d' % ( k, d[k])
      print '-------final-----'
 
    	
