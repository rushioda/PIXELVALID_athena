# Function to count the events in a pool file
# Author: Davide Costanzo

eventCount() {
  FILENAME="$1"
  cat > _eventCount.py <<EOF
#--------------------------------------------------------------
# Load POOL support
#--------------------------------------------------------------
include( "AthenaPoolCnvSvc/ReadAthenaPool_jobOptions.py" )

#--------------------------------------------------------------
# Event related parameters
#--------------------------------------------------------------
EventSelector = Service( "EventSelector" )
EventSelector.SkipEvents = 0
theApp.EvtMax = -1
EventSelector = Service( "EventSelector" )
EventSelector.InputCollection        = "$FILENAME"

MessageSvc = Service( "MessageSvc" )
MessageSvc.OutputLevel = 3
MessageSvc.defaultLimit = 9999999  # all messages
#==============================================================

EOF
  # Count
  value=`athena.py _eventCount.py 2>&1 | grep " start of event" | wc -l`
  rm -f _eventCount.py
  [ "$value" == "" ] && value=0
  echo $value
  return 0
}

expandFileList() {
  STRING="${1}"
  EXPANDMATCH="${2}"
  TMPEM=tmp.expandmatch.$$
  TMPEMRC=tmp.expandmatchrc.$$
  expansionrc=0

  # get the number of parts in the string
  parts="`echo $STRING | awk -F '[\\\[\\\]]' '{ print NF }'`"

  # If it is a file list "cat" it to stdout
  if [ $parts -eq 1 ] ; then
    if [ -s $STRING ] ; then
      cat $STRING 2> /dev/null
      expansionrc=$?
      [ $expansionrc -ne 0 ] && return $expansionrc
    else
      if [ "$STRING" != "NONE" ] ; then
        # Match the filenames
        if [ "$EXPANDMATCH" == "match" ] ; then
          \ls -d ${STRING}* 2>&1 > $TMPEM
          expansionrc=$?
          if [ $expansionrc -ne 0 ] ; then
            rm -f $TMPEM
            return $expansionrc
          fi
          cat $TMPEM | while read fn ; do
            echo $fn
          done
          rm -f $TMPEM
        else
          echo $STRING
        fi
      fi
    fi
    return 0
  fi

  # Loop over the parts and expand the [x-y] constructs
  echo $expansionrc > $TMPEMRC
  echo $STRING | awk -F '[\\\[\\\]]' '{for (i=1; i<=NF; i++) print $i}' | \
  while read part; do
    let index=index+1
    let arrayindex=0
    str="`echo $part | sed 's/\n//g'`"

    # Do expansion
    if [ $((index % 2)) == 0 ] ; then
      for subpart in `echo $part | sed 's/,/ /g'`; do
        begin="`echo $subpart | cut -d '-' -f 1`"
        end="`echo $subpart | cut -d '-' -f 2`"
        size=${#end}
        if [ ${#oldlist[@]} -gt 0 ] ; then
          for oldlistitem in "${oldlist[@]}"; do
            for item in `eval seq -f '%0${size}g' ${begin} ${end}`; do
              list[${arrayindex}]="${oldlistitem}${item}"
              let arrayindex=arrayindex+1
            done
          done
        else
          for item in `eval seq -f '%0${size}g' ${begin} ${end}`; do
            list[${arrayindex}]="${oldlistitem}${item}"
            let arrayindex=arrayindex+1
          done
        fi
      done

    # Copy fixed text
    elif [ "$part" != "" ] ; then
      if [ ${#oldlist[@]} -gt 0 ] ; then
        for oldlistitem in "${oldlist[@]}"; do
          list[${arrayindex}]="${oldlistitem}${str}"
          let arrayindex=arrayindex+1
        done
      else
        list[${arrayindex}]="${str}"
      fi
    fi

    # Save the current array or print it
    let oldindx=0
    for listitem in "${list[@]}"; do
      if [ "$index" == "$parts" ] ; then
        # Match the filenames
        if [ "$EXPANDMATCH" == "match" ] ; then
          \ls -d ${listitem}* 2>&1 > $TMPEM
          expansionrc=$?
          [ $expansionrc -ne 0 ] && echo $expansionrc > $TMPEMRC
          cat $TMPEM | while read fn ; do
            echo $fn
          done
          rm -f $TMPEM
        else
          echo ${listitem}
        fi
      else
        oldlist[$oldindx]=$listitem
      fi
      let oldindx=oldindx+1
    done
  done 
  expansionrc=`cat $TMPEMRC`
  rm -f $TMPEMRC

  return $expansionrc
}

[ -d "`dirname $0`/../python" ] \
       && export PYTHONPATH="`dirname $0`/../python":$PYTHONPATH
[ -d $T_INCPATH ] && export DATAPATH=$T_INCPATH:$DATAPATH
