# Print Error Report Header
printErrorHeader()
{
    printf "${C_SPECIAL}%s${C_NORMAL}\n" "--------  Problem report -------"
}

# Print Error Report Text
printErrorText()
{
    printf "[${C_FAILURE}%s${C_NORMAL}]\n%s\n" "$1" "$2"
}

# Print Error Report Footer
printErrorFooter()
{
        printf "${C_SPECIAL}%s${C_NORMAL}\n" "================================"
}

# Check Athena logfiles

athenaCheckLog()
{
  LOG="$1"
  TMP_CHECKLOG=/tmp/tmp.checklog.$$
  T_CHECKLOGOUT=checklog.txt
  TMP_IGNORE_FILE=/tmp/tmp.ignore.$$
  TMP_KNOWLEDGE_BASE=/tmp/tmp.kb.$$
  IGNORE_FILE=${T_INCPATH}/athenaCheckLog.ignore
  KNOWLEDGE_BASE=${T_INCPATH}/athenaCheckLog.kb
  ATHENASUCCESSFILE=${T_INCPATH}/athenaCheckLog.success
  KEYALL="ALL"

  rm -f ${TMP_CHECKLOG}

# Check if the log is available
  if [ ! -f $LOG ] ; then
    printErrorHeader >> ${T_CHECKLOGOUT}
    printErrorText "TRANSFORMATION/SOFTWARE Problem" "No athena logfile found" \
                     >> ${T_CHECKLOGOUT}
    printErrorFooter >> ${T_CHECKLOGOUT}
    return 200
  fi

# Check if the release was properly configured
  if [ "${T_RELEASE}" == "" ] ; then
    printErrorHeader >> ${T_CHECKLOGOUT}
    printErrorText "TRANSFORMATION CONFIG Problem" \
                   "T_RELEASE not set or set to the wrong value" \
                     >> ${T_CHECKLOGOUT}
    printErrorFooter >> ${T_CHECKLOGOUT}
    return 201
  fi

# Use only the first 3 digits of T_RELEASE
  T_RELEASETEMP="`echo $T_RELEASE | cut -d . -f -3`"
 
# Check if Athena was closed succesfully
  [ "$T_IGNOREATHENACRASH" = "yes" -a "$VERBOSE" = "yes" ] \
                              && echo "Ignoring Athena crashes for this test"
  ATHENASUCCESS="`grep ^${T_RELEASETEMP} ${ATHENASUCCESSFILE}`"
  [ "$ATHENASUCCESS" = "" ] && ATHENASUCCESS="`grep ^${KEYALL} ${ATHENASUCCESSFILE} | cut -d ',' -f 2-`"
  grep -q "$ATHENASUCCESS" "$LOG"
  [ $? -eq 0 -o "$T_IGNOREATHENACRASH" = "yes" ] && ATHENAOK=1 || ATHENAOK=0

# Look for errors and warnings 
  awk '{type=match(substr($0,19,80),"(WARNING|  ERROR|  FATAL)"); if (type > 0) { print substr($0,0,18)substr($0,type+18,length($0)-type) }}' ${LOG} | sort | uniq > ${TMP_CHECKLOG}.0

# Ignore the errors/warnings matching the lines in the ".ignore" file
  egrep "^${KEYALL}|^${T_RELEASETEMP}" $IGNORE_FILE | cut -d ',' -f 2- > $TMP_IGNORE_FILE
  if [ -f $TMP_IGNORE_FILE ] ; then
    grep -v -f $TMP_IGNORE_FILE ${TMP_CHECKLOG}.0 > ${TMP_CHECKLOG}.1
  else
    cp ${TMP_CHECKLOG}.0 ${TMP_CHECKLOG}.1
  fi
  rm -f ${TMP_IGNORE_FILE}
  mv -f ${TMP_CHECKLOG}.1 ${TMP_CHECKLOG}.0

# Check for Athena crashes
  if [ $ATHENAOK == 0 ] ; then
    echo "AthenaCrash" >> ${TMP_CHECKLOG}.0
  fi

# Guess what is the problem 
  touch ${TMP_CHECKLOG}
  if [ -f $KNOWLEDGE_BASE ] ; then

    # First check if we know these errors
    egrep "^${KEYALL}|^${T_RELEASETEMP}" ${KNOWLEDGE_BASE} \
                              | cut -d ',' -f 2- > $TMP_KNOWLEDGE_BASE
    cat ${TMP_KNOWLEDGE_BASE} | while read line ; do
      T_PROBTYPE="`echo "$line" | cut -d ',' -f 1`"
      T_SIGNATURE="`echo "$line" | cut -d ',' -f 2`"
      T_PROBLEM="`grep "$T_SIGNATURE" ${TMP_CHECKLOG}.0`"
      if [ "$T_PROBLEM" != "" ] ; then
        printErrorHeader >> ${TMP_CHECKLOG}
        printErrorText "$T_PROBTYPE" "$T_PROBLEM" >> ${TMP_CHECKLOG}
        printErrorFooter >> ${TMP_CHECKLOG}
        grep -v "$T_SIGNATURE" ${TMP_CHECKLOG}.0 > ${TMP_CHECKLOG}.1
        mv -f ${TMP_CHECKLOG}.1 ${TMP_CHECKLOG}.0
      fi
    done
    rm -f ${TMP_KNOWLEDGE_BASE}

    # These are unknown errors
    cat ${TMP_CHECKLOG}.0 | while read line ; do
      printErrorHeader >> ${TMP_CHECKLOG}
      printErrorText "Unknown Problem" "$line" >> ${TMP_CHECKLOG}
      printErrorFooter >> ${TMP_CHECKLOG}
    done
  else
    cp ${TMP_CHECKLOG}.0 ${TMP_CHECKLOG}
  fi
  rm -f ${TMP_CHECKLOG}.0

# Report the problems, if required 
  if [ `cat $TMP_CHECKLOG| wc -l` != 0 -o $? != 0 ] ; then
    cp ${TMP_CHECKLOG} ${T_CHECKLOGOUT}
    [ $ATHENAOK -eq 1 ] && checklog_retcode=1 || checklog_retcode=2
  else
    [ $ATHENAOK -eq 1 ] && checklog_retcode=0 || checklog_retcode=2
  fi
  rm -f ${TMP_CHECKLOG}

  if [ -s "${T_CHECKLOGOUT}" ] ; then
    echo "JT>--------------------------"
    echo "JT> An error occurred"
    echo "JT> Printing CheckLog output"
    echo "JT>--------------------------"
    cat ${T_CHECKLOGOUT}
    echo "JT>--------------------------"
    echo "JT> End of CheckLog output"
    echo "JT>--------------------------"
    # Parse the athena log file scanning for known error patterns
    athenaCategorizeErrors "$LOG"
  else
    echo "JT>--------------------------"
    echo "JT> CheckLog OK"
    echo "JT>--------------------------"
  fi

  return $checklog_retcode
}


# Check compilation logfiles

compilationCheckLog()
{
  LOG="$1"
  TMP_CHECKLOG=/tmp/tmp.checklog.$$
  T_CHECKLOGOUT=checklog.txt

  rm -f ${TMP_CHECKLOG}

# Check if the log is available
  if [ ! -f $LOG ] ; then
    printErrorHeader >> ${T_CHECKLOGOUT}
    printErrorText "COMPILATION PROBLEM" \
                   "No compilation logfile found" >> ${T_CHECKLOGOUT}
    printErrorFooter >> ${T_CHECKLOGOUT}
    return 200
  fi

# Look for errors and warnings 
  egrep -i "\*\*\*|no such file" ${LOG} | sort | uniq >> ${TMP_CHECKLOG}

# Report the problems, if needed 
  if [ `cat $TMP_CHECKLOG| wc -l` != 0 -o $? != 0 ] ; then
    printErrorHeader > ${T_CHECKLOGOUT}
    printErrorText "COMPILATION PROBLEM" >> ${T_CHECKLOGOUT}
    grep -i "Now trying" ${LOG} | tail -n 1 >> ${T_CHECKLOGOUT}
    cat ${TMP_CHECKLOG} >> ${T_CHECKLOGOUT}
    printErrorFooter >> ${T_CHECKLOGOUT}
    checklog_retcode=1
  else
    checklog_retcode=0
  fi
  rm -f ${TMP_CHECKLOG}

  return $checklog_retcode
}

athenaCheckOutput () {
  filename="${1}"
  [ "${2}" == "" ] && maxevents=100000 || maxevents="${2}"

  TMPJO=athenaCheckOutputOptions.py
  echo "EventSelector.InputCollections = [ \"$filename\" ]" > ${TMPJO}
  echo "theApp.EvtMax = $maxevents"                        >> ${TMPJO}

  # Read the input file
  athena.py AthenaPoolTest/EventInfoRead.py ${TMPJO}
  checkOutput_retcode = $?

  rm -f ${TMPJO}
  return $checkOutput_retcode
}

# Extract the WARNING/ERROR/FATAL messages and categorize them for the logfiles

athenaLogStats()
{
  LOG="$1"
  TMP_LOGSTATS=/tmp/tmp.logstats.$$
  T_LOGSTATSOUT=jtstats.txt

  rm -f ${TMP_LOGSTATS}

# Check if the log is available
  if [ ! -f "$LOG" ] ; then
    return 200
  fi

# Look for errors and warnings 
  awk '{type=match(substr($0,19,30),"(WARNING|  ERROR|  FATAL)"); if (type > 0) { print substr($0,0,18)substr($0,type+18,length($0)-type) }}' ${LOG} | sort > ${TMP_LOGSTATS}

  printf "WARNING %d\n" "`grep WARNING ${TMP_LOGSTATS} | wc -l`" \
         >  ${T_LOGSTATSOUT}
  printf "ERROR   %d\n" "`grep ERROR ${TMP_LOGSTATS} | wc -l`" \
         >> ${T_LOGSTATSOUT}
  printf "FATAL   %d\n" "`grep FATAL ${TMP_LOGSTATS} | wc -l`" \
         >> ${T_LOGSTATSOUT}
  rm -f ${TMP_LOGSTATS}

  return 0
}

athenaCategorizeErrors() {
  LOG="${1}"
  KNOWLEDGE_BASE=${T_INCPATH}/athenaCheckLog.kb
  TMP_KNOWLEDGE_BASE=/tmp/tmp.kb.$$
  T_ERROR_CATEGORIES=error_categories.txt
  TMP_ERROR_CATEGORIES=/tmp/tmp.$T_ERROR_CATEGORIES.$$
  KEYALL="ALL"
  
  # Check for known patterns in the logfile 
  if [ -s $KNOWLEDGE_BASE ] ; then
    egrep "^${KEYALL}|^${T_RELEASETEMP}" ${KNOWLEDGE_BASE} \
                              | cut -d ',' -f 2- > $TMP_KNOWLEDGE_BASE
    cat ${TMP_KNOWLEDGE_BASE} | while read line ; do
      T_PROBTYPE="`echo "$line" | cut -d ',' -f 1`"
      T_SIGNATURE="`echo "$line" | cut -d ',' -f 2`"
      T_PROBLEM="`grep "$T_SIGNATURE" ${LOG}`"
      if [ "$T_PROBLEM" != "" ] ; then
        echo "$T_PROBTYPE,$T_PROBLEM" >> ${TMP_ERROR_CATEGORIES}
      fi
    done
    rm -f ${TMP_KNOWLEDGE_BASE}
  fi
  if [ -f ${TMP_ERROR_CATEGORIES} ] ; then
      cut -d',' -f 1 ${TMP_ERROR_CATEGORIES} | sort | uniq -c | sed 's#:# #' \
          > ${T_ERROR_CATEGORIES}
      rm -f ${TMP_ERROR_CATEGORIES}
  fi
  return 0
}
