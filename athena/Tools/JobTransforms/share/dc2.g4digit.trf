#! /usr/bin/env sh

###############################################################
##  G4 digitization transformation                           ##
##                                                           ##
##  (C) Armin Nairz, Nectarios Benekos,                      ##
##      Davide Costanzo, Alessandro De Salvo                 ##
###############################################################

T_CORETRANSVER=1.3.0

#######################################################################
#
# Defaults are commented out
# The calling script should set T_RELEASE and T_DISTREL as appropriate
#
#[ "$T_RELEASE" = "" ] && T_RELEASE="8.1.0"
#[ "$T_DISTREL" = "" ] && T_DISTREL=$SITEROOT/dist/$T_RELEASE
[ "$T_INCPATH" = "" ] && T_INCPATH=`dirname $0`/../include
[ "$T_JOBOPTSPATH" = "" ] && T_JOBOPTSPATH=`dirname $0`/../jobOptions

# logfile check functions
source ${T_INCPATH}/checkLogUtils.def

# meta data writer
source ${T_INCPATH}/metaData.def

# colors
source ${T_INCPATH}/colors.def

# patch engine
source ${T_INCPATH}/patch.def

###########################################################################

if test $# -ne 4 ; then
  echo "G4 digitization transformation v$T_CORETRANSVER"
  echo "USAGE:   `basename $0` <infilename> <outfilename> <nevt> <skip>"
  echo 
  echo "         <infilename> .... name of input file (full path)"
  echo "         <outfilename> ... local name of output file"
  echo "         <nevt> .......... number of output events to be processed" 
  echo "         <skip> .......... number of input events to be skipped"  
  echo 
  echo "EXAMPLE: `basename $0` dc2.002676.mu_plus_pt5_eta320.g4sim750._0001.pool.root  dc2.002676.mu_plus_pt5_eta320.g4dig760._0001.pool.root 1000 0"
  echo 
  exit 30
fi

#--------------------------------------------------------------------------
#    parameter translation
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
#    Signature:  infilename  outfilename  nevt  skip
#--------------------------------------------------------------------------
export INFN=$1
export OUTFN=$2
export NEVT=$3
export SKIP=$4
 
#--------------------------------------------------------------------------
#    set up and run digitization job
#--------------------------------------------------------------------------

echo "############# ATLAS G4 Simulation/ Digitization ##################"
echo "##"
echo "##################################################################"
echo "## STEP 1: setting up environment"
echo "##################################################################"
echo "##"

unset LOCALSIM
unset LOCALRUNDIR
unset POOL_OUTMSG_LEVEL 

# power of the processor
echo "## ... processor specifications:"
grep MHz /var/log/dmesg
cat /proc/meminfo

export system="`uname -a`"
export userid="`   id   `"
export HOSTMACHINE=`hostname -f`

# Set up the run conditions
export JOBOPTSEARCHPATH="${T_JOBOPTSPATH},${JOBOPTSEARCHPATH}"
get_files -data PDGTABLE.MeV

# Start compilation of the paches, if needed
T_PATCHES=SimulationPatches.tar.gz
patchRelease &> log
retcode=$?
cat log
if [ $retcode -ne 0 ] ; then
  compilationCheckLog log
  exit $retcode
fi

# Reduce verbosity of POOL
export POOL_OUTMSG_LEVEL=5

# Print the environment
printenv | grep -v 'CONFIG=' | grep -v "ROOT=$T_DISTREL"
echo
echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
echo

#  generate jobOptions file
#--------------------------------------------------------------------------
cat > DigitizationConfig.py <<EOF
include( "AthenaCommon/AthenaCommonFlags.py" )
EvtMax = $NEVT
SkipEvents = $SKIP
PoolHitsInput = [ "$INFN" ]
PoolRDOOutput = "$OUTFN"

#--------------------------------------------------------------
# Write Muon digits instead of RDOs
#--------------------------------------------------------------
writeMuonDigit = True
from AthenaCommon.DetFlags import DetFlags
DetFlags.writeRDOPool.Muon_setOff()
EOF
#--------------------------------------------------------------------------

# copy POOL file catalog, set AthenaPOOL output level
if [ ! -f PoolFileCatalog.xml -a -f "$T_POOLFILE" ] ; then
  echo "##"  
  echo "## ... copying $T_POOLFILE ..."  
  cp -f $T_POOLFILE PoolFileCatalog.xml
fi
export POOL_OUTMSG_LEVEL=5
echo "## ... setting POOL_OUTMSG_LEVEL=$POOL_OUTMSG_LEVEL"


#########################################################################
# run the job ...
#
echo " "
echo " "
echo "##################################################################"
echo "## STEP 2: running athena ..." 
echo "##################################################################"

time athena.py DigitizationConfig.py Digitization/AtlasDigitization.py &> log
athenaCheckLog log
retcode=$?
if [ $retcode -eq 0 ] ; then
  POOLFILELFN=$OUTFN
  POOLFILEID=`grep $OUTFN -B 100 PoolFileCatalog.xml \
                   | grep "File ID" | tail -n 1 | cut -d '"' -f 2`
  EVNTTOT="`grep \"end of event\" log | wc -l | sed 's/^ *//g'`"
  metaDataHeader
  metaDataAddTag   "META" "name=\"events\"" "type=\"string\""
  metaDataOpenTag  "File" "ID=\"$POOLFILEID\""
  metaDataOpenTag  "logical"
  metaDataAddTag   "lfn" "name=\"$POOLFILELFN\""
  metaDataCloseTag "logical"
  metaDataAddTag   "metadata" \
                   "att_name=\"events\"" "att_value=\"$EVNTTOT\""
  metaDataCloseTag "File"
  metaDataFooter
fi
cat log

# Check the local POOL catalog
if [[ -n `grep $OUTFN PoolFileCatalog.xml` ]]; then
  # assemble new file catalog containing only the produced datafile
  rm -f NewPoolFileCatalog.xml
  echo "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>"  > NewPoolFileCatalog.xml
  echo "<"'!'"-- Edited By POOL -->"                                      >> NewPoolFileCatalog.xml
  echo "<"'!'"DOCTYPE POOLFILECATALOG SYSTEM \"InMemory\">"               >> NewPoolFileCatalog.xml
  echo "<POOLFILECATALOG>"                                             >> NewPoolFileCatalog.xml
  grep -A4 -B3 $OUTFN PoolFileCatalog.xml                              >> NewPoolFileCatalog.xml  
  echo "</POOLFILECATALOG>"                                            >> NewPoolFileCatalog.xml
  
  echo " "
  echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
  echo "   Contents of PoolFileCatalog.xml ..."
  echo " "
  cat NewPoolFileCatalog.xml 
  echo " "
  echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
fi
 
echo SIZE: `ls -l $OUTFN`     

if [ $retcode -eq 0 ] ; then
  [ ! -s "$OUTFN" ] && retcode=40
fi

echo " "
echo "##"
echo "##################################################################"
echo "end of job"

# Exit with return code
exit $retcode
