#! /usr/bin/env sh

#######################################################################
##  G4 data reconstruction transformation using Rel. >= 8.1.0        ##
##                                                                   ##
##  (C) A. De Salvo, RD Schaffer                                     ##
##      November 18th 2004                                           ##
#######################################################################

T_CORETRANSVER=1.0.1

#######################################################################
#
# Defaults are commented out
# The calling script should set T_RELEASE and T_DISTREL as appropriate
#[ "$T_RELEASE" = "" ] && T_RELEASE="8.1.0"
#[ "$T_DISTREL" = "" ] && T_DISTREL=$SITEROOT/dist/$T_RELEASE
[ "$T_INCPATH" = "" ] && T_INCPATH=`dirname $0`/../include
[ "$T_JOBOPTSPATH" = "" ] && T_JOBOPTSPATH=`dirname $0`/../jobOptions

# logfile check functions
source ${T_INCPATH}/checkLogUtils.def

# meta data writer
source ${T_INCPATH}/metaData.def

# colors
source ${T_INCPATH}/colors.def

# patch engine
source ${T_INCPATH}/patch.def

###########################################################################

if test $# -lt 7 ; then
  echo "Recostruction transformation v$T_CORETRANSVER"
  echo "USAGE:   `basename $0` <infilename> <infiletype> <outfilename> <ntuplefilename> <histfilename> <nevt> <skip> [<customjobopt>]"
  echo 
  echo "         <infilename> ..... name of input file (full path)"
  echo "         <infiletype> ..... type of input file ('zebra', 'pool' or 'bytestream')"
  echo "         <outfilename> .... output filename"
  echo "         <ntuplefilename> . local name of ntuple file. No ntuple produced if ='NONE'"
  echo "         <histfilename> ... local name of histogram file. No histogram produced if ='NONE'"
  echo "         <nevt> ........... number of output events to be processed" 
  echo "         <skip> ........... number of input events to be skipped" 
  echo "         <customjobopt> ... custom jobOption filename (optional)" 
  echo 
  exit 30
fi

#--------------------------------------------------------------------------
#    parameter translation
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
#    Signature:  infilename intype ntuplefilename histfilename nevt skip
#--------------------------------------------------------------------------
export INFN=$1
export INTY=$2
export OUTFN=$3
export NTUP="`echo $4 | sed 's/NONE.*/NONE/g'`"
export HIST="`echo $5 | sed 's/NONE.*/NONE/g'`"
export NEVT=$6
export SKIP=$7
export CUSTJO=$8

 
#--------------------------------------------------------------------------
#    set up and run reconstruction job
#--------------------------------------------------------------------------


echo "##################     ATLAS reconstruction     ##################"
echo "##"
echo "##################################################################"
echo "## STEP 1: setting up environment"
echo "##################################################################"
echo "##"

# power of the processor
echo "## ... processor specifications:"
grep MHz /var/log/dmesg
cat /proc/meminfo

export system="`uname -a`"
export userid="`   id   `"
export HOSTMACHINE=`hostname -f`

# Set up the run conditions
find ${T_DISTREL}/InstallArea/share -name "*.xml" -exec cp -f {} . \;
find ${T_DISTREL}/InstallArea/share -name "*.dtd" -exec cp -f {} . \;
get_files -data PDGTABLE.MeV
(mkdir DetDescrRoot; cd DetDescrRoot; get_files -data DetDescr.root)
export JOBOPTSEARCHPATH="${JOBOPTSEARCHPATH},${T_JOBOPTSPATH}"

# Start compilation of the paches, if needed
T_PATCHES=ReconstructionPatches.tar.gz
patchRelease &> log
retcode=$?
cat log
if [ $retcode -ne 0 ] ; then
  compilationCheckLog log
  exit $retcode
fi

# Reduce verbosity of POOL
export POOL_OUTMSG_LEVEL=5

# Print the environment
printenv | grep -v 'CONFIG=' | grep -v "ROOT=$T_DISTREL"
echo
echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
echo

#  generate jobOptions file
echo "## ... generating jobOptions file"
#--------------------------------------------------------------------------
if [ "$CUSTJO" != "" ] ; then
cat $CUSTJO > jobO.py
else
cat > jobO.py <<EOF

# topOptions prepared for DC2 Tier 0 exercise
# run reconstruction, write ESD

from AthenaCommon.GlobalFlags import GlobalFlags
# set the type of input
GlobalFlags.InputFormat.set_${INTY}()


# write ESD
doWriteESD=True
doCBNT=True
doHist=True
PoolESDOutput="$OUTFN"

# switch off algorithm not useful as it does not create (yet)  any ESD
doBtagging=False
doConversion=False
doStaco=False



# ####end of mandatory section ########



# fine tuning: switch off/tune unstable algorithms
doMuonboyBarrelOnly=True

# switches for debugging info
if not 'EvtMax' in dir():
   EvtMax=$NEVT

SkipEvents=$SKIP

#doNameAuditor=True
#doDetailedAuditor=True
OutputLevel=INFO

# Output filenames
if ("$NTUP" != "NONE"):
   RootNtupleOutput="$NTUP"
if ("$HIST" != "NONE"):
   RootHistoOutput="$HIST"

include ("RecExCommon/RecExCommon_flags.py")

# main jobOption
include ("RecExCommon/RecExCommon_topOptions.py")
#should be in the above file
#NOT NEEDED IN 9.0.3 include( "MuonEventAthenaPool/MuonEventAthenaPool_joboptions.py" )
#NOT NEEDED IN 9.0.3 include( "TileEventAthenaPool/TileEventAthenaPool_joboptions.py" )

#input filename
if GlobalFlags.InputFormat.is_bytestream():
   ByteStreamInputSvc= Service ("ByteStreamInputSvc")
   ByteStreamInputSvc.FullFileName = ["./$INFN"]
   # no truth if bytestrea
   doTruth=False
   #switch off MissingET if no truth (will be fixed in 9.0.4)
   doMissingET=False
elif GlobalFlags.InputFormat.is_pool():
   EventSelector.InputCollections = ["$INFN"] 

#only audit part of CBNT for memory leak checking
CBNT_Athena.Members=["CBNT_EventInfo","CBNT_Audit"]

# Must load by hand the muon preprawdata dict
#NOT NEEDED IN 9.0.3 include( "MuonRIOOnTrack/MuonRIOOnTrackDict_joboptions.py" )

EOF
fi
#--------------------------------------------------------------------------

# overwrite existing jobOptions file 
mv jobO.py myTopOptions.py

# print jobOption file
echo "## ... Printing jobOption file"
cat myTopOptions.py

# copy POOL file catalog, set AthenaPOOL output level
if [ ! -f PoolFileCatalog.xml -a -f "$T_POOLFILE" ] ; then
  echo "##"  
  echo "## ... copying $T_POOLFILE ..."  
  cp -f $T_POOLFILE PoolFileCatalog.xml
fi
export POOL_OUTMSG_LEVEL=5
echo "## ... setting POOL_OUTMSG_LEVEL=$POOL_OUTMSG_LEVEL"


#########################################################################
# run the job ...
#
echo " "
echo " "
echo "##################################################################"
echo "## STEP 2: running athena ..." 
echo "##################################################################"

time athena.py -b myTopOptions.py &> log
athenaCheckLog log
retcode=$?
cat log

if [ $retcode -eq 0 ] ; then
  [ ! -s "$OUTFN" ] && retcode=40
#  if [ "$NTUP" != "NONE" ] ; then
#    [ ! -s "$NTUP" ] && retcode=41
#    [ ! -s "$OUTFN" -a ! -s "$NTUP" ] && retcode=42
#  fi
#  if [ "$HIST" != "NONE" ] ; then
#    [ ! -s "$HIST" ] && retcode=43
#  fi
#  if [ "$NTUP" != "NONE" -a "$HIST" != "NONE" ] ; then
#    [ ! -s "$NTUP" -a ! -s "$HIST" ] && retcode=44
#    [ ! -s "$OUTFN" -a ! -s "$HIST" ] && retcode=45
#    [ ! -s "$OUTFN" -a ! -s "$NTUP" -a ! -s "$HIST" ] && retcode=46
#  fi
fi

echo " "
echo "##"
echo "##################################################################"
echo "End of job with retcode = " $retcode

# Exit with return code
exit $retcode
