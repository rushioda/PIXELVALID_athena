#!/bin/sh

# checkSharedLibs function
checkSharedLibs ()
{
  retcode=0
  exclude_list=""
  rm -f temp.libs
  find $SHLIB -perm +755 -exec ldd {} 2>/dev/null \; >> temp.libs
  grep "not found" temp.libs | egrep -v "$exclude_list" | awk '{print $1}' > temp-missing.libs.tmp
  grep -v "not found" temp.libs | grep $SITEROOT | awk '{print $3}' > temp-found.libs.tmp
  sort temp-missing.libs.tmp | uniq > temp-missing.libs
  sort temp-found.libs.tmp | uniq > temp-found.libs
  rm -f temp-missing.libs.tmp temp-found.libs.tmp temp.libs
  MISSING_LIBS=`cat temp-missing.libs | wc -l`
  FOUND_LIBS=`cat temp-found.libs | wc -l`
  if [ $MISSING_LIBS -ne 0 ] ; then
    printf "${C_FAILURE}%d %s" $MISSING_LIBS "missing librar"
    [ $MISSING_LIBS -gt 1 ] && printf "%s${C_NORMAL}\n" "ies:" \
                       || printf "%s${C_NORMAL}\n" "y:"
    cat temp-missing.libs
    if [ "$VERBOSE" == "yes" ] ; then
      echo -e "${C_SPECIAL}List of library paths searched:${C_NORMAL}"
      for item in `echo ${LD_LIBRARY_PATH} | sed 's/:/ /g'`; do
        echo -e "   $item"
      done
    fi
    retcode=1
  else
    if [ "$VERBOSE" = "yes" ] ; then
      printf "${C_SUCCESS}%d librar" $FOUND_LIBS
      [ $FOUND_LIBS -gt 1 ] && printf "%s " "ies" || printf "%s " "y"
      printf "%s${C_NORMAL}\n" "found and checked"
    fi
  fi
  rm -fr temp-missing.libs temp-found.libs

  return $retcode 
}


###################################################
#                  Main script                    #
###################################################

# Defaults
T_RELEASE=8.1.0
T_RELEASEBASE=dist
ATLAS_ROOT=${SITEROOT}
T_SCRIPTPATH=`dirname $0`
T_SCRIPTPATH=`echo $T_SCRIPTPATH|sed -e "s#^./#$PWD/#"`
export T_INCPATH="$T_SCRIPTPATH/../include"
T_TRANSVER=1.0.0
T_TRANSDESC="RunTime Simple Checks"
T_TRANSAUTH="Alessandro De Salvo <Alessandro.De.Salvo@roma1.infn.it>"

# help
source ${T_INCPATH}/transformHelp.def

# Get the command line options
source ${T_INCPATH}/transformOptions.def

# Colors
source ${T_INCPATH}/colors.def

# Working directory
T_TMPDIR=${T_TEMPPATH}/atlas.tmp$$
mkdir -p ${T_TMPDIR}
cd ${T_TMPDIR}

# Setup the run time environment
kvtSetup

if [ "${VERBOSE}" = "yes" ] ; then
  echo "################################################"
  echo "##         Performing simple checks           ##"
  echo "################################################"
fi

# Overall return code
overall_retcode=0

# Check if athena.py is there
EXE=`which athena.py 2> /dev/null`
retcode=$?
printf "%-45s " "athena executable"
if [ ${retcode} -eq 0 ] ; then
  printf "[${C_PASSED}PASSED${C_NORMAL}]\n"
else
  printf "[${C_FAILURE}FAILED${C_NORMAL}]\n"
  overall_retcode=1
  [ "$T_NOSTOP" = "no" ] && (cd /tmp; rm -fr ${T_TMPDIR}; exit ${retcode})
fi

# Check if athena has all basic shared libraries available
SHLIB=$EXE
checkSharedLibs
retcode=$?
printf "%-45s " "athena shared libs"
if [ ${retcode} -eq 0 ] ; then
  printf "[${C_PASSED}PASSED${C_NORMAL}]\n"
else
  printf "[${C_FAILURE}FAILED${C_NORMAL}]\n"
  overall_retcode=1
  [ "$T_NOSTOP" = "no" ] && (cd /tmp; rm -fr ${T_TMPDIR}; exit ${retcode})
fi

# Check the shared libraries in
# $ATLAS_ROOT/dist/$T_RELEASE/InstallArea/$CMTCONFIG/lib
SHLIB=${ATLAS_ROOT}/dist/${T_RELEASE}/InstallArea/${CMTCONFIG}/lib
checkSharedLibs
retcode=$?
printf "%-45s " "Release shared libraries"
if [ ${retcode} -eq 0 ] ; then
  printf "[${C_PASSED}PASSED${C_NORMAL}]\n"
else
  printf "[${C_FAILURE}FAILED${C_NORMAL}]\n"
  overall_retcode=1
  [ "$T_NOSTOP" = "no" ] && (cd /tmp; rm -fr ${T_TMPDIR}; exit ${retcode})
fi

# Clean up
cd /tmp; rm -fr ${T_TMPDIR}

exit $overall_retcode
