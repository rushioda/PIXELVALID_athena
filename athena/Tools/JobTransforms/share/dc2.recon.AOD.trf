#! /usr/bin/env sh

#######################################################################
##  G4 data reconstruction transformation using Rel. >= 8.1.0        ##
##                                                                   ##
##  (C) A. De Salvo, RD Schaffer                                     ##
##      November 18th 2004                                           ##
#######################################################################

T_CORETRANSVER=1.0.0

#######################################################################
#
# Defaults are commented out
# The calling script should set T_RELEASE and T_DISTREL as appropriate
#[ "$T_RELEASE" = "" ] && T_RELEASE="8.1.0"
#[ "$T_DISTREL" = "" ] && T_DISTREL=$SITEROOT/dist/$T_RELEASE
[ "$T_INCPATH" = "" ] && T_INCPATH=`dirname $0`/../include
[ "$T_JOBOPTSPATH" = "" ] && T_JOBOPTSPATH=`dirname $0`/../jobOptions

# logfile check functions
source ${T_INCPATH}/checkLogUtils.def

# meta data writer
source ${T_INCPATH}/metaData.def

# colors
source ${T_INCPATH}/colors.def

# patch engine
source ${T_INCPATH}/patch.def

###########################################################################

if test $# -lt 4 ; then
  echo "Recostruction transformation (AOD production) v$T_CORETRANSVER"
  echo "USAGE:   `basename $0` <dataset> <jobseq> <infilelist> <nevt> [<customjobopt>]"
  echo 
  echo "         <dataset> ........ dataset (run) number"
  echo "         <jobseq> ......... job sequential number, used to build the"
  echo "                            output file names."
  echo "                            Output files will be called:"
  echo "                   dc2.<dataset>.analysis.<streamname>.<jobseq>.*"
  echo "         <infilelist> ..... name of the file with the list of inputs"
  echo "         <nevt> ........... number of output events to be processed" 
  echo "         <customjobopt> ... custom jobOption filename (optional)" 
  echo 
  exit 30
fi

#--------------------------------------------------------------------------
#    parameter translation
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
#    Signature:  datasetnum jobseqnum inputfiles nevt
#--------------------------------------------------------------------------
export DSET=$1
export JOBSEQ=$2
export INFN=$3
export NEVT=$4
export CUSTJO=$5

if [ ! -s "$INFN" ] ; then
  echo "Input file list $INFN not found."
  exit 30
fi
 
#--------------------------------------------------------------------------
#    set up and run reconstruction job
#--------------------------------------------------------------------------


echo "##################     ATLAS reconstruction     ##################"
echo "##"
echo "##################################################################"
echo "## STEP 1: setting up environment"
echo "##################################################################"
echo "##"

# power of the processor
echo "## ... processor specifications:"
grep MHz /var/log/dmesg
cat /proc/meminfo

export system="`uname -a`"
export userid="`   id   `"
export HOSTMACHINE=`hostname -f`

# Set up the run conditions
find ${T_DISTREL}/InstallArea/share -name "*.xml" -exec cp -f {} . \;
find ${T_DISTREL}/InstallArea/share -name "*.dtd" -exec cp -f {} . \;
get_files -data PDGTABLE.MeV
(mkdir DetDescrRoot; cd DetDescrRoot; get_files -data DetDescr.root)
export JOBOPTSEARCHPATH="${JOBOPTSEARCHPATH},${T_JOBOPTSPATH}"

# Start compilation of the paches, if needed
T_PATCHES=ReconstructionPatches.tar.gz
patchRelease &> log
retcode=$?
cat log
if [ $retcode -ne 0 ] ; then
  compilationCheckLog log
  exit $retcode
fi

# Reduce verbosity of POOL
export POOL_OUTMSG_LEVEL=5

# Print the environment
printenv | grep -v 'CONFIG=' | grep -v "ROOT=$T_DISTREL"
echo
echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
echo

#  generate jobOptions file
echo "## ... generating jobOptions file"
#--------------------------------------------------------------------------
if [ "$CUSTJO" != "" ] ; then
cat $CUSTJO > files.py
else
cat > files.py <<EOF
EvtMax=$NEVT
EOF
  echo -n "PoolESDInput=[" >> files.py
  let counter=0
  numoflines=`cat $INFN | wc -l`
  cat $INFN | while read inputfn; do
    let counter=$counter+1
    echo -n "'$inputfn'" >> files.py
    if [ $counter -lt $numoflines ] ; then
      echo -n ", " >> files.py
    fi
  done
  echo "]" >> files.py
  # Rename the output pool files
  egrep 'sPrefix|sSuffix|sName' \
        ${T_DISTREL}/InstallArea/jobOptions/EventSelection/OutStreams.py | \
        egrep -v 'Algorithm|theApp|Outfix|Run' | \
        sed -e "s#^\( *\)##g" -e "s#.AOD#.$JOBSEQ.AOD#g" \
            -e "s#test_#dc2.$DSET.analysis.#g" > rename.py
  # Add the streams to the PoolFileCatalog.xml
  #cat rename.py | sed 's#Stream\(.*\)=#print#' > print_streams.py
  #python print_streams.py | while read streamname; do
  #  FCregisterPFN -p $streamname -t ROOT_All
  #  touch $streamname
  #done
  # Rename the output collections
  egrep 'sPrefix|sSuffix|cName' \
        ${T_DISTREL}/InstallArea/jobOptions/EventSelection/RegStreams.py | \
        egrep -v 'Algorithm|theApp|Outfix|Run' | \
        sed -e "s#^\( *\)##g" -e "s#.coll#.$JOBSEQ.coll#g" \
            -e "s#test_#dc2.$DSET.analysis.#g" >> rename.py
  # Add the AOD files to the PoolFileCatalog.xml and touch all files
  cat rename.py | \
      sed -e 's#Stream\(.*\)=\(.*\)'\''\(.*\)'\''#print '\''AOD \3'\''#' \
          -e 's#Coll\(.*\)=#print '\''COLL %s'\'' %#' > print_streams.py
  python print_streams.py | while read streamline; do
    streamtype="`echo $streamline | awk '{print $1}'`"
    streamname="`echo $streamline | awk '{print $2}'`"
    if [ "$streamtype" == "AOD" ] ; then
      FCregisterPFN -p $streamname -t ROOT_All
      touch $streamname
    else
      touch ${streamname}.root
    fi
  done
fi
#--------------------------------------------------------------------------

# print jobOption file
echo "## ... Printing jobOption file"
cat files.py

# copy POOL file catalog, set AthenaPOOL output level
if [ ! -f PoolFileCatalog.xml -a -f "$T_POOLFILE" ] ; then
  echo "##"  
  echo "## ... copying $T_POOLFILE ..."  
  cp -f $T_POOLFILE PoolFileCatalog.xml
fi
export POOL_OUTMSG_LEVEL=5
echo "## ... setting POOL_OUTMSG_LEVEL=$POOL_OUTMSG_LEVEL"


#########################################################################
# run the job ...
#
echo " "
echo " "
echo "##################################################################"
echo "## STEP 2: running athena ..." 
echo "##################################################################"

time athena.py -b files.py \
                  EventSelection/EventSplitTest_topOptions.py \
                  rename.py &> log
athenaCheckLog log
retcode=$?
cat log

# rename AOD and coll files
#for outputfn in `ls test_*.root`; do
#  newoutputfn="`echo $outputfn | sed "s#\(test_\)\(.*\)\.\(.*\)\.\(.*\)#dc2.$DSET.analysis.\2.$JOBSEQ.\3.\4#g"`"
#  mv $outputfn $newoutputfn
#done

echo " "
echo "##"
echo "##################################################################"
echo "End of job."

# Exit with return code
exit $retcode
