#! /usr/bin/env sh

#######################################################################
##  G4 data reconstruction transformation using Rel. >= 8.1.0        ##
##                                                                   ##
##  (C) D. Costanzo, A. De Salvo, L. March                           ##
##      September 17th 2004                                          ##
#######################################################################

T_CORETRANSVER=1.0.1

#######################################################################
#
# Defaults are commented out
# The calling script should set T_RELEASE and T_DISTREL as appropriate
#[ "$T_RELEASE" = "" ] && T_RELEASE="8.1.0"
#[ "$T_DISTREL" = "" ] && T_DISTREL=$SITEROOT/dist/$T_RELEASE
[ "$T_INCPATH" = "" ] && T_INCPATH=`dirname $0`/../include
[ "$T_JOBOPTSPATH" = "" ] && T_JOBOPTSPATH=`dirname $0`/../jobOptions

# logfile check functions
source ${T_INCPATH}/checkLogUtils.def

# meta data writer
source ${T_INCPATH}/metaData.def

# colors
source ${T_INCPATH}/colors.def

# patch engine
source ${T_INCPATH}/patch.def

###########################################################################

if test $# -ne 5 ; then
  echo "G4 data recostruction transformation v$T_CORETRANSVER"
  echo "USAGE:   `basename $0` <infilename> <ntuplefilename> <histfilename> <nevt> <skip>"
  echo 
  echo "         <infilename> ..... name of input file (full path)"
  echo "         <ntuplefilename> . local name of ntuple file"
  echo "         <histfilename> ... local name of histogram file"
  echo "         <nevt> ........... number of output events to be processed" 
  echo "         <skip> ........... number of input events to be skipped"  
  echo 
  exit 30
fi

#--------------------------------------------------------------------------
#    parameter translation
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
#    Signature:  infilename  ntuplefilename histfilename  nevt  skip
#--------------------------------------------------------------------------
export INFN=$1
export NTUP=$2
export HIST=$3
export NEVT=$4
export SKIP=$5

 
#--------------------------------------------------------------------------
#    set up and run reconstruction job
#--------------------------------------------------------------------------


echo "################## ATLAS G4 data reconstruction ##################"
echo "##"
echo "##################################################################"
echo "## STEP 1: setting up environment"
echo "##################################################################"
echo "##"

# power of the processor
echo "## ... processor specifications:"
grep MHz /var/log/dmesg
cat /proc/meminfo

export system="`uname -a`"
export userid="`   id   `"
export HOSTMACHINE=`hostname -f`

# Set up the run conditions
find ${T_DISTREL}/InstallArea/share -name "*.xml" -exec cp -f {} . \;
find ${T_DISTREL}/InstallArea/share -name "*.dtd" -exec cp -f {} . \;
get_files -data PDGTABLE.MeV
(mkdir DetDescrRoot; cd DetDescrRoot; get_files -data DetDescr.root)
export JOBOPTSEARCHPATH="${JOBOPTSEARCHPATH},${T_JOBOPTSPATH}"

# Start compilation of the paches, if needed
T_PATCHES=ReconstructionPatches.tar.gz
patchRelease &> log
retcode=$?
cat log
if [ $retcode -ne 0 ] ; then
  compilationCheckLog log
  exit $retcode
fi

# Reduce verbosity of POOL
export POOL_OUTMSG_LEVEL=5

# Print the environment
printenv | grep -v 'CONFIG=' | grep -v "ROOT=$T_DISTREL"
echo
echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
echo

#  generate jobOptions file
echo "## ... generating jobOptions file"
#--------------------------------------------------------------------------
cat > recon_Config.py <<EOF
include( "AthenaCommon/AthenaCommonFlags.py" )
EvtMax       = $NEVT
PoolRDOInput = [ "$INFN" ]
SkipEvents   = $SKIP
doWriteESD   = False
doWriteAOD   = False
doCBNT       = True

RootNtupleOutput = "$NTUP"
RootHistoOutput  = "$HIST"

# Change some output levels
OutputLevel = WARNING
AthenaEventLoopMgr = Service("AthenaEventLoopMgr")
AthenaEventLoopMgr.OutputLevel=INFO
TrackTool = Algorithm("ToolSvc.Trk::MooreToTrackTool")
TrackTool.OutputLevel=FATAL

#--------------------------------------------------------------
# Set some of the global flags. Like eg the DD version:
#--------------------------------------------------------------
DetDescrVersion = 'DC2'
readMuonDigit = True

EOF
#--------------------------------------------------------------------------

# copy POOL file catalog, set AthenaPOOL output level
if [ ! -f PoolFileCatalog.xml -a -f $T_POOLFILE ] ; then
  echo "##"  
  echo "## ... copying $T_POOLFILE ..."  
  cp -f $T_POOLFILE PoolFileCatalog.xml
fi
export POOL_OUTMSG_LEVEL=5
echo "## ... setting POOL_OUTMSG_LEVEL=$POOL_OUTMSG_LEVEL"


#########################################################################
# run the job ...
#
echo " "
echo " "
echo "##################################################################"
echo "## STEP 2: running athena ..." 
echo "##################################################################"

time athena.py recon_Config.py RecExCommon/RecExCommon_topOptions.py &> log
athenaCheckLog log
retcode=$?
cat log

if [ $retcode -eq 0 ] ; then
  [ ! -s "$NTUP" ] && retcode=41
  [ ! -s "$HIST" ] && retcode=43
  [ ! -s "$NTUP" -a ! -s "$HIST" ] && retcode=44
fi

echo " "
echo "##"
echo "##################################################################"
echo "End of job."

# Exit with return code
exit $retcode
