#!/bin/sh

###########################################################################
## Pythia event generation transformation                                ##
## uses Atlas (version >= 7.7.0) because of POOL persistency             ##
## signature: datasetnr outfilename first total ran pytcmd               ##
## outputs: datafile                                                     ##
##                                                                       ##
## generate particles with Pythia (HepMC data in POOL/ROOT format)       ##
##                                                                       ##
## (C) Armin Nairz, Alessandro De Salvo                                  ##
###########################################################################

T_CORETRANSVER=1.2.0

#######################################################################
# Defaults are commented out
# The calling script should set T_RELEASE and T_DISTREL as appropriate
#
#[ "$T_RELEASE" = "" ] && T_RELEASE="8.1.0"
#[ "$T_DISTREL" = "" ] && T_DISTREL=$SITEROOT/dist/$T_RELEASE
[ "$T_INCPATH" = "" ] && T_INCPATH=`dirname $0`/../include

# logfile check functions
source ${T_INCPATH}/checkLogUtils.def

# meta data writer
source ${T_INCPATH}/metaData.def

# colors
source ${T_INCPATH}/colors.def

# patch engine
source ${T_INCPATH}/patch.def

###########################################################################

if test $# -ne 6; then
  echo "Pythia event generation transformation v$T_CORETRANSVER"
  echo usage: `basename $0`  "<datasetnr>" "<outfilename>" "<first>" "<total>" "<ran>" "<pytcmd>" 
  exit 0
fi

#####################################################

export DSET=$1
export OUTFN=$2
export MYFIRST=$3
export PARTSZ=$4
export MYRAN=$5
export PYTCMD=$6


########## START TRANS

cat > job.py <<EOF

#--------------------------------------------------------------
# General Application Configuration options
#--------------------------------------------------------------
theApp.setup ( MONTECARLO )
include  ( "PartPropSvc/PartPropSvc.py" )

theApp.DLLs += [ "GaudiAud" ]
AuditorSvc = AuditorSvc()
AuditorSvc.Auditors  = [ "ChronoAuditor" ]

#--------------------------------------------------------------
# Private Application Configuration options
#--------------------------------------------------------------

theApp.DLLs  += ["TruthExamples", "Pythia_i"]

theApp.TopAlg = ["Pythia"]

theApp.ExtSvc += ["AtRndmGenSvc"]

#--------------------------------------------------------------
# Event related parameters
#--------------------------------------------------------------

AtRndmGenSvc = Service ( "AtRndmGenSvc" )
AtRndmGenSvc.Seeds = [ "PYTHIA 4789899 $MYRAN", "PYTHIA_INIT 820021 2347532" ]

Pythia = Algorithm( "Pythia" )
Pythia.PythiaCommand = $PYTCMD

# Number of events to be processed (default is 10)
theApp.EvtMax = $PARTSZ

EventSelector = Service ( "EventSelector" )
EventSelector.RunNumber   = $DSET
EventSelector.FirstEvent  = $MYFIRST

Generator          = Algorithm( "Generator" )
Generator.Members += [ "EventCounter" ]

#---------------------------------------------------------------
# Pool Persistency
#---------------------------------------------------------------
include ( "AthenaPoolCnvSvc/WriteAthenaPool_jobOptions.py" )

theApp.DLLs += [ "GeneratorObjectsAthenaPoolPoolCnv" ]

# output stream objects
Stream1 = Algorithm ( "Stream1" )
Stream1.ItemList += [ "EventInfo#*", "McEventCollection#*" ]
Stream1.OutputFile = "$OUTFN"

#PoolSvc.Output = "$OUTFN"

#--------------------------------------------------------------
# Set output level threshold (2=DEBUG, 3=INFO, 4=WARNING, 5=ERROR, 6=FATAL)
#-------------------------------------------------------------- 
MessageSvc = Service ( "MessageSvc" )
MessageSvc.OutputLevel  = 4
Stream1.OutputLevel     = 4

#==============================================================
#
# End of job options file
#
###############################################################

EOF


echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
echo
echo "##working directory is:" `pwd`
grep MHz /var/log/dmesg 
echo

export WORKDIR=`pwd`
export system="`uname -a`"
export userid="`   id   `"
export HOSTMACHINE=`hostname -f`

# Set-up the run conditions
get_files -data PDGTABLE.MeV

# Start compilation of the patches, if needed
T_PATCHES=GenerationPatches.tar.gz
patchRelease &> log
retcode=$?
cat log
if [ $retcode -ne 0 ] ; then
  compilationCheckLog log
  exit $retcode
fi

# Reduce verbosity of POOL
export POOL_OUTMSG_LEVEL=5

# Print the environment
printenv | grep -v 'CONFIG=' | grep -v "ROOT=$T_DISTREL"
echo
echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
echo

#--------------------------------------------------------------------------
#          run athena
#--------------------------------------------------------------------------
time athena.py job.py &> log
athenaCheckLog log
retcode=$?
if [ $retcode -eq 0 ] ; then
  POOLFILELFN=$OUTFN
  POOLFILEID=`grep $OUTFN -B 100 PoolFileCatalog.xml \
                   | grep "File ID" | tail -n 1 | cut -d '"' -f 2`
  XSECTOT="`grep subprocesses log | cut -d 'I' -f 4 | awk '{print $1}'`"
  metaDataHeader
  metaDataAddTag   "META" "name=\"cross-section\"" "type=\"string\""
  metaDataOpenTag  "File" "ID=\"$POOLFILEID\""
  metaDataOpenTag  "logical"
  metaDataAddTag   "lfn" "name=\"$POOLFILELFN\""
  metaDataCloseTag "logical"
  metaDataAddTag   "metadata" \
                   "att_name=\"cross-section\"" "att_value=\"$XSECTOT\""
  metaDataCloseTag "File"
  metaDataFooter
fi
cat log

# Check the local POOL catalog
if [[ -e PoolFileCatalog.xml ]] ; then
 echo 
 echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
 echo "   Contents of PoolFileCatalog.xml ..."
 echo 
 cat PoolFileCatalog.xml 
 echo 
 echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
fi
echo " "
echo "End of job."

# Exit with return code
exit ${retcode}
