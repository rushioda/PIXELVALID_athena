#!/usr/bin/env sh
######################################################################
#   Script to run G4 simulation, digitization & reconstruction 
#   with release > 9.0.2 using "Rome workshop" standard configuration 
#   eta cut: |eta| < 6
#
#   (for submission to LSF batch)
#   (C) Nektarios.Chr.Benekos, Davide Costanzo, Armin Nairz
#
#   Modified into full-chain transformation by 
#   Doug Schouten <dschoute@sfu.ca>, August 29 2005
######################################################################
T_CORETRANSVER=1.0.0
[ "$T_INCPATH" = "" ] && T_INCPATH=`dirname $0`/../include
[ "$T_JOBOPTSPATH" = "" ] && T_JOBOPTSPATH=`dirname $0`/../jobOptions

# logfile check functions
source ${T_INCPATH}/checkLogUtils.def

# meta data writer
source ${T_INCPATH}/metaData.def

# colors
source ${T_INCPATH}/colors.def

# patch engine
source ${T_INCPATH}/patch.def

if [ $# -lt 6 ]; then
  echo "USAGE:   rome.fullchain.trf  <infilename> <aodfile> <esdfile> <cbntfile> <nevt> <skip>"
  echo "         [ <hitsfile> <digitsfile> ]"
  echo 
  echo "         <infilename> .... name of evgen input file (full path)"
  echo "         <aodfile> ....... local name of output aod/esd/cbnt file"
  echo "         <nevt> .......... number of output events to be processed" 
  echo "         <skip> .......... number of input events to be skipped"  
  echo "         <hitsfile>....... (optional) name of G4 hits file"
  echo "         <digitsfile>..... (optional) name of digits output file"
  echo 
  echo "EXAMPLE: rome.fullchain.trf  evt.rome.0001.pool.root  aod.rome.0001.pool.root  "
  echo "         esd.rome.0001.pool.root cbnt.rome.0001.pool.root 100  0"
  echo 
  echo "NOTE: if <hitsfile> and <digitsfile> are specified then these intermediate"
  echo "files exist as named; else default names hits.pool.root and digits.pool.root are used."; exit -1
fi

if [ $# -eq 8 ]; then
    HITSFILE=$7
    DIGITSFILE=$8
fi

######################################################################
# SIMULATION
######################################################################

#--------------------------------------------------------------------------
#    parameter translation for simulation
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
#    Signature:  infilename  nevt  skip
#--------------------------------------------------------------------------
export INFN=$1
export NEVT=$5
export SKIP=$6
#--------------------------------------------------------------------------
#    set up and run simulation job
#--------------------------------------------------------------------------
if [ -z "$HITSFILE" ]; then
    export OUTFN=hits.pool.root
else
    export OUTFN=$HITSFILE
fi

echo "##################### ATLAS G4 Simulation ########################"
echo "##"
#  generate macro file with begin-of-run actions
echo "## ... generating macro file bor_actions.mac"
#--------------------------------------------------------------------------
cat > bor_actions.mac <<EOF

/control/MemorySnooper "begin of run"
/Random/SetSeed $RNDM

EOF
#--------------------------------------------------------------------------
echo "## ... whose contents is "
echo "---------------------------------------------------------------------"
cat bor_actions.mac
echo "---------------------------------------------------------------------"
echo " "


#########################################################################
# set up run directory and environment ...
#
echo "##################################################################"
echo "## STEP 1: setting up run directory and environment ..."
echo "##################################################################"
echo "##"

unset POOL_OUTMSG_LEVEL


#--------------------------------------------------------------------------
#  power of the processor
#
echo "## ... processor specifications:"
grep MHz /var/log/dmesg
cat /proc/meminfo

export system="`uname -a`"
export userid="`   id   `"
export HOSTMACHINE=`hostname -f`


#--------------------------------------------------------------------------
#  print environment
printenv | grep -v 'CONFIG=' | grep -v "ROOT=$DISTREL"
echo " "
echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
echo " "


#--------------------------------------------------------------------------
#  copy files from release area to local run directory
#  Note for 9.0.3:
#  The latest mag field is not in 9.0.3, so it is copied from the trf

export DATAPATH=$T_TRFDATAPATH:$DATAPATH
get_files -data bmagatlas03_test2.data
mv bmagatlas03_test2.data fieldmap.dat

get_files -data PDGTABLE.MeV



#########################################################################
# define the run conditions ...
#
echo " "
echo " "
echo "##################################################################"
echo "## STEP 2: defining the run conditions ..." 
echo "##################################################################"
echo "##"

#--------------------------------------------------------------------------
#  overwrite configuration file RomeSimulationConfig.py 
#
echo "## ... overwriting configuration file RomeSimulationConfig.py"
rm -f RomeSimulationConfig.py
#--------------------------------------------------------------------------
cat > RomeSimulationConfig.py <<EOF

include( "AthenaCommon/AthenaCommonFlags.py" )
EvtMax = $NEVT
SkipEvents = $SKIP
PoolEvgenInput = [ "$INFN" ]
PoolHitsOutput = "$OUTFN"

# Set some of the global flags (like the DD version):
DetDescrVersion = 'Rome-Initial'

EOF
#--------------------------------------------------------------------------
echo "## ... whose contents is "
echo "---------------------------------------------------------------------"
cat RomeSimulationConfig.py
echo "---------------------------------------------------------------------"
echo " " 

#--------------------------------------------------------------------------
#  Configuration file for Det Descr Database (use with release 9.0.2)
#
# cat > RomeRDBConfig.py <<EOF
#
# RDBAccessSvc = Service( "RDBAccessSvc" )
# RDBAccessSvc.HostName = "pdb01"
#
# EOF

#--------------------------------------------------------------------------
# switch on MemorySnooper at begin-of-run, end-of-run; set random-number seed
echo "##"
echo "## ... enable memory snooping ..."
export GOOFY_BOR_MACRO=bor_actions.mac
export GOOFY_EOR_MACRO=memorySnooper_eor.mac
echo "## ... through GOOFY_BOR_MACRO=$GOOFY_BOR_MACRO"
echo "## ...         GOOFY_EOR_MACRO=$GOOFY_EOR_MACRO"

# copy POOL file catalog (defined in wrapper script), set AthenaPOOL output level
echo "##"
echo "## ... copying $POOLFILE ..."
cp -f $POOLFILE PoolFileCatalog.xml
export POOL_OUTMSG_LEVEL=5
echo "## ... setting POOL_OUTMSG_LEVEL=$POOL_OUTMSG_LEVEL"


#########################################################################
# run the job ...
#
echo " "
echo " "
echo "##################################################################"
echo "## STEP 3: running athena ..." 
echo "##################################################################"
echo "##"
echo -n "##... use the following athena.py script:"
which athena.py
echo "## PATH = $PATH"
echo "## LD_LIBRARY_PATH = $LD_LIBRARY_PATH"

time athena.py RomeSimulationConfig.py SimulationOptionsRome/RomeGeo2G4.py >& simlog

athenaCheckLog simlog
retcode=$?
if [ $retcode -eq 0 ] ; then
  POOLFILELFN=$OUTFN
  POOLFILEID=`grep $OUTFN -B 100 PoolFileCatalog.xml \
                   | grep "File ID" | tail -n 1 | cut -d '"' -f 2`
  EVNTTOT="`grep \"End of Event\" log | wc -l | sed 's/^ *//g'`"
  metaDataHeader
  metaDataAddTag   "META" "name=\"events\"" "type=\"string\""
  metaDataOpenTag  "File" "ID=\"$POOLFILEID\""
  metaDataOpenTag  "logical"
  metaDataAddTag   "lfn" "name=\"$POOLFILELFN\""
  metaDataCloseTag "logical"
  metaDataAddTag   "metadata" \
                   "att_name=\"events\"" "att_value=\"$EVNTTOT\""
  metaDataCloseTag "File"
  metaDataFooter
fi

cat simlog

#--------------------------------------------------------------------------
#  paste PoolFileCatalog entry to the end of the logfile...
#
if [[ -n `grep $OUTFN PoolFileCatalog.xml` ]]; then
  # assemble new file catalog containing only the produced datafile
  rm -f NewPoolFileCatalog.xml
  echo "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>"  > NewPoolFileCatalog.xml
  echo "<!-- Edited By POOL -->"                                       >> NewPoolFileCatalog.xml
  echo "<!DOCTYPE POOLFILECATALOG SYSTEM \"InMemory\">"                >> NewPoolFileCatalog.xml
  echo "<POOLFILECATALOG>"                                             >> NewPoolFileCatalog.xml
  grep -A4 -B3 $OUTFN PoolFileCatalog.xml                              >> NewPoolFileCatalog.xml  
  echo "</POOLFILECATALOG>"                                            >> NewPoolFileCatalog.xml
  
  echo " "
  echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
  echo "   Contents of PoolFileCatalog.xml ..."
  echo " "
  cat  NewPoolFileCatalog.xml 
  echo " "
  echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
fi
   

#--------------------------------------------------------------------------
#  paste output-file size to the end of the logfile...
#
echo SIZE: `ls -l $OUTFN`     

echo " "
echo " "
echo "##"
echo "##################################################################"
echo "End of simulation."

if [ $retcode -eq 0 ] ; then
  [ ! -s "$OUTFN" ] && retcode=40
fi

#--------------------------------------------------------------------------
# save return code
sim_retcode=$retcode
if [ $sim_retcode -ne 0 ]; then
    echo -e "\n**** Error in simulation (${sim_retcode})! ****\n"; 
fi
[ $sim_retcode -eq 40 ] && exit 40


######################################################################
# DIGITIZATION
######################################################################

#--------------------------------------------------------------------------
#    parameter translation for digitization
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
#    Signature:  infilename 
#--------------------------------------------------------------------------
export INFN=$OUTFN
#--------------------------------------------------------------------------
#    set up and run digitization job
#--------------------------------------------------------------------------

echo "####################### ATLAS Digitization #######################"
echo "##"
echo "##################################################################"
echo "## STEP 1: setting up environment"
echo "##################################################################"
echo "##"

export SKIP=0
if [ -z "$DIGITSFILE" ]; then
    export OUTFN="digits.pool.root"
else
    export OUTFN=$DIGITSFILE
fi

unset POOL_OUTMSG_LEVEL 

#########################################################################
# double check the environment for digitization
#
printenv | grep -v 'CONFIG=' | grep -v "ROOT=$DISTREL"
echo
echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
echo

  
#########################################################################
# set up the run conditions ...
#
echo " "
echo " "
echo "##################################################################"
echo "## STEP 2: setting up the run conditions ..." 
echo "##################################################################"
echo "##"

#  generate global configuration file
#--------------------------------------------------------------------------
cat > RomeDigitizationConfig.py << EOF

include( "AthenaCommon/AthenaCommonFlags.py" )
EvtMax = $NEVT
SkipEvents = $SKIP
PoolHitsInput = [ "$INFN" ]
PoolRDOOutput = "$OUTFN"

#--------------------------------------------------------------
# Set some of the global flags. Like eg the DD version:
#--------------------------------------------------------------
DetDescrVersion = 'Rome-Initial'

EOF

#--------------------------------------------------------------------------
#  Configuration file for Det Descr Database (use with release 9.0.2)
#
# cat > RomeRDBConfig.py <<EOF
#
# RDBAccessSvc = Service ( "RDBAccessSvc" )
# RDBAccessSvc.HostName   = "pdb01"
#
# EOF
#--------------------------------------------------------------------------

#--------------------------------------------------------------------------
#  Configuration file for LAr IOV Svc (use with release 9.0.3)
#  Note This is now a 9.0.3 post-configuration fragment
#
cat > RomeIOVConfig.py << EOF_IOV
IOVDbSvc.GlobalTag = "InitLayout-A"
RPC_Digitizer.WindowLowerOffset = -70.0
RPC_Digitizer.WindowUpperOffset =  70.0
EOF_IOV
#--------------------------------------------------------------------------

#--------------------------------------------------------------------------
# copy POOL file catalog, set AthenaPOOL output level
#--------------------------------------------------------------------------
echo "##"  
echo "## ... copying $POOLFILE ..."  
cp -f $POOLFILE PoolFileCatalog.xml
export POOL_OUTMSG_LEVEL=5
echo "## ... setting POOL_OUTMSG_LEVEL=$POOL_OUTMSG_LEVEL"


#########################################################################
# run the job ...
#
echo " "
echo " "
echo "##################################################################"
echo "## STEP 3: running athena ..." 
echo "##################################################################"

time athena.py -s RomeDigitizationConfig.py Digitization/AtlasDigitization.py RomeIOVConfig.py  >& diglog
athenaCheckLog diglog
retcode=$?
if [ $retcode -eq 0 ] ; then
  POOLFILELFN=$OUTFN
  POOLFILEID=`grep $OUTFN -B 100 PoolFileCatalog.xml \
                   | grep "File ID" | tail -n 1 | cut -d '"' -f 2`
  EVNTTOT="`grep \"end of event\" log | wc -l | sed 's/^ *//g'`"
  metaDataHeader
  metaDataAddTag   "META" "name=\"events\"" "type=\"string\""
  metaDataOpenTag  "File" "ID=\"$POOLFILEID\""
  metaDataOpenTag  "logical"
  metaDataAddTag   "lfn" "name=\"$POOLFILELFN\""
  metaDataCloseTag "logical"
  metaDataAddTag   "metadata" \
                   "att_name=\"events\"" "att_value=\"$EVNTTOT\""
  metaDataCloseTag "File"
  metaDataFooter
fi
cat diglog

#--------------------------------------------------------------------------
# paste PoolFileCatalog entry to the end of the logfile...
#
if [[ -n `grep $OUTFN PoolFileCatalog.xml` ]]; then
  # assemble new file catalog containing only the produced datafile
  rm -f NewPoolFileCatalog.xml
  echo "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>"  > NewPoolFileCatalog.xml
  echo "<!-- Edited By POOL -->"                                       >> NewPoolFileCatalog.xml
  echo "<!DOCTYPE POOLFILECATALOG SYSTEM \"InMemory\">"                >> NewPoolFileCatalog.xml
  echo "<POOLFILECATALOG>"                                             >> NewPoolFileCatalog.xml
  grep -A4 -B3 $OUTFN PoolFileCatalog.xml                              >> NewPoolFileCatalog.xml  
  echo "</POOLFILECATALOG>"                                            >> NewPoolFileCatalog.xml
  
  echo " "
  echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
  echo "   Contents of PoolFileCatalog.xml ..."
  echo " "
  cat NewPoolFileCatalog.xml 
  echo " "
  echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
fi
 
#--------------------------------------------------------------------------
# paste output-file size to the end of the logfile...
#
echo SIZE: `ls -l $OUTFN`     

echo " "
echo "##"
echo "##################################################################"
echo "End of digitization: $retcode"
if [ $retcode -eq 0 ] ; then
  [ ! -s "$OUTFN" ] && retcode=40
fi

#--------------------------------------------------------------------------
# save return code
digit_retcode=$retcode
if [ $digit_retcode -ne 0 ]; then
    echo -e "\n**** Error in digitization (${digit_retcode})! ****\n"; 
fi
[ $digit_retcode -eq 40 ] && exit 40

######################################################################
# RECONSTRUCTION
######################################################################

#--------------------------------------------------------------------------
#    parameter translation for reconstruction
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
#    Signature:  infilename  outfilename  ( aod/esd/cbnt )
#--------------------------------------------------------------------------
export INFN=$OUTFN
export AODFN=$2
export ESDFN=$3
export CBNTFN=$4
 
#--------------------------------------------------------------------------
#    set up and run reconstruction job
#--------------------------------------------------------------------------
echo "####################### ATLAS Reconstruction #####################"
echo "##"
echo "##################################################################"
echo "## STEP 1: setting up environment"
echo "##################################################################"
echo "##"

export SKIP=0
printenv | grep -v 'CONFIG=' | grep -v "ROOT=$DISTREL"
echo
echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
echo

  
#########################################################################
# set up the run conditions ...
#
echo " "
echo " "
echo "##################################################################"
echo "## STEP 2: setting up the run conditions ..." 
echo "##################################################################"
echo "##"

echo "   -> Get runtime auxilliary files "
RecExCommon_runTimeFiles_zc.sh


#  generate global configuration files
#--------------------------------------------------------------------------
cat > RomeReconstructionESD_Config.py << EOF

include( "AthenaCommon/AthenaCommonFlags.py" )
include( "RecExCommon/RecExCommon_flags.py" )

EvtMax = $NEVT
SkipEvents = $SKIP
PoolRDOInput = [ "$INFN" ]
PoolESDOutput = "$ESDFN"
doWriteESD = True
doCBNT = True

# Change some output levels
OutputLevel = WARNING
AthenaEventLoopMgr = Service( "AthenaEventLoopMgr" )
AthenaEventLoopMgr.OutputLevel=INFO
MooreTrackTool = Algorithm("ToolSvc.Trk::MooreToTrackTool")
MooreTrackTool.OutputLevel=FATAL
MuidTrackTool = Algorithm("ToolSvc.Trk::MuidToTrackTool")
MuidTrackTool.OutputLevel=FATAL

#
# This should not be done when reconstructing events digitizied with release > 10
# Correct for CSC strip offset
#CscClusterBuilder = Algorithm( "CscClusterBuilder" )
#CscClusterBuilder.CSSFudgeFactor = 2.7783*mm
#CscClusterBuilder.CSLFudgeFactor = 2.6540*mm

#--------------------------------------------------------------
# Set some of the global flags. Like eg the DD version:
#--------------------------------------------------------------
DetDescrVersion = 'Rome-Initial'
LArCondCnvDbServer = 'atlasdbpro.cern.ch'

EOF

cat > RomeReconstructionAOD_Config.py << EOF

include( "AthenaCommon/AthenaCommonFlags.py" )
EvtMax = $NEVT
SkipEvents = $SKIP
PoolESDInput = [ "$ESDFN" ]
PoolAODOutput = "$AODFN"
AllAlgs    = False
readESD    = True
doWriteAOD = True
doCBNT = False
OutputLevel = WARNING
AthenaEventLoopMgr = Service( "AthenaEventLoopMgr" )
AthenaEventLoopMgr.OutputLevel=INFO

# Detector Flags
from AthenaCommon.DetFlags import DetFlags
DetFlags.detdescr.ID_setOn()
DetFlags.detdescr.Calo_setOn()
DetFlags.detdescr.Muon_setOn()

# AOD Flags
from ParticleEventAthenaPool.AODFlags import AODFlags
AODFlags.Streaming = False

#--------------------------------------------------------------
# Set some of the global flags. Like eg the DD version:
#--------------------------------------------------------------
DetDescrVersion = 'Rome-Initial'
LArCondCnvDbServer = 'atlasdbpro.cern.ch'

EOF

# copy POOL file catalog, set AthenaPOOL output level
#--------------------------------------------------------------------------
echo "##"  
echo "## ... copying $POOLFILE ..."  
cp -f $POOLFILE PoolFileCatalog.xml
export POOL_OUTMSG_LEVEL=5
echo "## ... setting POOL_OUTMSG_LEVEL=$POOL_OUTMSG_LEVEL"


#########################################################################
# run the job ...
#
echo " "
echo " "
echo "##################################################################"
echo "## STEP 3: running athena ..." 
echo "##################################################################"

time athena.py  RomeReconstructionESD_Config.py RecExCommon/RecExCommon_topOptions.py >& logESD 
cat logESD

time athena.py  RomeReconstructionAOD_Config.py RecExCommon/RecExCommon_topOptions.py >& logAOD
mv ntuple.root $CBNTFN 
echo "#################################################################"
cat logAOD

athenaCheckLog logESD
retcodeESD=$?
athenaCheckLog logAOD
retcodeAOD=$?

echo "Reconstruction finished with retcodes ESD: $retcodeESD ,   AOD: $retcodeAOD "

if [ $retcodeAOD -eq 0 ] ; then

  POOLFILELFN=$ESDFN
  POOLFILEID=`grep $ESDFN -B 100 PoolFileCatalog.xml \
                   | grep "File ID" | tail -n 1 | cut -d '"' -f 2`
  EVNTTOT="`grep \"end of event\" logESD | wc -l | sed 's/^ *//g'`"
  metaDataHeader
  metaDataAddTag   "META" "name=\"events\"" "type=\"string\""
  metaDataOpenTag  "File" "ID=\"$POOLFILEID\""
  metaDataOpenTag  "logical"
  metaDataAddTag   "lfn" "name=\"$POOLFILELFN\""
  metaDataCloseTag "logical"
  metaDataAddTag   "metadata" \
                   "att_name=\"events\"" "att_value=\"$EVNTTOT\""
  metaDataCloseTag "File"

  POOLFILELFN=$AODFN
  POOLFILEID=`grep $AODFN -B 100 PoolFileCatalog.xml \
                   | grep "File ID" | tail -n 1 | cut -d '"' -f 2`
  EVNTTOT="`grep \"end of event\" logAOD | wc -l | sed 's/^ *//g'`"
  metaDataAddTag   "META" "name=\"events\"" "type=\"string\""
  metaDataOpenTag  "File" "ID=\"$POOLFILEID\""
  metaDataOpenTag  "logical"
  metaDataAddTag   "lfn" "name=\"$POOLFILELFN\""
  metaDataCloseTag "logical"
  metaDataAddTag   "metadata" \
                   "att_name=\"events\"" "att_value=\"$EVNTTOT\""
  metaDataCloseTag "File"
  metaDataFooter
fi

#--------------------------------------------------------------------------
# paste PoolFileCatalog entry to the end of the logfile...
#
if [[ -n `grep $ESDFN PoolFileCatalog.xml` ]]; then
  # assemble new file catalog containing only the produced datafile
  rm -f NewPoolFileCatalog.xml
  echo "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>"  > NewPoolFileCatalog.xml
  echo "<!-- Edited By POOL -->"                                       >> NewPoolFileCatalog.xml
  echo "<!DOCTYPE POOLFILECATALOG SYSTEM \"InMemory\">"                >> NewPoolFileCatalog.xml
  echo "<POOLFILECATALOG>"                                             >> NewPoolFileCatalog.xml
  grep -A4 -B3 $ESDFN PoolFileCatalog.xml                              >> NewPoolFileCatalog.xml  
  echo "</POOLFILECATALOG>"                                            >> NewPoolFileCatalog.xml
  
  echo " "
  echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
  echo "   Contents of PoolFileCatalog.xml ..."
  echo " "
  cat NewPoolFileCatalog.xml 
  echo " "
  echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
fi

#--------------------------------------------------------------------------
# paste PoolFileCatalog entry to the end of the logfile...
#
if [[ -n `grep $AODFN PoolFileCatalog.xml` ]]; then
  # assemble new file catalog containing only the produced datafile
  rm -f NewPoolFileCatalog.xml
  echo "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>"  > NewPoolFileCatalog.xml
  echo "<!-- Edited By POOL -->"                                       >> NewPoolFileCatalog.xml
  echo "<!DOCTYPE POOLFILECATALOG SYSTEM \"InMemory\">"                >> NewPoolFileCatalog.xml
  echo "<POOLFILECATALOG>"                                             >> NewPoolFileCatalog.xml
  grep -A4 -B3 $AODFN PoolFileCatalog.xml                              >> NewPoolFileCatalog.xml
  echo "</POOLFILECATALOG>"                                            >> NewPoolFileCatalog.xml

  echo " "
  echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
  echo "   Contents of PoolFileCatalog.xml ..."
  echo " "
  cat NewPoolFileCatalog.xml
  echo " "
  echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
fi

#--------------------------------------------------------------------------
# paste output-file size to the end of the logfile...
#
echo SIZE: `ls -l $ESDFN`     
echo SIZE: `ls -l $AODFN`     
echo SIZE: `ls -l $CBNTFN`     

echo " "
echo "##"
echo "##################################################################"
echo "End of job complete."
if [ $retcodeAOD -eq 0 ] ; then
  [ ! -s "$ESDFN" ] && retcode=40
  [ ! -s "$AODFN" ] && retcode=40
fi

exit $retcodeAOD
