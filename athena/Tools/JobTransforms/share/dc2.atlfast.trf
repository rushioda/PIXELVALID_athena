#!/bin/sh

###########################################################################
## DC2 atlfast transformation                                            ##
## uses Atlas (version >= 8.0.1)                                         ##
## signature: inputfile histname ntupname first total                    ##
## outputs: datafile                                                     ##
##                                                                       ##
## generate atlfast ntuple from generation file                          ##
##                                                                       ##
## (C) Alessandro De Salvo                                               ##
###########################################################################

T_CORETRANSVER=1.2.0

#######################################################################
# Defaults are commented out
# The calling script should set T_RELEASE and T_DISTREL as appropriate
#
#[ "$T_RELEASE" = "" ] && T_RELEASE="8.1.0"
#[ "$T_DISTREL" = "" ] && T_DISTREL=$SITEROOT/dist/$T_RELEASE
[ "$T_INCPATH" = "" ]     && T_INCPATH=`dirname $0`/../include
[ "$T_JOBOPTSPATH" = "" ] && T_JOBOPTSPATH=`dirname $0`/../jobOptions

# logfile check functions
source ${T_INCPATH}/checkLogUtils.def

# meta data writer
source ${T_INCPATH}/metaData.def

# colors
source ${T_INCPATH}/colors.def

# patch engine
source ${T_INCPATH}/patch.def

###########################################################################

if test $# -lt 5; then
  echo "DC2 atlfast transformation v$T_CORETRANSVER"
  echo usage: `basename $0`  "<inputfile>" "<histname>" "<ntupname>" "<first>" "<total>" 
  exit 30
fi

#####################################################

export INFN=$1
export HIST=$2
export NTUP=$3
export MYFIRST=$4
export PARTSZ=$5


########## START TRANS

cat > job.py <<EOF
##############################################################
#
# Job options file
#
#==============================================================
#
EOF

if [ $T_USEROOTHIST ] ; then
cat >> job.py << EOF
include ("GeneratorOptionsDC2/FromPooltoAltfasttoCBNT_root.py")
HistogramPersistencySvc.OutputFile  = "$HIST"
NtupleSvc.Output = [ "FILE1 DATAFILE='$NTUP' OPT='NEW' TYP='ROOT'" ]
EOF
else
cat >> job.py << EOF
include ("GeneratorOptionsDC2/FromPooltoAltfasttoCBNT.py")
HistogramPersistencySvc.OutputFile  = "$HIST";
NtupleSvc.Output = [ "FILE1 DATAFILE='$NTUP' OPT='NEW' TYP='HBOOK'" ]
EOF
fi

cat >> job.py << EOF
#--------------------------------------------------------------
# Private Application Configuration options
#--------------------------------------------------------------
theApp.ExtSvc += ["AtRndmGenSvc"]
# Set output level threshold (2=DEBUG, 3=INFO, 4=WARNING, 5=ERROR, 6=FATAL )
MessageSvc.OutputLevel = 5

#--------------------------------------------------------------
# Event related parameters
#--------------------------------------------------------------
# Number of events to be processed (default is 10)
theApp.EvtMax = $PARTSZ
EventSelector = Algorithm ("EventSelector")
EventSelector.InputCollections = ["$INFN"]
EventSelector.FirstEvent  = $MYFIRST

#
###############################################################
EOF

echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
echo
echo "##working directory is:" `pwd`
grep MHz /var/log/dmesg 
echo

export WORKDIR=`pwd`
export system="`uname -a`"
export userid="`   id   `"
export HOSTMACHINE=`hostname -f`

# Set-up the run conditions
export JOBOPTSEARCHPATH="${T_JOBOPTSPATH},${JOBOPTSEARCHPATH}"
get_files -data PDGTABLE.MeV

# Start compilation of the patches, if needed
T_PATCHES=GenerationPatches.tar.gz
patchRelease &> log
retcode=$?
cat log
if [ $retcode -ne 0 ] ; then
  compilationCheckLog log
  exit $retcode
fi

# Print the environment
printenv | grep -v 'CONFIG=' | grep -v "ROOT=$T_DISTREL"
echo
echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
echo

# copy POOL file catalog, set AthenaPOOL output level
if [ ! -f PoolFileCatalog.xml -a -f $T_POOLFILE ] ; then
  echo "##"
  echo "## ... copying $T_POOLFILE ..."
  cp -f $T_POOLFILE PoolFileCatalog.xml
fi
export POOL_OUTMSG_LEVEL=5
echo "## ... setting POOL_OUTMSG_LEVEL=$POOL_OUTMSG_LEVEL"

#--------------------------------------------------------------------------
#          run athena
#--------------------------------------------------------------------------
athena.py job.py &> log
athenaCheckLog log
retcode=$?
cat log

if [ $retcode -eq 0 ] ; then
  [ ! -s "$NTUP" ] && retcode=41
  [ ! -s "$HIST" ] && retcode=43
  [ ! -s "$NTUP" -a ! -s "$HIST" ] && retcode=44
fi

echo " "
echo "End of job."

# Exit with return code
exit ${retcode}
