#! /usr/bin/env sh

###############################################################
##  G4 simulation transformation using Rel. >= 8.0.3         ##
##                                                           ##
##  On-the-fly fixes to some envelopes and macro files to    ##
##  make muon TrackRecord's (additional truth info at the    ##
##  entrance of the Muon Spectrometer) work.                 ##
##                                                           ##
##  (C) Armin Nairz, Nectarios Benekos, Alessandro De Salvo  ##
###############################################################

T_CORETRANSVER=1.5.0

#######################################################################
#
# Defaults are commented out
# The calling script should set T_RELEASE and T_DISTREL as appropriate
#[ "$T_RELEASE" = "" ] && T_RELEASE="8.1.0"
#[ "$T_DISTREL" = "" ] && T_DISTREL=$SITEROOT/dist/$T_RELEASE
[ "$T_INCPATH" = "" ] && T_INCPATH=`dirname $0`/../include
[ "$T_JOBOPTSPATH" = "" ] && T_JOBOPTSPATH=`dirname $0`/../jobOptions

# logfile check functions
source ${T_INCPATH}/checkLogUtils.def

# meta data writer
source ${T_INCPATH}/metaData.def

# colors
source ${T_INCPATH}/colors.def

# patch engine
source ${T_INCPATH}/patch.def

###########################################################################

if test $# -ne 8 ; then
  echo "DC2 G4 simulation transformation v$T_CORETRANSVER"
  echo "USAGE:   `basename $0` <infilename> <outfilename> <eta_min> <eta_max> <nevt> <skip> <random seed> <layout>"
  echo 
  echo "         <infilename> .... name of input file (full path)"
  echo "         <outfilename> ... local name of output file"
  echo "         <eta_min>,        " 
  echo "         <eta_max> ....... eta range (e.g., -5.0  5.0)"  
  echo "         <nevt> .......... number of output events to be processed" 
  echo "         <skip> .......... number of input events to be skipped"
  echo "         <random seed> ... random seed for this job"
  echo "         <layout> ........ detector layout flag (DC1, INITIAL)"
  echo 
  exit 30
fi

#--------------------------------------------------------------------------
#    parameter translation
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
#    Signature:  infilename outfilename etamin etamax nevt skip randomseed
#--------------------------------------------------------------------------
export INFN=$1
export OUTFN=$2
export ETAMIN=$3
export ETAMAX=$4
export NEVT=$5
export SKIP=$6
export RNDM=$7
export LAYOUT=$8

#--------------------------------------------------------------------------
#    set up and run simulation job
#--------------------------------------------------------------------------


echo "##################### ATLAS G4 Simulation ########################"
echo "##"
echo "##################################################################"
echo "## STEP 1: setting up environment"
echo "##################################################################"
echo "##"

unset LOCALSIM
unset LOCALRUNDIR
unset GOOFY_BOR_MACRO
unset GOOFY_EOR_MACRO
unset POOL_OUTMSG_LEVEL

# power of the processor
echo "## ... processor specifications:"
grep MHz /var/log/dmesg
cat /proc/meminfo

export system="`uname -a`"
export userid="`   id   `"
export HOSTMACHINE=`hostname -f`

# Set up the run conditions
export JOBOPTSEARCHPATH="${T_JOBOPTSPATH},${JOBOPTSEARCHPATH}"
find ${T_DISTREL}/InstallArea/share -name "*.mac" -exec cp -f {} . \;
find ${T_DISTREL}/InstallArea/share -name "*.xml" -exec cp -f {} . \;
find ${T_DISTREL}/InstallArea/share -name "*.dtd" -exec cp -f {} . \;
cp -f ${T_DISTREL}/InstallArea/share/management .
cp -f ${T_DISTREL}/InstallArea/share/geometry .
cp -f ${ATLASCALDATA}/bmagatlas02.data fieldmap.dat
get_files -data PDGTABLE.MeV

# Start compilation of the paches, if needed
T_PATCHES=SimulationPatches.tar.gz
patchRelease &> log
retcode=$?
cat log
if [ $retcode -ne 0 ] ; then
  compilationCheckLog log
  exit $retcode
fi

# Reduce verbosity of POOL
export POOL_OUTMSG_LEVEL=5

# Print the environment
printenv | grep -v 'CONFIG=' | grep -v "ROOT=$T_DISTREL"
echo
echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
echo

export LOCALRUNDIR=`pwd`


#  generate macro file setting the eta cuts
echo "## ... generating macro file with EtaPhiFilter settings"
#--------------------------------------------------------------------------
cat > EtaPhiFilter_settings.mac <<EOF

/Filters/Vertex/toggle ON
/Filters/Vertex/Spread 0.015 0.015 56. mm
/Filters/EtaPhiFilter/toggle ON
/Filters/EtaPhiFilter/EtaInterval $ETAMIN $ETAMAX

EOF
#--------------------------------------------------------------------------
echo "## ... whose contents is "
echo "---------------------------------------------------------------------"
cat EtaPhiFilter_settings.mac
echo "---------------------------------------------------------------------"
echo " "
 

#  generate macro file with begin-of-run actions 
echo "## ... generating macro file bor_actions.mac"
#--------------------------------------------------------------------------
cat > bor_actions.mac <<EOF

/control/MemorySnooper "begin of run"
/Random/SetSeed $RNDM

EOF
#--------------------------------------------------------------------------
echo "## ... whose contents is "
echo "---------------------------------------------------------------------"
cat bor_actions.mac
echo "---------------------------------------------------------------------"
echo " "
 

#  modify data file envelopes.xml 
echo "## ... modifying data file envelopes.xml "
rm -f envelopes.xml
#--------------------------------------------------------------------------
cat > envelopes.xml <<EOF
<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE FADS SYSTEM "envelopes.dtd">

<FADS>

<EnvelopeParameters
        AtlasInnerRadius="0."
        AtlasOuterRadius="30000."
        AtlasZMax="30000."
        MuonInnerRadius="70."
        MuonOuterRadius="30000."
        MuonZMax="30000."
/>

</FADS>
EOF
#--------------------------------------------------------------------------
echo "## ... whose contents is "
echo "---------------------------------------------------------------------"
cat envelopes.xml
echo "---------------------------------------------------------------------"
echo " " 


#  generate macro file Envelopes.mac
echo "## ... generating macro file Envelopes.mac"
#--------------------------------------------------------------------------
rm -f Envelopes.mac
cat > Envelopes.mac <<EOF

/load G4DetectorEnvelopes
/control/ReadXML standardmaterials.xml
/control/ReadXML color.xml
/control/ReadXML envelopes.xml
/Geometry/GetFacility AtlasDetector Atlas
/Geometry/GetFacility BeamPipe BPIPE
/Geometry/GetFacility InnerDetector IDET
/Geometry/GetFacility Calorimeter CALO
/Geometry/GetFacility GenericPCON MUON
/Geometry/GetFacility MuonSystemEntryLayer MSEL
/MUON/SetPhiMin 0
/MUON/SetDeltaPhi 360 deg
/MUON/SetNSurfaces 6
/MUON/setZvalues -30000 -6740 -6740 6740 6740 30000
/MUON/setInnerRadii 70 70 4250 4250 70 70
/MUON/setOuterRadii 30000 30000 30000 30000 30000 30000
/MUON/SetMaterial Air

/Atlas/AddDetector BPIPE
/Atlas/AddDetector IDET
/Atlas/AddDetector CALO
/Atlas/AddDetector MUON
/MUON/AddDetector MSEL

/echo "MUON added"
/Atlas/SetAsWorld

EOF
#--------------------------------------------------------------------------
echo "## ... whose contents is "
echo "---------------------------------------------------------------------"
cat Envelopes.mac
echo "---------------------------------------------------------------------"
echo " "
echo " "


#  modify macro file AtlasGeoModel.mac
echo "## ... mudifying macro file AtlasGeoModel.mac"
#--------------------------------------------------------------------------
rm -f AtlasGeoModel.mac
cat > AtlasGeoModel.mac <<EOF

/echo "Building the envelopes"
/macro/execute Envelopes.mac
/load GeoDetectorPlugIns

# Inner detector geometry+SD. comment out following 2 lines for no IDET
/echo "Building the InnerDetector"
/macro/execute InnerDetectorGeoGeometry.mac
/macro/execute InnerDetectorGeoSensitive.mac

# LAr calorimeters. comment out following line  for no LAr
/echo "Building the LAr calorimeters"
/macro/execute LArCal.mac

# TileCal geometry+SD.  comment out following 2 lines for no TileCal
/echo "Building the TileCal"
/macro/execute TileCalGeoGeometry.mac
/macro/execute TileCalGeoSensitive.mac

# Muon system geometry+SD.  comment out following 2 lines for no Muon System
/echo "Building the Muon system"
/macro/execute MuonGeoGeometry.mac
/macro/execute MuonGeoSensitive.mac

# Field. comment out following line  for no field
/echo "Setting up the field"
/macro/execute AtlasField.mac

EOF
#--------------------------------------------------------------------------
echo "## ... whose contents is "
echo "---------------------------------------------------------------------"
cat AtlasGeoModel.mac
echo "---------------------------------------------------------------------"
echo " "
echo " "


#  generate jobOptions file
echo "## ... generating jobOptions file"
#--------------------------------------------------------------------------
cat > jobO.py <<EOF
include ("AthenaCommon/AthenaCommonFlags.py")
#include ("AtlasGeoModel/$INDETJOPT")
EvtMax = $NEVT
SkipEvents = $SKIP
PoolEvgenInput  = [ "$INFN" ]
PoolHitsOutput  = "$OUTFN"
DetDescrVersion = "$LAYOUT"
EOF

# If $T_ATLASMYSQLSERVER is set, use the address $T_ATLASMYSQLSERVER for the DB
# otherwise use the default servers
if [ "$T_ATLASMYSQLSERVER" != "" ] ; then
cat >> jobO.py <<EOF
IOVDbSvc = Service ( "IOVDbSvc" )
IOVDbSvc.serverName="$T_ATLASMYSQLSERVER"

#==============================================================
EOF

# Create a conf file for mysql
cat > my.cnf << EOF
[client]
host = $T_ATLASMYSQLSERVER
database = LArNBDC2

[reader]
user = reader

EOF
fi

#--------------------------------------------------------------------------

# overwrite existing jobOptions file 
mv jobO.py jobOptions.AtlasGeoG4Sim.py

# switch on MemorySnooper at begin-of-run, end-of-run, begin-of-event, end-of-event
echo "##"  
echo "## ... enable memory snooping ..."
export GOOFY_BOR_MACRO=bor_actions.mac
export GOOFY_EOR_MACRO=memorySnooper_eor.mac
echo "## ... through GOOFY_BOR_MACRO=$GOOFY_BOR_MACRO"
echo "## ...         GOOFY_EOR_MACRO=$GOOFY_EOR_MACRO"

# export GOOFY_BOE_MACRO=memorySnooper_boe.mac
# export GOOFY_EOE_MACRO=memorySnooper_eoe.mac
# echo "## ...         GOOFY_BOE_MACRO=$GOOFY_BOE_MACRO"
# echo "## ...         GOOFY_EOE_MACRO=$GOOFY_EOE_MACRO"

# copy POOL file catalog, set AthenaPOOL output level
if [ ! -f PoolFileCatalog.xml -a -f "$T_POOLFILE" ] ; then
  echo "##"  
  echo "## ... copying $T_POOLFILE ..."  
  cp -f $T_POOLFILE PoolFileCatalog.xml
fi
export POOL_OUTMSG_LEVEL=5
echo "## ... setting POOL_OUTMSG_LEVEL=$POOL_OUTMSG_LEVEL"


#########################################################################
# run the job ...
#
echo " "
echo " "
echo "##################################################################"
echo "## STEP 2: running athena ..." 
echo "##################################################################"

time athena.py jobOptions.AtlasGeoG4Sim.py G4OptionsDC2/dc2_g4sim.py &> log
athenaCheckLog log
retcode=$?
if [ $retcode -eq 0 ] ; then
  POOLFILELFN=$OUTFN
  POOLFILEID=`grep $OUTFN -B 100 PoolFileCatalog.xml \
                   | grep "File ID" | tail -n 1 | cut -d '"' -f 2`
  EVNTTOT="`grep \"End of Event\" log | wc -l | sed 's/^ *//g'`"
  metaDataHeader
  metaDataAddTag   "META" "name=\"events\"" "type=\"string\""
  metaDataOpenTag  "File" "ID=\"$POOLFILEID\""
  metaDataOpenTag  "logical"
  metaDataAddTag   "lfn" "name=\"$POOLFILELFN\""
  metaDataCloseTag "logical"
  metaDataAddTag   "metadata" \
                   "att_name=\"events\"" "att_value=\"$EVNTTOT\""
  metaDataCloseTag "File"
  metaDataFooter
fi
cat log

if [[ -n `grep $OUTFN PoolFileCatalog.xml` ]]; then
  # assemble new file catalog containing only the produced datafile
  rm -f NewPoolFileCatalog.xml
  echo "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>"  > NewPoolFileCatalog.xml
  echo "<"'!'"-- Edited By POOL -->"                                      >> NewPoolFileCatalog.xml
  echo "<"'!'"DOCTYPE POOLFILECATALOG SYSTEM \"InMemory\">"               >> NewPoolFileCatalog.xml
  echo "<POOLFILECATALOG>"                                             >> NewPoolFileCatalog.xml
  grep -A4 -B3 $OUTFN PoolFileCatalog.xml                              >> NewPoolFileCatalog.xml  
  echo "</POOLFILECATALOG>"                                            >> NewPoolFileCatalog.xml
  
  echo " "
  echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
  echo "   Contents of PoolFileCatalog.xml ..."
  echo " "
  cat NewPoolFileCatalog.xml 
  echo " "
  echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
fi
 
echo SIZE: `ls -l $OUTFN`     

# Check for output pool file integrity
athenaCheckOutput $OUTFN &> log
athenaCheckLog log
checkOutput=$?

if [ $retcode -eq 0 ] ; then
  [ ! -s "$OUTFN" -o $checkOutput -ne 0 ] && retcode=40
fi

echo " "
echo "##"
echo "##################################################################"
echo "End of job."

# Exit with return code
exit $retcode
