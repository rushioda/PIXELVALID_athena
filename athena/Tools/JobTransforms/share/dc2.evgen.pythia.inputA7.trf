#!/bin/sh

###########################################################################
## DC2 event generation transformation                                   ##
## uses Atlas (version >= 8.0.2)                                         ##
## signature: datasetnr outfilename first total ran pytcmd               ##
## outputs: datafile                                                     ##
##                                                                       ##
## generate particles with Pythia                                        ## 
## (HepMC data in POOL/ROOT format)                                      ##
##                                                                       ##
## (C) Nectarios Ch. Benekos, Armin Nairz, Alessandro De Salvo           ##
###########################################################################

T_CORETRANSVER=1.2.0

#######################################################################
# Defaults are commented out
# The calling script should set T_RELEASE and T_DISTREL as appropriate
#
#[ "$T_RELEASE" = "" ] && T_RELEASE="8.1.0"
#[ "$T_DISTREL" = "" ] && T_DISTREL=$SITEROOT/dist/$T_RELEASE
[ "$T_INCPATH" = "" ]     && T_INCPATH=`dirname $0`/../include
[ "$T_JOBOPTSPATH" = "" ] && T_JOBOPTSPATH=`dirname $0`/../jobOptions
                                                                                
# logfile check functions
source ${T_INCPATH}/checkLogUtils.def
                                                                                
# meta data writer
source ${T_INCPATH}/metaData.def
                                                                                
# colors
source ${T_INCPATH}/colors.def
                                                                                
# patch engine
source ${T_INCPATH}/patch.def
                                                                                
###########################################################################

if test $# -lt 8; then
  echo "DC2 event generation A7 transformation v$VERSION"
  echo usage: `basename $0`  "<datasetnr>" "<outfilename>" "<ntupname>" "<first>" "<total>" "<ran>" "<generation jobOption>" "<input datacard>"
  exit 30
fi

#####################################################
export DSET=$1
export OUTFN=$2
export NTUP=$3
export MYFIRST=$4
export PARTSZ=$5
export MYRAN=$6
export GENOPTS=$7
export INPDATA=$8

#--------------------------------------------------------------------------
#    set up and run generation job
#--------------------------------------------------------------------------

echo "##"
echo "##################################################################"
echo "## STEP 1: setting up environment"
echo "##################################################################"
echo "##"

# power of the processor
echo "## ... processor specifications:"
grep MHz /var/log/dmesg
cat /proc/meminfo

export WORKDIR=`pwd`
export system="`uname -a`"
export userid="`   id   `"
export HOSTMACHINE=`hostname -f`

# Set-up the run conditions
export JOBOPTSEARCHPATH="${T_JOBOPTSPATH},${JOBOPTSEARCHPATH}"
find ${T_DISTREL}/InstallArea/share -name "*.tab" -exec cp -f {} . \;
get_files -data PDGTABLE.MeV
cp $INPDATA alpgen.unw_events 
                                                                                
# Start compilation of the patches, if needed
T_PATCHES=GenerationPatches.tar.gz
patchRelease &> log
retcode=$?
cat log
if [ $retcode -ne 0 ] ; then
  compilationCheckLog log
  exit $retcode
fi
                                                                                
# Reduce verbosity of POOL
export POOL_OUTMSG_LEVEL=5
                                                                                
# Print the environment
printenv | grep -v 'CONFIG=' | grep -v "ROOT=$DISTREL"
echo
echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
echo 

#########################################################################
##START TRANS 
 
cat > job.py << EOF
###############################################################
#
# Job options file
#
#==============================================================

#--------------------------------------------------------------
# General Application Configuration options
#--------------------------------------------------------------
theApp.setup( MONTECARLO )

include( "PartPropSvc/PartPropSvc.py" )

# Generator fragment
theApp.Dlls  += ["TruthExamples", "Herwig_i", "Tauola_i" ,"Photos_i" ]
theApp.TopAlg = [ "Herwig", "Tauola", "Photos" ]

#--------------------------------------------------------------
# Private Application Configuration options
#--------------------------------------------------------------
theApp.ExtSvc += ["AtRndmGenSvc"]

include ( "GeneratorOptionsDC2/$GENOPTS" )

AtRndmGenSvc.Seeds = ["HERWIG 330020611 $MYRAN", "HERWIG_INIT 824021 3247532",
                      "TAUOLA 1048027510 $MYRAN", "TAUOLA_INIT 920021 3347532", 
                      "PHOTOS 2045027510 $MYRAN", "PHOTOS_INIT 930021 3447532"]
 
#---------------------------------------------------------------
# Pool Persistency
#---------------------------------------------------------------
include( "GeneratorOptionsDC2/Generator_pool_out_frag.py" )
#PoolSvc.Output = "$OUTFN"
Stream1.OutputFile = "$OUTFN"
 
#--------------------------------------------------------------
# Event related parameters
#--------------------------------------------------------------
# Number of events to be processed (default is 10)
theApp.EvtMax = $PARTSZ;
EventSelector = Service ( "EventSelector" )
EventSelector.RunNumber  = $DSET;
EventSelector.FirstEvent = $MYFIRST;

#--------------------------------------------------------------
# Set output level threshold (2=DEBUG, 3=INFO, 4=WARNING, 5=ERROR, 6=FATAL)
#-------------------------------------------------------------- 
MessageSvc.OutputLevel = 4;
Stream1.OutputLevel    = 4;

EOF

if [ $T_USEROOTHIST ] ; then
cat >> job.py << EOF
#--------------------------------------------------------------
# NTuple output file
#--------------------------------------------------------------
include ( "GeneratorOptionsDC2/Generator_to_atlfast_root.py" )
NTupleSvc.Output = [ "FILE1 DATAFILE='$NTUP' OPT='NEW' TYP='ROOT'" ]
#
###############################################################
EOF
else
cat >> job.py << EOF
#--------------------------------------------------------------
# NTuple output file
#--------------------------------------------------------------
include ( "GeneratorOptionsDC2/Generator_to_atlfast.py" )
NTupleSvc.Output = [ "FILE1 DATAFILE='$NTUP' OPT='NEW' TYP='HBOOK'" ]
#
###############################################################
EOF
fi


#--------------------------------------------------------------------------
#          run athena
#--------------------------------------------------------------------------
time athena.py job.py &> log
athenaCheckLog log
retcode=$?
if [ $retcode -eq 0 ] ; then
  POOLFILELFN=$OUTFN
  POOLFILEID=`grep $OUTFN -B 100 PoolFileCatalog.xml \
                   | grep "File ID" | tail -n 1 | cut -d '"' -f 2`
  EVNTTOT="`grep subprocesses log | cut -d 'I' -f 3 | awk '{print $1}'`"
  XSECTOT=`grep subprocesses log | cut -d 'I' -f 4 | awk '{print $1}'`
  metaDataHeader
  metaDataAddTag   "META" "name=\"cross-section\"" "type=\"string\""
  metaDataAddTag   "META" "name=\"events\"" "type=\"string\""
  metaDataOpenTag  "File" "ID=\"$POOLFILEID\""
  metaDataOpenTag  "logical"
  metaDataAddTag   "lfn" "name=\"$POOLFILELFN\""
  metaDataCloseTag "logical"
  metaDataAddTag   "metadata" \
                   "att_name=\"cross-section\"" "att_value=\"$XSECTOT\""
  metaDataAddTag   "metadata" \
                   "att_name=\"events\"" "att_value=\"$EVNTTOT\""
  metaDataCloseTag "File"
  metaDataFooter
fi
cat log

echo CROSS: `grep subprocess log | awk '{print $10}'`

echo SIZE: `ls -l $OUTFN`     

# Check the local POOL catalog
if [[ -e PoolFileCatalog.xml ]] ; then
 echo 
 echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
 echo "   Contents of PoolFileCatalog.xml ..."
 echo 
 cat PoolFileCatalog.xml 
 echo 
 echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
fi

if [ $retcode -eq 0 ] ; then
  [ ! -s "$OUTFN" ] && retcode=40
  [ ! -s "$NTUP" ] && retcode=41
  [ ! -s "$OUTFN" -a ! -s "$NTUP" ] && retcode=42
fi

echo " "
echo "End of job."
 
# Exit with return code
exit ${retcode}
