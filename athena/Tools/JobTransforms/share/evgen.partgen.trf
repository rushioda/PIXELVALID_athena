#!/bin/sh

###########################################################################
## Single particle event generation transformation                       ##
## uses Atlas (version >= 7.7.0) because of POOL persistency             ##
## signature: datasetnr outfilename first total ran pdg energy eta phi   ##
## outputs: datafile                                                     ##
##                                                                       ##
## uses package ParticleGenerator to generate single particles           ##
## (HepMC data in POOL/ROOT format)                                      ##
##                                                                       ##
## (C) Armin Nairz, Alessandro De Salvo                                  ##
###########################################################################

T_CORETRANSVER=1.2.0

#######################################################################
#
# Defaults are commented out
# The calling script should set T_RELEASE and T_DISTREL as appropriate
#
#[ "$T_RELEASE" = "" ] && T_RELEASE="8.1.0"
#[ "$T_DISTREL" = "" ] && T_DISTREL=$SITEROOT/dist/$T_RELEASE
[ "$T_INCPATH" = "" ] && T_INCPATH=`dirname $0`/../include

# logfile check functions
source ${T_INCPATH}/checkLogUtils.def

# meta data writer
source ${T_INCPATH}/metaData.def

# colors
source ${T_INCPATH}/colors.def

# patch engine
source ${T_INCPATH}/patch.def

###########################################################################

if test $# -ne 6; then
  echo "Single particle event generation transformation v$T_CORETRANSVER"
  echo "
  usage:   `basename $0`  "<datasetnr>" "<outfilename>" "<firstevt>" "<totalevts>" "<random>" "<partgencmd>" 

  example: `basename $0` 2045 dc1.002045.evgen.0001.root 1 100 20450001 {"PDGcode: sequence -13 13", "Et: constant 50", "eta: flat -1 1", "phi: flat 0 6.283185"}
  "      
  exit 0
fi

#####################################################

export DSET=$1
export OUTFN=$2
export MYFIRST=$3
export PARTSZ=$4
export MYRAN=$5
export GENCMD=$6

########## START TRANS

#--------------------------------------------------------------------------
#          generate jobOptions file
#--------------------------------------------------------------------------
cat > job.py <<EOF

##############################################################
#
# Job options file
#
#==============================================================

#--------------------------------------------------------------
# General Application Configuration options
#--------------------------------------------------------------
theApp.setup( MONTECARLO )
include( "PartPropSvc/PartPropSvc.py" )

#--------------------------------------------------------------
# Private Application Configuration options
#--------------------------------------------------------------

theApp.Dlls       += [ "ParticleGenerator", "TruthExamples" ]
theApp.TopAlg      = [ "ParticleGenerator" ]
theApp.ExtSvc     += ["AtRndmGenSvc"]
AtRndmGenSvc       = Service( "AtRndmGenSvc" )
AtRndmGenSvc.Seeds = [ "SINGLE 2040160768 $MYRAN" ];

#--------------------------------------------------------------
# Event related parameters
#--------------------------------------------------------------
theApp.EvtMax            = $PARTSZ
EventSelector            = Service( "EventSelector" )
EventSelector.RunNumber  = $DSET
EventSelector.FirstEvent = $MYFIRST

#--------------------------------------------------------------
# ParticleGenerator parameters
#--------------------------------------------------------------

ParticleGenerator        = Algorithm( "ParticleGenerator" )
ParticleGenerator.orders = $GENCMD
Generator                = Algorithm( "Generator" )
Generator.Members       += [ "EventCounter" ]

#---------------------------------------------------------------
# Pool Persistency
#---------------------------------------------------------------
include ( "AthenaPoolCnvSvc/WriteAthenaPool_jobOptions.py" )
theApp.DLLs += [ "GeneratorObjectsAthenaPoolPoolCnv" ]

# output stream objects
Stream1 = Algorithm( "Stream1" )
Stream1.ItemList += [ "2101#*", "133273#*" ]
Stream1.OutputFile = "$OUTFN"

#PoolSvc = Service( "PoolSvc" )
#PoolSvc.Output = "$OUTFN"

#--------------------------------------------------------------
# Set output level threshold (2=DEBUG, 3=INFO, 4=WARNING, 5=ERROR, 6=FATAL)
#-------------------------------------------------------------- 
MessageSvc              = Service( "MessageSvc" )
MessageSvc.OutputLevel  = 2
Stream1.OutputLevel     = 2
 
#==============================================================
#
# End of job options file
#
##############################################################

EOF

cat job.py

echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
echo
echo "##working directory is:" `pwd`
grep MHz /var/log/dmesg 
echo

export WORKDIR=`pwd`
export system="`uname -a`"
export userid="`   id   `"
export HOSTMACHINE=`hostname -f`

# Set-up the run conditions
get_files -data PDGTABLE.MeV

# Start compilation of the patches, if needed
T_PATCHES=GenerationPatches.tar.gz
patchRelease &> log
retcode=$?
cat log
if [ $retcode -ne 0 ] ; then
  compilationCheckLog log
  exit $retcode
fi

# Print the environment
printenv | grep -v 'CONFIG=' | grep -v "ROOT=$T_DISTREL"
echo
echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
echo

# suppress the AthenaPool Output
export POOL_OUTMSG_LEVEL=5

#--------------------------------------------------------------------------
#          run athena
#--------------------------------------------------------------------------
time athena.py job.py &> log
athenaCheckLog log
retcode=$?
if [ $retcode -eq 0 ] ; then
  POOLFILELFN=$OUTFN
  POOLFILEID=`grep $OUTFN -B 100 PoolFileCatalog.xml \
                   | grep "File ID" | tail -n 1 | cut -d '"' -f 2`
  metaDataHeader
  metaDataOpenTag  "File" "ID=\"$POOLFILEID\""
  metaDataOpenTag  "logical"
  metaDataAddTag   "lfn" "name=\"$POOLFILELFN\""
  metaDataCloseTag "logical"
  metaDataCloseTag "File"
  metaDataFooter
fi
cat log

echo " "
echo SIZE: `ls -l $OUTFN`     

# Check the local POOL catalog
if [[ -e PoolFileCatalog.xml ]] ; then
 echo 
 echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
 echo "   Contents of PoolFileCatalog.xml ..."
 echo 
 cat PoolFileCatalog.xml 
 echo 
 echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
fi
echo " "
echo "End of job." 

# Exit with return code
exit ${retcode}
