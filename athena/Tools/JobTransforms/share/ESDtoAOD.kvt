#!/bin/sh

#####################################################################
##   ESDtoAOD for KitValidation                                    ##
##                                                                 ##
##   Tadashi Maeno <Tadashi.Maeno@cern.ch>                         ##
##   David Rousseau <rousseau@lal.in2p3.fr>                        ##
##   Grigori Rybkine <Grigori.Rybkine@rhul.ac.uk>                  ##
#####################################################################

# Defaults
T_RELEASE=8.5.0
T_RELEASEBASE=dist
ATLAS_ROOT=${SITEROOT}
T_SCRIPTPATH=`dirname $0`
T_SCRIPTPATH=`echo $T_SCRIPTPATH|sed -e "s#^./#$PWD/#"`
T_INCPATH="$T_SCRIPTPATH/../include"
T_DATAPATH=${PWD}/data
T_PREFIX="KitValidation"
T_INDESC=RecExToESD
T_OUTDESC=ESDtoAOD
T_TRANSVER=1.0.0
T_TRANSDESC=ESDtoAOD
T_TRANSAUTH="Tadashi Maeno <Tadashi.Maeno@cern.ch>, David Rousseau <rousseau@lal.in2p3.fr>, Grigori Rybkine <Grigori.Rybkine@rhul.ac.uk>"

# help
source ${T_INCPATH}/transformHelp.def

# copy files
source ${T_INCPATH}/copy.def

# Get the command line options
source ${T_INCPATH}/transformOptions.def

# Colors
source ${T_INCPATH}/colors.def

# logfile check functions
source ${T_INCPATH}/checkLogUtils.def

# Input and Output directory
[ "$T_INPATH" == "" ] && T_INPATH=${T_DATAPATH}/${T_INDESC}-${T_RELEASE}
[ "$T_INFILE" == "" ] && T_INFILE=ESD.pool.root

[ "$T_OUTPATH" == "" ] && T_OUTPATH=${T_DATAPATH}/${T_OUTDESC}-${T_RELEASE}
[ "$T_OUTFILE" == "" ] && T_OUTFILE=AOD.pool.root
[ "$T_LOGFILE" == "" ] && T_LOGFILE="${T_PREFIX}-${T_OUTDESC}-${T_RELEASE}.log"
mkdir -p ${T_OUTPATH}

# Working directory
T_TMPDIR=${T_TEMPPATH}/atlas.tmp$$
mkdir -p ${T_TMPDIR}
cd ${T_TMPDIR}

# Setup the run time environment
kvtSetup

# get input file
ln -fs ${T_INPATH}/${T_INFILE} .

if [ "${VERBOSE}" = "yes" ] ; then
  echo "################################################"
  echo "        Starting ${T_TRANSDESC}"
  echo "################################################"
fi

# to be removed when HOST and OS set in the release
[ "$HOST" ] || export HOST=host
export OS=Linux

# prepare the test
RecExCommon_links.sh &> ${T_TMPDIR}/${T_LOGFILE}.0

mv PoolFileCatalog.xml _PoolFileCatalog.xml
cp -p ${T_INPATH}/PoolFileCatalog.xml .
cat PoolFileCatalog.xml >> ${T_TMPDIR}/${T_LOGFILE}.0

# set the maximum amount of virtual memory available to ~1.3GB
ulimit -Sv 1300000 2> /dev/null
if [ $? -ne 0 ]; then
  echo "Cannot get enough virtual memory, exiting..." ; exit 1
fi

#DR run the test on just 2 events
# for 9.0.0
#athena.py -s -c "EvtMax=2" ParticleEventAthenaPool/optESDtoAOD.py \
#RecExCommon/RecExCommon_topOptions.py &> ${T_TMPDIR}/${T_LOGFILE}

# Don't produce or use CBNT
get_files -jo ParticleEventAthenaPool/ESDtoAOD_topOptions.py &> /dev/null
cat > job.py <<EOD
EvtMax=2
doCBNT=FALSE
EOD
grep -v CBNT ESDtoAOD_topOptions.py >> job.py

# starting after 9.0.0
athena.py job.py &> ${T_TMPDIR}/${T_LOGFILE}

athenaCheckLog ${T_TMPDIR}/${T_LOGFILE}
retcode=$?

# Error report
[ "$T_GUESSPROBLEM" = "yes" -a -f checklog.txt ] && cat checklog.txt

# Copy files
copyFiles ${T_TMPDIR}/${T_LOGFILE}.0 ${T_TMPDIR}/${T_LOGFILE} \
PoolFileCatalog.xml ${T_OUTFILE} \
CLIDDBout.txt cdb.log

#
#if [ $retcode -eq 0 ] ; then
#  checkFiles ${T_OUTPATH}/${T_OUTFILE},${T_OUTFILE}
#  retcode=$?
#fi

# Clean up
cd /tmp
rm -fr ${T_TMPDIR}

exit ${retcode}
