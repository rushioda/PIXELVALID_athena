#! /usr/bin/env sh

##########################################################
##  RDO event mixing                                    ##
##  with ATLAS Release >= 9.0.0                         ##
##  Writes BS output in EventStorage format.            ##
##                                                      ##
##  (C) Armin Nairz, Nectarios Benekos,                 ##
##      Alessandro De Salvo                             ##
##########################################################

T_CORETRANSVER=1.1.0

#######################################################################
#
# Defaults are commented out
# The calling script should set T_RELEASE and T_DISTREL as appropriate
#
#[ "$T_RELEASE" = "" ] && T_RELEASE="9.0.0"
#[ "$T_DISTREL" = "" ] && T_DISTREL=$SITEROOT/dist/$T_RELEASE
[ "$T_INCPATH" = "" ] && T_INCPATH=`dirname $0`/../include
[ "$T_JOBOPTSPATH" = "" ] && T_JOBOPTSPATH=`dirname $0`/../jobOptions

# logfile check functions
source ${T_INCPATH}/checkLogUtils.def

# meta data writer
source ${T_INCPATH}/metaData.def

# colors
source ${T_INCPATH}/colors.def

# patch engine
source ${T_INCPATH}/patch.def

###########################################################################

if test $# -ne 8 ; then
  echo "Event mixing transformation v$T_CORETRANSVER"
  echo "USAGE:   `basename $0` <dset> <outfilename> <nevt> <mixing_options>"
  echo 
  echo "  <dset> ............ dataset number"
  echo "  <streamsdef> ...... event ranges for streams (comma separated list). In the form"
  echo "                      <first [stream 1]>:<last [stream 1]>,<first [stream 2]>:<last [stream 2]>"
  echo "  <inputfiles> ...... input files for streams (comma separated list). In the form"
  echo "                      <file 1 [stream 1]>:<file 2 [stream 1]>,<file 1 [stream 2]>,..."
  echo "  <outfilename> ..... local name of output file"
  echo "  <nevt> ............ number of output events to be processed" 
  echo "  <numberofSFO> ..... number of Event Filter Subfarm Output Managers"
  echo "  <filenum> ......... file number"
  echo "  <offset> .......... offset for event numbers"
  echo ""
  echo "Info: /afs/cern.ch/atlas/project/dc2/preprod805/evtmix805/jobOptionsFragment.txt"
  echo
  exit 30
fi

#--------------------------------------------------------------------------
#    parameter translation
#--------------------------------------------------------------------------
#--------------------------------------------------------------------------
#    Signature:  sigfilename mbfilename outfilename numcolls nevt skip
#--------------------------------------------------------------------------
export DSET=$1
export STREAMS=$2
export INFN=$3
export OUTFN=$4
export NEVT=$5
export NSFO=$6
export FNUM=$7
export OFFS=$8
 
#--------------------------------------------------------------------------
#    set up and run event-mixing job
#--------------------------------------------------------------------------

echo "#######################   ATLAS Event Mixing   ###################"
echo "#######################        ATLAS RDO       ###################"
echo "##"
echo "##################################################################"
echo "## STEP 1: setting up environment"
echo "##################################################################"
echo "##"

unset LOCALSIM
unset LOCALRUNDIR
unset POOL_OUTMSG_LEVEL 
unset POOL_STORAGESVC_DB_AGE_LIMIT

# power of the processor
echo "## ... processor specifications:"
grep MHz /var/log/dmesg
cat /proc/meminfo

export system="`uname -a`"
export userid="`   id   `"
export HOSTMACHINE=`hostname -f`

# Set up the run conditions
get_files -data PDGTABLE.MeV

# Start compilation of the paches, if needed
T_PATCHES=EventMixingPatches.tar.gz
patchRelease &> log
retcode=$?
cat log
if [ $retcode -ne 0 ] ; then
  compilationCheckLog log
  exit $retcode
fi

# Reduce verbosity of POOL
export POOL_OUTMSG_LEVEL=5

# Print the environment
printenv | grep -v 'CONFIG=' | grep -v "ROOT=$T_DISTREL"
echo
echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
echo

#--------------------------------------------------------------------------
#  generate the jobOptions fragment
#--------------------------------------------------------------------------
T_JOBOPTFRAG=jobOptions.EvtMix_fragment.py
rm -f $T_JOBOPTFRAG
echo "## ... generating job option fragment $T_JOBOPTFRAG"
cat > $T_JOBOPTFRAG << EOD
EventMixer = Algorithm( "EventMixer" )
EOD

# Event mixer triggers
let counter=0
echo $STREAMS | awk -F ',' '{ for (i=1; i<=NF; i++) print $i}' | \
while read stream; do
  let counter=$counter+1
  FIRST="`echo $stream | cut -d ':' -f 1`"
  LAST="`echo $stream | cut -d ':' -f 2`"
  STREAMNUM="`printf "%02d" $counter`"
cat >> $T_JOBOPTFRAG <<EOF
EventMixer.TriggerList += [ "EventSelectorAthenaPool/InputStream${STREAMNUM}Selector:${FIRST}:${LAST}" ];
EOF
done
echo >> $T_JOBOPTFRAG

# Event mixer input streams
let counter=0
echo $INFN | awk -F ',' '{ for (i=1; i<=NF; i++) print $i}' | \
while read stream; do
  let counter=$counter+1
  STREAMNUM="`printf "%02d" $counter`"
cat >> $T_JOBOPTFRAG <<EOF
InputStream${STREAMNUM}Selector = Algorithm( "InputStream${STREAMNUM}Selector" )
InputStream${STREAMNUM}Selector.InputCollections = [
EOF
  echo $stream | awk -F ':' '{ for (i=1; i<=NF; i++) { \
                                 if (i<NF) { \
                                   print "\""$i"\"," \
                                 } else { \
                                   print "\""$i"\"" } } }' \
               >> $T_JOBOPTFRAG
  echo "]" >> $T_JOBOPTFRAG
done

# Event mixer events
cat >> $T_JOBOPTFRAG << EOF

EventMixer.EventNumbers = [
EOF

# Lookup table for overall ordering for event numbers:
declare -a lookup=(0 1 2 6 5 4 3 7 8 9)

offset=$(((NSFO*(FNUM/NSFO)*NEVT)+(FNUM%NSFO)))
let counter=0
lineout=""
for i in `seq 0 $((NEVT-1))`; do
  let counter=$counter+1
  ibase=$((10*(i/10)))
  imod=$((i%10))
  evtno=$((offset+NSFO*(ibase+lookup[imod])+OFFS))
  lineout="${lineout} ${evtno}"
  if [ $i -lt $((NEVT-1)) ] ; then
    lineout="${lineout},"
  fi
  if [ $counter -ge 10 -o $i -eq $((NEVT-1)) ] ; then
    echo $lineout >> $T_JOBOPTFRAG
    lineout=""
    let counter=0
  fi
done

echo "]" >> $T_JOBOPTFRAG

#--------------------------------------------------------------------------
echo "## ... whose content is "
echo "---------------------------------------------------------------------"
cat $T_JOBOPTFRAG
echo "---------------------------------------------------------------------"
echo " "

#--------------------------------------------------------------------------
#  generate the jobOptions file
#--------------------------------------------------------------------------
cat > jobOptions.EvtMix_RDO.py <<EOF
 
#==============================================================
#
#  JobOptions file for RDO Event Mixing
#
#  Authors: Paolo Calafiura
#           Nectarios Chr. Benekos
#           Armin Nairz
#
#==============================================================
                                                                                
include( "AthenaCommon/Atlas.UnixStandardJob.py" )
                                                                                
theApp.Dlls += [ "PoolSvc", "AthenaPoolCnvSvc", "AthenaPoolCnvSvcPoolCnv", "EventSelectorAthenaPool" ]
EventPersistencySvc = Service( "EventPersistencySvc" )
EventPersistencySvc.CnvServices += [ "AthenaPoolCnvSvc" ]
theApp.Dlls += [ "McEventSelector" ]
include( "AthenaSealSvc/AthenaSealSvc_joboptions.py" )
                                                                                
#--------------------------------------------------------------
# POOL Converters
#--------------------------------------------------------------
include( "EventAthenaPool/EventAthenaPool_joboptions.py" )
include( "GeneratorObjectsAthenaPool/GeneratorObjectsAthenaPool_joboptions.py" )
include( "G4SimAthenaPOOL/G4SimAthenaPOOL_joboptions.py" )
include( "InDetEventAthenaPool/InDetEventAthenaPool_joboptions.py" )
include( "LArAthenaPool/LArAthenaPool_joboptions.py" )
include( "TileEventAthenaPool/TileEventAthenaPool_joboptions.py" )
include( "MuonEventAthenaPool/MuonEventAthenaPool_joboptions.py" )
include( "TrigT1EventAthenaPool/TrigT1EventAthenaPool_joboptions.py" )
                                                                                
#--------------------------------------------------------------
# GeoModel and DetDescr options
#--------------------------------------------------------------
include( "AtlasGeoModel/GeoModelCommon.py" )
                                                                                
# Inner Detector
include( "AtlasGeoModel/InDetGeoModel.py" )
theApp.Dlls += [ "InDetRawUtils" ]
                                                                                
# Calorimeters
include( "CaloDetMgrDetDescrCnv/CaloDetMgrDetDescrCnv_joboptions.py" )
include( "LArDetMgrDetDescrCnv/LArDetMgrDetDescrCnv_joboptions.py" )
include( "TileDetMgrDetDescrCnv/TileDetMgrDetDescrCnv_jobOptions.py" )
include( "TileConditions/TileConditions_jobOptions.py" )
                                                                                
# Muons
include( "AtlasGeoModel/MuonGeoModel.py" )
from AthenaCommon.DetFlags import DetFlags
DetFlags.Muon_setOn()
include( "AmdcAth/AmdcAth_jobOptions.py" )
#include( "AmdbAth/AmdbAth_jobOptions.py" )
include( "MuonByteStreamCnvTest/MuonRdoDigit_jobOptions.py" )
                                                                                
#--------------------------------------------------------------
# Event-mixing options
#--------------------------------------------------------------
ProxyProviderSvc = Service( "ProxyProviderSvc" )
theApp.ExtSvc += [ "MixingEventSelector/EventMixer" ]
ProxyProviderSvc.ProviderNames += [ "EventMixer" ]
                                                                                
theApp.EvtSel = "EventMixer"
EventMixer = Algorithm( "EventMixer" )
EventMixer.OutputRunNumber = $DSET
include( "$T_JOBOPTFRAG" )
                                                                                
#--------------------------------------------------------------
# Options for writing to POOL
#--------------------------------------------------------------
theApp.OutStream     = [ "Stream1" ];
theApp.OutStreamType = "AthenaOutputStream";
Stream1 = Algorithm( "Stream1" )
Stream1.EvtConversionSvc = "AthenaPoolCnvSvc";
                                                                                
Stream1.ForceRead = True   # Force read of output data objects

Stream1.OutputFile = "$OUTFN"

# Define output stream
Stream1.ItemList += [ "EventInfo#*" ];
Stream1.ItemList += [ "McEventCollection#*" ];
##from InDetDigitization
Stream1.ItemList += [ "PixelRDO_Container#*" ];
Stream1.ItemList += [ "SCT_RDO_Container#*" ];
Stream1.ItemList += [ "TRT_RDO_Container#*" ]
Stream1.ItemList += [ "InDetSimDataCollection#*" ];
##from CaloDigitization
Stream1.ItemList += [ "LArRawChannelContainer#*" ]
Stream1.ItemList += [ "TileRawChannelContainer#*" ]
##from MuonDigitization
Stream1.ItemList += [ "CscRawDataContainer#*" ]
Stream1.ItemList += [ "MdtCsmContainer#*" ]
Stream1.ItemList += [ "RpcPadContainer#*" ]
Stream1.ItemList += [ "TgcRdoContainer#*" ]
Stream1.ItemList += [ "TrackRecordCollection#*" ]
Stream1.ItemList += [ "MuonSimDataCollection#*" ]
##from LVL1
Stream1.ItemList += [ "ROIB::RoIBResult#*", "MuCTPI_RDO#*" ]

#--------------------------------------------------------------
# Event-related parameters
#--------------------------------------------------------------
# Number of output events to be processed
theApp.EvtMax = $NEVT
                                                                                
#--------------------------------------------------------------
# Monitor and debug printouts
#--------------------------------------------------------------
MessageSvc = Service( "MessageSvc" )
MessageSvc.OutputLevel = 4
MessageSvc.setVerbose += [ "MixingEventSelector::TriggerList" ]
EventMixer.OutputLevel = 1
Stream1.OutputLevel    = 4
                                                                                
AthenaEventLoopMgr = Service( "AthenaEventLoopMgr" )
AthenaEventLoopMgr.OutputLevel = 3;  #get event printout
                                                                                
#--------------------------------------------------------------
# Write out a summary of the time spent
#--------------------------------------------------------------
theApp.Dlls += [ "GaudiAud" ]
theAuditorSvc = AuditorSvc()
theAuditorSvc.Auditors += [ "ChronoAuditor" ]
                                                                                
ChronoStatSvc = Service( "ChronoStatSvc" )
ChronoStatSvc.OutputLevel = 3
                                                                                
#==============================================================
                                                                                
EOF

# If $T_ATLASMYSQLSERVER is set, use the address $T_ATLASMYSQLSERVER for the DB
# otherwise use the default servers
if [ "$T_ATLASMYSQLSERVER" != "" ] ; then
cat >> jobOptions.EvtMix_RDO.py <<EOF
NovaCnvSvc.Host = "$T_ATLASMYSQLSERVER"
IOVDbSvc.serverName="$T_ATLASMYSQLSERVER"
                                                                                
#==============================================================
EOF

# Create a conf file for mysql
cat > my.cnf << EOF
[client]
host = $T_ATLASMYSQLSERVER
database = LArNBDC2

[reader]
user = reader

EOF
fi

#--------------------------------------------------------------------------


# copy POOL file catalog, set AthenaPOOL output level
if [ ! -f PoolFileCatalog.xml -a -f "$T_POOLFILE" ] ; then
  echo "##"  
  echo "## ... copying $T_POOLFILE ..."  
  cp -f $T_POOLFILE PoolFileCatalog.xml
else
  cat PoolFileCatalog.xml
fi
export POOL_OUTMSG_LEVEL=5
echo "## ... setting POOL_OUTMSG_LEVEL=$POOL_OUTMSG_LEVEL"

export POOL_STORAGESVC_DB_AGE_LIMIT=50
echo "## ... setting POOL_STORAGESVC_DB_AGE_LIMIT=$POOL_STORAGESVC_DB_AGE_LIMIT"


#########################################################################
# run the job ...
#
echo " "
echo " "
echo "##################################################################"
echo "## STEP 2: running athena ..." 
echo "##################################################################"

#--------------------------------------------------------------------------

#############################################
##        TEMPORARY BUG WORKAROUND         ##
##                                         ##
## Create an entry for the output pool     ##
## file in the PoolFileCatalog.xml catalog ##
#############################################

FCregisterPFN -p $OUTFN -t ROOT_All
retcode=$?

# Exit immediately if an error occurs
if [ $retcode -ne 0 ] ; then
  exit $retcode
fi

#--------------------------------------------------------------------------

time athena.py -b jobOptions.EvtMix_RDO.py &> log
athenaCheckLog log
retcode=$?
cat log

echo SIZE: `ls -l $OUTFN`     

if [ $retcode -eq 0 ] ; then
  [ ! -s "$OUTFN" ] && retcode=40
fi

echo " "
echo "##"
echo "##################################################################"
echo "end of job"

# Exit with return code
exit $retcode
