--- pycrypto/src/MD2.c-orig	2016-12-16 18:24:43.000000001 +0100
+++ pycrypto/src/MD2.c	2016-12-16 18:25:33.000000001 +0100
@@ -41,10 +41,12 @@
  * 			digestAlgorithm(2) 2
  * 			}
  */
+#if 0
 static const char md2_oid[] = { 0x06, 0x08, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x02, 0x02 };
 
 #define DER_OID 		((void*)&md2_oid)
 #define DER_OID_SIZE		(sizeof md2_oid)
+#endif
 
 typedef unsigned char U8;
 typedef unsigned int U32;
--- pycrypto-2.6.1/src/hash_SHA2_template.c-orig	2016-12-20 22:57:35.000000001 +0100
+++ pycrypto-2.6.1/src/hash_SHA2_template.c	2016-12-20 22:59:35.000000001 +0100
@@ -94,8 +94,10 @@
     if (overflow_detector > hs->length_lower) {
         overflow_detector = hs->length_upper;
         hs->length_upper++;
-        if (hs->length_upper > hs->length_upper)
-            return 0;
+        // Obviously wrong.  But the return value of this function isn't
+        // actually used anyway, so just get rid of this.
+        //if (hs->length_upper > hs->length_upper)
+        //    return 0;
     }
     return 1;
 }
--- pycrypto-2.6.1/src/_counter.c-orig	2016-12-23 17:42:20.000000001 +0100
+++ pycrypto-2.6.1/src/_counter.c	2016-12-23 17:43:30.000000001 +0100
@@ -576,7 +576,7 @@
     if (m == NULL)
         return;
 		
-	my_CounterLEType.ob_type = &PyType_Type;
+    my_CounterLEType.ob_type = &PyType_Type;
     my_CounterBEType.ob_type = &PyType_Type;
 #endif
 }
--- pycrypto-2.6.1/src/strxor.c-orig	2016-12-23 17:42:26.000000001 +0100
+++ pycrypto-2.6.1/src/strxor.c	2016-12-23 17:43:02.000000001 +0100
@@ -28,7 +28,7 @@
 
 #include "pycrypto_compat.h"
 
-static const char rcsid[] = "$Id$";
+//static const char rcsid[] = "$Id$";
 
 /*
  * xor_strings - XOR two strings together to produce a third string
