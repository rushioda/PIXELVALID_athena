#!/bin/bash

# Script which generates the factory code needed for VP1 plugins
#
# Thomas Kittelmann, May 2007.

echo "=====>"
echo "=====>  Generating factory code for VP1 Plugin"
echo "=====>"

if [ "x"`basename $PWD` != "xcmt" ]; then
    echo "$APPNAME: ERROR - must be invoked from cmt dir (pwd is: $PWD)"
    exit 1
fi

if [ "x${CMTCONFIG}" == "x" ]; then
    echo "$APPNAME: ERROR - CMTCONFIG not set"
    exit 1
fi
if [ ! -d ../${CMTCONFIG}/ ]; then
    echo "$APPNAME: ERROR - did not find ../$CMTCONFIG/ directory"
    exit 1
fi

declare -a VP1CLASSNAMES
declare -a VP1STRINGS
VP1N=0
for srcfile in ../src/*.cxx; do
  TMP=`cat $srcfile|sed 's#//.*$##'|grep 'VP1CHANNELNAMEINPLUGIN *(.*)'`
  if [ "x$TMP" == "x" ]; then
      continue
  fi
  NLINES=`echo $TMP|wc -l|awk '{print $1}'`
  if [ "x$NLINES" == "x0" ]; then
      continue
  fi
  if [ "x$NLINES" != "x1" ]; then
    echo "$APPNAME: ERROR - Source file $srcfile had suspicious number of VP1CHANNELNAMEINPLUGIN (or maybe the parsing simply failed)"
    exit 1
  fi
  TMP=`echo $TMP|sed 's#^.*VP1CHANNELNAMEINPLUGIN *(##'|sed 's#).*$##'`
  #We might as well look for illegal characters at compile time:
  TEST=`echo $TMP|grep '\['|wc -l|awk '{print $1}'`
  if [ "x$TEST" != "x0" ]; then
    echo "$APPNAME: ERROR - found illegal character ([) in VP1CHANNELNAMEINPLUGIN macro"
    exit 1
  fi
  TEST=`echo $TMP|grep '\]'|wc -l|awk '{print $1}'`
  if [ "x$TEST" != "x0" ]; then
    echo "$APPNAME: ERROR - found illegal character (]) in VP1CHANNELNAMEINPLUGIN macro"
    exit 1
  fi
  #Add the found entries:
  VP1CLASSNAMES[$VP1N]=`echo $TMP|sed 's#,.*$##'`
  VP1STRINGS[$VP1N]=`echo $TMP|sed 's#^.*, *"#"#'`
  VP1N=$((VP1N+1))
done
VP1N=$((VP1N-1))

APPNAME=`basename $0` && \
PACKAGENAME=`cmt show macro_value package` && \
mkdir -p ../${CMTCONFIG}/tmpqt_extraheaders && \
mkdir -p ../${CMTCONFIG}/tmpqt_extrasrc && \
FACTNAME="${PACKAGENAME}_VP1AutoFactory" && \
FACTNAMELOWER=`echo $FACTNAME | tr "[:upper:]" "[:lower:]"` && \
HEADERFILE="../${CMTCONFIG}/tmpqt_extraheaders/${FACTNAME}.h" && \
SRCFILE="../${CMTCONFIG}/tmpqt_extrasrc/${FACTNAME}.cxx" && \
rm -f $HEADERFILE && touch $HEADERFILE && \
rm -f $SRCFILE && touch $SRCFILE && \
GENTIME=`date` && \
echo '//Autogenerated VP1 Factory Code Header File ('"${GENTIME}"')'>> $HEADERFILE && \
echo '' >> $HEADERFILE && \
echo '#ifndef '"${FACTNAME}"'_H' >> $HEADERFILE && \
echo '#define '"${FACTNAME}"'_H' >> $HEADERFILE && \
echo '' >> $HEADERFILE && \
echo '#include <QObject>' >> $HEADERFILE && \
echo '#include <QStringList>' >> $HEADERFILE && \
echo '' >> $HEADERFILE && \
echo '#include "VP1Base/IVP1ChannelWidgetFactory.h"' >> $HEADERFILE && \
echo '' >> $HEADERFILE && \
echo 'class '"${FACTNAME}"' : public QObject, public IVP1ChannelWidgetFactory' >> $HEADERFILE && \
echo '{' >> $HEADERFILE && \
echo '  Q_OBJECT' >> $HEADERFILE && \
echo '  Q_INTERFACES(IVP1ChannelWidgetFactory)' >> $HEADERFILE && \
echo '' >> $HEADERFILE && \
echo 'public:' >> $HEADERFILE && \
echo '  virtual QStringList channelWidgetsProvided() const;' >> $HEADERFILE && \
echo '  virtual IVP1ChannelWidget * getChannelWidget(const QString & channelwidget);' >> $HEADERFILE && \
echo '};' >> $HEADERFILE && \
echo '' >> $HEADERFILE && \
echo '#endif' >> $HEADERFILE && \
GENTIME=`date` && \
echo '//Autogenerated VP1 Factory Code Implementation File ('"${GENTIME}"')'>> $SRCFILE && \
echo '' >> $SRCFILE && \
echo '#include <QtPlugin>'>> $SRCFILE && \
echo '#include "tmpqt_extraheaders/'"${FACTNAME}"'.h"' >> $SRCFILE && \
ls -1 ../$PACKAGENAME/*.h|sed 's!^../!#include "!'|sed 's!$!"!' >> $SRCFILE && \
echo ''>> $SRCFILE && \
echo 'QStringList '"${FACTNAME}"'::channelWidgetsProvided() const'>> $SRCFILE && \
echo '{'>> $SRCFILE && \
echo '  return QStringList()'>> $SRCFILE && \
i=0 && \
while [ $i -le $VP1N ]; do
    echo "        << "${VP1STRINGS[$i]} >> $SRCFILE && \
    i=$((i+1))
done && \
echo '         ;'>> $SRCFILE && \
echo '}'>> $SRCFILE && \
echo ''>> $SRCFILE && \
echo 'IVP1ChannelWidget * '"${FACTNAME}"'::getChannelWidget(const QString & channelwidget)'>> $SRCFILE && \
echo '{'>> $SRCFILE && \
i=0 && \
while [ $i -le $VP1N ]; do
    echo '  if (channelwidget == '${VP1STRINGS[$i]}')' >> $SRCFILE && \
    echo '    return new '${VP1CLASSNAMES[$i]}'();'>> $SRCFILE && \
    echo '' >> $SRCFILE && \
    i=$((i+1))
done && \
echo '  return 0;'>> $SRCFILE && \
echo '}'>> $SRCFILE && \
echo ''>> $SRCFILE && \
echo 'Q_EXPORT_PLUGIN2(pnp_'"${FACTNAMELOWER}"', '"${FACTNAME}"')'>> $SRCFILE
