#include "QatPlotting/LinToLog.h"
#include "QatPlotting/AbsPlotter.h"
#include "QatDataAnalysis/Query.h"
#include "CLHEP/GenericFunctions/AbsFunction.hh"
#include <QtGui/QGraphicsPathItem>
#include <QtGui/QPainterPath>
#include <QtGui/QGraphicsScene>
#include <stdexcept>

class PlotOrbit::Clockwork {

public:

  Clockwork() :
    functionX(nullptr),
    functionY(nullptr),
    t0(0.0), t1(1.0),
    myProperties(nullptr) {}

  ~Clockwork() {
    if (functionX) delete functionX;
    if (functionY) delete functionY;
    if (myProperties) delete myProperties;
  }


public:


  static bool intersect(const QRectF * rect, const QPointF & p1, const QPointF & p2, QPointF & p) {
    
    double min=rect->top();
    double max=rect->bottom();
    double y1=p1.y();
    double y2=p2.y();
    
    if (rect->contains(p1) && rect->contains(p2)) {
      return false;
    }
    else if (y1 < min || y2 < min) {
      if (QLineF(p1,p2).intersect(QLineF(rect->topLeft(),rect->topRight()),&p)!=QLineF::BoundedIntersection){
	return false;
      }
    }
    else if (y1 > max || y2 > max) {
      if (QLineF(p1,p2).intersect(QLineF(rect->bottomLeft(),rect->bottomRight()),&p)!=QLineF::BoundedIntersection){
	return false;
      }
    }
    return true;
  }
  
  static bool maxOut(const QRectF * rect, const QPointF & p1, QPointF & p) {

    double min=rect->top();
    double max=rect->bottom();
    double y1=p1.y();

    if (rect->contains(p1)) {
      if (fabs(y1-max) < fabs(y1-min)) {
	p.setX(p1.x());
	p.setY(max);
      }
      else {
	p.setX(p1.x());
	p.setY(min);
      }
    }
    else {
      
      if (y1>max) {
	p.setX(p1.x());
	p.setY(max);
      }
      else if (y1<min) {
	p.setX(p1.x());
	p.setY(min);
      }
    }

    return true;
  }

  static void moveTo(QPainterPath *path, const QMatrix & m, const QPointF & p, const LinToLog *linToLogX=NULL, const LinToLog *linToLogY=NULL) {
    double x=p.x(),y=p.y();
    if (linToLogX) x = (*linToLogX)(x);
    if (linToLogY) y = (*linToLogY)(y);
    
    path->moveTo(m.map(QPointF(x,y)));
  }

  static void lineTo(QPainterPath *path, const QMatrix & m, const QPointF & p, const LinToLog *linToLogX=NULL, const LinToLog *linToLogY=NULL) {
    double x=p.x(),y=p.y();
    if (linToLogX) x = (*linToLogX)(x);
    if (linToLogY) y = (*linToLogY)(y);
    
    path->lineTo(m.map(QPointF(x,y)));
  }

  // This is state:
  const Genfun::AbsFunction            *functionX;          // The first function
  const Genfun::AbsFunction            *functionY;          // The second function
  QRectF                                rect;               // The "natural" bounding rectangle
  double                                t0,t1;              // Start and end times (or parameter values)
  Properties                           *myProperties;       // My properties.  May 
  Properties                            defaultProperties;

private:
  
  Clockwork (const Clockwork &);
  Clockwork & operator=(const Clockwork &);
  
};
