#!/usr/bin/python# Geraldine Conti 3 February 2015from collections import defaultdictimport sys,re#def IBLTot(calibrationFile, hashIdFile):  """ Read and parse calibration data to return a dictionary of hashId: calibration_string    The Calibration file has lines of format(note modules may have 1, 2 or 16 line entries):    LI_S01_A_M1_A1    I0 2559 71 115 2559 2550 63 130 2550 2550 63 130 2550 20.841 -889.378 16504.8 20.841 -889.378 16504.8 0.263637 2.34152e-05    I1 2560 65 112 2560 2566 69 129 2566 2566 69 129 2566 19.8282 -1305.08 13770.5 19.8282 -1305.08 13770.5 0.143171 2.94417e-05    The HashId correspondence is in a file with lines of format:    20480 LI_S15_C_34_M3_C1_2 -4 0 0 0      and should have 2048 entries, the line number (from zero) being the hashId    Geraldine Conti 3 February 2015  """  f = open(calibrationFile,'r')  mylongstr = ""  mydict = {}  HashID = 10000  parsed = {}  for line in iter(f):      data=line.strip().split(" ")      # FIND LINES WITH MODULES IDs      if(data[0].find('_')>0):          if(not HashID==10000):              key = HashID              mydict[key]=mylongstr          mylongstr = ""          f2 = open(hashIdFile,'r')          # LOOP ON ID FILE ########################          HashID = 0                for line2 in iter(f2):              data2=line2.strip().split(" ")              if(data2[1]==data[0]):                  myinfo = str(data2[2]+','+data2[3]+','+data2[4]+','+data2[5])                  mylongstr += ''.join(myinfo)+' \n'                  break              HashID += 1          f2.close()          # END LOOP ON ID FILE ###################          if(HashID==2048):              print 'PROBLEM WITH:',data[0]      if(data[0].find('_')<1):          mylongstr += ' '.join(data)+' \n'  #  # TO FILL IN THE LAST ENTRY  key = HashID  mydict[key]=mylongstr  f.close()  return mydictdef marryCalibrationToHash(idDict, calDict):  """ Join an idDictionary of hash: (identifier, positionIndices) to   a calibration dictionary of Identifier: CalibrationString to get the result  hash: ModifiedCalibrationString  Shaun Roe 9 Feb 2015  """  result=dict()  hashIndex=0  indicesIndex=1  for humanReadableId in calDict:    idTuple=idDict[humanReadableId]    result[idTuple[hashIndex]] = idTuple[indicesIndex]+"\n"+calDict[humanReadableId]  return resultdef readTotCalibrationData(fname):  """Open a calibration file and read data to dictionary of Identifier:CalibrationString  Shaun Roe 9 Feb 2015  """  with open(fname,'rU') as fp:    return dict([i for i in generateTotCalibrationData(fp)])def generateTotCalibrationData(fp):  """Generator to give key,value pairs of Identifier, CalibrationString  Shaun Roe 9 Feb 2015  """  k,v="",""   #key, value pairs  for line in fp:    if ("_" in line):      if v !="":        yield k,v      k=mapCalibId2SvnTableId(line.rstrip())      v=""    else:      v+=line  yield k,v    def readGeraldinesIdTable(fname):  """Read an id correspondence table with lines of format   20480 LI_S15_C_34_M3_C1_2 -4 0 0 0   Shaun Roe 9 February 2015  """  try:    lines = dict([idDictEntry(i,line) for i,line in enumerate (open(fname))])  except ValueError as e:    print "An error occurred: ",e.args    lines = None  return lines  def readSvnIdTable(fname):  """Read an id correspondence table with lines of format   PixMapOverlayWr...   INFO  1967     56315904  [2.1.2.1.27.0.0.0] D2A-B03-S2-M5   Shaun Roe 9 February 2015  """  dataSignature = "PixMapOverlayWr...   INFO  "  try:    lines = dict([svnIdDictEntry(line) for line in open(fname) if dataSignature in line])  except ValueError as e:    print "An error occurred: ",e.args    lines = None  return lines  def svnIdDictEntry(line):  """Form a dictionary entry from lines like  PixMapOverlayWr...   INFO  1967     56315904  [2.1.2.1.27.0.0.0] D2A-B03-S2-M5  PixMapOverlayWr...   INFO     0        20480  [2.1.-4.0.0.0.0.0] LI_S15_C_34_M3_C1_2     PixMapOverlayWr...   INFO   149     27873280  [2.1.-2.2.41.0.0.0]D3C-B04-S2-M1    Shaun Roe 9 February 2015  """   r="^PixMapOverlayWr\.\.\.\s+INFO\s+([0-9]+)\s+[0-9]+\s+\[2\.1\.([-0-9.]+)\.0\.0]\s*([-A-Z0-9_]+)\s*$"  parsed=re.match(r, line)  if (not parsed):    raise ValueError("This string could not be parsed",textLine)  return parsed.group(3), (int(parsed.group(1)), parsed.group(2).replace(".",","))    def idDictEntry(hash, textLine):  """ Form an id dictionary entry from lines of format  48504832 L2_B19_S02_M6C 0 3 36 -6  Shaun Roe 9 February 2015  """  if hashOutOfRange(hash):    raise ValueError("Hash out of range",hash)  regexString="^([0-9]+)\s([A-Z0-9_]+)\s([0-9-]+\s[0-9-]+\s[0-9-]+\s[0-9-]+)\s*$"  parsed = re.match(regexString, textLine)  if (not parsed):    raise ValueError("This string could not be parsed",textLine)  return parsed.group(2), (hash, parsed.group(3).replace(" ",","))  def hashOutOfRange(hashId):  #Check if the hash is in the valid range  return (hashId<0) or (hashId>2047)  def parseFiles(calibFilename,idFilename,idFileParser=readSvnIdTable):  """Parse a calibration data file and an id file into a dictionary  of hash: calibrationString. NOTE: The parser chosen must be appropriate  to the id file format  Shaun Roe 9 February 2015  """  if idFileParser == IBLTot:    return idFileParser(calibFilename,idFilename)  idDict=idFileParser(idFilename)  calDict=readTotCalibrationData(calibFilename)  return marryCalibrationToHash(idDict, calDict)  def mapCalibId2SvnTableId(calibId):  """Mapping from pixel calibration to svn id table nomenclatures"""  component = calibId.split("_")  layerDisk=component[0]  if ("L0" in layerDisk) or ("L1" in layerDisk) or ("L2" in layerDisk):    component[2]=component[2][0] + "0" + component[2][1]    del component[3]    return "-".join(component)  if ("D" in layerDisk):    return "-".join(component)  return calibId  def main():  idFilename="table_summaryNEW.txt"  calibFilename = "IBLCalibrationData.txt"  svnFilename="table_Run2.txt"  d=parseFiles(calibFilename,svnFilename)  print len(d)   return 0if __name__=="__main__":  sys.exit(main())
# Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
