README for special pixel map classes and the SpecialPixelMapSvc


author: Christoph Ruwiedel <ruwiedel@physik.uni-bonn.de>
last update: 03/03/2009



-- general structure:

The special pixel map consists of two classes: DetectorSpecialPixelMap and
ModuleSpecialPixelMap.  A DetectorSpecialPixelMap is a std::vector of pointers to
ModuleSpecialPixelMaps.  A ModuleSpecialPixelMap is a map of the status codes of the
special pixels on a single module. It inherits from std::map<unsigned int, unsigned
int>.


-- access to pixel status codes:

A pixel is referenced by a pixel ID. The pixel status code can be accessed via
ModuleSpecialPixelMap::pixelStatus(pixelID).  The pixel ID is an unsigned int with the
following structure:

4 bits for chip ID (values from 0 to 15, bits 2^0 to 2^3)
5 bits for column number (values from 0 to 17, bits 2^4 to 2^8)
8 bits for row number (values from 0 to 159, bits 2^9 to 2^16)

The pixel ID can be calculated from chip/column/row numbers using
ModuleSpecialPixelMap::encodePixelID( unsigned int chip, unsigned int column, unsigned int
row), or from the offline pixel ID using ModuleSpecialPixelMap::encodePixelID( int
component, unsigned int module_phi_index, unsigned int pixel_eta_index, unsigned int
pixel_phi_index). The convention used for the offline ID is the one described in
ATL-SOFT-2001-004, however with the pixel_eta_index in the endcaps always increasing with
increasing radius from the beampipe. "component" determines the barrel/endcap with values
-2,0,2, as described in ATL-SOFT-2001-004.


-- encoding of the pixel status:

see https://twiki.cern.ch/twiki/bin/view/Atlas/PixelCOOLoffline


-- usage of the special pixel map in athena:

The easiest way to use the special pixel map is to use the SpecialPixelMapSvc.  A
special pixel map which is valid for the current run/luminosity block pair or timestamp
can be created in the detector store by initialising the SpecialPixelMapSvc before the
start of the event loop with (mostly) default parameters.  In the initialize() method of
the service a callback is registered which automatically keeps the special pixel maps up
to date by loading the special pixel maps with the tags specified in the job options and
with the right interval of validity (IOV) from the database folders specified in the job
options.

The locations in the database of the special pixel maps to be read are specified in the
job options as the option DBFolders.  The StoreGate keys to be used to store the
constructed special pixel map objects are specified by the option SpecialPixelMapKeys.
Both DBFolders and SpecialPixelMapKeys are vectors of strings, so multiple special pixel
maps from different database folders can be read at the same time and stored each with
its own StoreGate key in the detector store.

In addition to keeping the pixel maps in the detector store up to date, the
SpecialPixelMapSvc provides methods which can be called in an Algorithm (or Tool, etc.).
A DetectorSpecialPixelMap can be created explicitly (without resorting to the callback)
with create(). The map can be created from the database (more specifically, from the
CondAttrListCollection currently in the detector store, which is managed by the IOVSvc
and read from the database by the IOVDbSvc) or from text files.  The text files are
assumed to have one comment line followed by the data in 4 columns: chip, column, row,
pixelStatus, with the pixelStatus encoded according to the rules described above. The
list of text files needs to be provided in a file in the run directory called "filelist"
by default. Filenames should contain the module production IDs as a part of the complete
filename. In each filename the production IDs must have the same offset from the 
beginning of the filename.

Writing of a special pixel map can be done with OutputConditionsAlg. For an example see
PixelMapTestAlgWriteCool.py.  

The contents of the special pixel maps can be printed with print().  Pixel IDs can be
printed as unsigned integers or as (chip/row/column) triplets.  Status codes can be
printed as unsigned integers in decimal or binary format. Modules can be selected for
printing in the job options.  The possible options are explained in
PixelMapTestAlgWriteCool.py.

The pixel maps can be merged into one pixel map which is then stored in the detector store
with the first key in SGKeys. The merging is done in the callback function so it is only
performed when one of the maps is updated. The merging can be steered with the
SpecialPixelMapSvc boolean property MergePixelMaps.


-- Special Regions

If all the pixels on a module or on a chip or in a column pair have the same status, it is
possible to remove the individual values from the map and store the status for the special
region instead. Storing the status for special regions in this way will in general be more
memory efficient and may or may not be more time efficient.

Special regions can be marked automatically by setting MarkSpecialRegions to TRUE, which
is currently the default setting, for the SpecialPixelMapSvc in the job options.  If the
option is set, the pixel maps will be checked for special regions when the
ModuleSpecialPixelMap objects are created.

In addition to the automatic checking it is also possible to use setModuleStatus,
setChipStatus and setColumnPairStatus in an algorithm.
