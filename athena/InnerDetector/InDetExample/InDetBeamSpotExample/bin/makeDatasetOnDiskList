#!/bin/bash

help() {
    echo "Usage: makeDatasetOnDiskList [options] pattern"
    echo "Make a list of the datasets matching pattern having a complete replica on a particular token"
    echo "    OPTIONS:"
    echo "         -h, --help           Print this help and exit"
    echo "         -d, --directory=DIR  Output directory (default: reprocfiles_$USER)"
    echo "         -t, --token=RSE      Space token to query (default: CERN-PROD_TZERO)"
    echo "         -m, --lb-map         Also build a map of lumi blocks in each file"
}

# Parse options
OPTS=$(getopt -o ht:d:m -l help,token:,directory:,lb-map -- "$@")
if [[ $? != 0 ]] ; then echo "Terminating..."; return -1 ; fi
eval set -- "$OPTS"

fname="datasets.txt"
fdir="reprocfiles_$USER"
token="CERN-PROD_TZDISK"
lbmap=0

while true ; do
    case "$1" in
        -h|--help)         help; exit 0;;
        -d|--directory)    fdir=$2;     shift 2;;
        -t|--token)        token=$2;    shift 2;;
        -m|--lb-map)       lbmap=1;     shift;;
        --)                shift ; break ;;
        *)                 exit 1 ;;
    esac
done

# Arguments
pattern="$1"; shift

echo "Looking for datasets matching pattern $pattern in $token ..."

# Need to do this in a subshell to avoid grid stuff causing clashes
(
echo "Setting up grid environment"
export ATLAS_LOCAL_ROOT_BASE="/cvmfs/atlas.cern.ch/repo/ATLASLocalRootBase"
source "${ATLAS_LOCAL_ROOT_BASE}/user/atlasLocalSetup.sh" --quiet
lsetup rucio
if ! voms-proxy-info --exists; then
  voms-proxy-init -voms atlas
fi

mkdir -p "$fdir"

for ds in $(rucio list-dids "$pattern" --short --filter type=container); do
  if { echo "$ds" | grep "_lb" > /dev/null; } then
    echo "Skipping  $ds"
    continue
  fi
  echo
  replica="$(rucio list-dataset-replicas "$ds")";
  if { echo "$replica" | grep "$token" > /dev/null; } then
    echo "--> Found replica at CERN: $replica"
  else
    echo "$replica"
    echo "Couldn't find replica on $token" >&2
    continue
  fi

  name="$(echo $ds | awk -F ':' '{print $NF}')"
  target="${fdir}/${name}.files"

  # Parse rucio output to get the path on EOS:
  # rucio list-file-replicas --rse $token $ds | grep $token  | awk -F '/' '{print "/"$(NF-2)"/"$(NF-1)"/"$NF}' > tmp.ds.txt
  rucio list-file-replicas --rse $token $ds \
    | grep $token \
    | awk -F '/eos/atlas' '{print "/eos/atlas"$NF}' \
    | grep AOD \
    | awk  '{print $1}' \
    > "$target"

  echo
  echo "Saved file list: $target"

  if [[ $lbmap -eq 1 ]]; then
    map="${fdir}/${name}.lbmap"
    set -e
    dumpLBFileMap --file="$map" "$target"
    echo "Saved LB map: $map"
  fi
done
)
