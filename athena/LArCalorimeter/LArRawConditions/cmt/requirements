package LArRawConditions

author Guillaume Unal <unal@in2p3.fr>
author RD Schaffer <R.D.Schaffer@cern.ch>

use AtlasPolicy         AtlasPolicy-* 

use GaudiInterface      GaudiInterface-*          External 
use CLIDSvc             CLIDSvc-*                 Control 
use AthenaKernel        AthenaKernel-*            Control
use DataModel           DataModel-*               Control
use StoreGate           StoreGate-*               Control
use AthenaPoolUtilities AthenaPoolUtilities-*     Database/AthenaPOOL

use LArIdentifier       LArIdentifier-*           LArCalorimeter
use LArElecCalib        LArElecCalib-*            LArCalorimeter
use LArTools            LArTools-*                LArCalorimeter

use Identifier          Identifier-*              DetectorDescription
use CaloIdentifier      CaloIdentifier-*          Calorimeter


library LArRawConditions *.cxx
#library LArRawConditions " LArRampMC.cxx  LArRampComplete.cxx LArConditionsContainerBase.cxx "
#library LArRawConditions " LArShapeComplete.cxx  LArRampComplete.cxx LArConditionsContainerBase.cxx LArCalibParams.cxx "

#library LArRawConditions " LArAutoCorrComplete.cxx LArOFCComplete.cxx LArPedestalComplete.cxx LArRampComplete.cxx LArShapeComplete.cxx LArAutoCorrMC.cxx LArOFCMC.cxx LArPedestalMC.cxx LArRampMC.cxx LArShapeMC.cxx LArShape32MC.cxx LArConditionsContainerBase.cxx LArCalibParams.cxx "

apply_pattern installed_library

apply_pattern declare_joboptions files=" *.py"
apply_pattern declare_python_modules files=" *.py "

private
macro_append use_cppflags -ftemplate-depth-99
use AtlasReflex  AtlasReflex-* External -no_auto_imports

#macro_append LArRawConditions_cppflags " -ftemplate-depth-99 -ftree-vectorize  -ftree-vectorizer-verbose=5 -funsafe-math-optimizations"
#macro_append LArRawConditions_cppflags " -ftemplate-depth-99 -ftree-vectorize -fassociative-math -fno-signed-zeros -fno-trapping-math -ftree-vectorizer-verbose=2 "


# Split the dictionary into multiple parts.
# Otherwise, the compiler can run out of memory on the generated source.

apply_pattern lcgdict dict=LArRawConditions1 selectionfile=selection1.xml \
   headerfiles="../LArRawConditions/LArRawConditionsDict1.h"
macro_append LArRawConditions1Dict_dependencies " LArRawConditions "

apply_pattern lcgdict dict=LArRawConditions2 selectionfile=selection2.xml \
   headerfiles="../LArRawConditions/LArRawConditionsDict2.h"
macro_append LArRawConditions2Dict_dependencies " LArRawConditions "

#Force to use g++ even for distcc builds
#macro	cpp "${cpp}" \
#      distcc "g++"
end_private
