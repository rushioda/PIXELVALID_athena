//Dear emacs, this is -*- c++ -*-

/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/


/** Template class for condition objects organized vs calibration line
 *
 * @author M. Fanti
 * @version  0-0-1 ,  7/02/06
 *
 * History:
 *  - 
 */

#include "AthenaKernel/getMessageSvc.h"
#include <iostream> 

//class LArCablingService ;


// return empty payload reference
// template < class T >
// inline T& LArConditionsVsCalib<T>::empty() const {
//   static T dummy ;
//   return (dummy) ;
// }

// // calib board query/navigation:

// template < class T > 
// inline typename LArConditionsVsCalib<T>::Const_CB_It 
// LArConditionsVsCalib<T>::find(CB_Id id) const {
//   Const_CB_It result = std::lower_bound(m_cb_vect.begin(), 
// 					m_cb_vect.end(),
// 					id, PairSort()) ;
//   if ( result != m_cb_vect.end() && (*result).first == id )  return (result) ;
//   return m_cb_vect.end() ;
// }

// template < class T > 
// inline typename LArConditionsVsCalib<T>::Const_CB_It 
// LArConditionsVsCalib<T>::begin() const {
//   return m_cb_vect.begin() ;
// }
// template < class T > 
// inline typename LArConditionsVsCalib<T>::Const_CB_It 
// LArConditionsVsCalib<T>::end() const {
//   return m_cb_vect.end() ;
// }
// template < class T > 
// inline size_t LArConditionsVsCalib<T>::size() const {
//   return m_cb_vect.size() ;
// }

// // insert new slot and sort
// template < class T > 
// inline void LArConditionsVsCalib<T>::insert(CB_Id id) {
//   m_cb_vect.push_back( CB_Tvec_pair( id,T_vector( nChannelsBoard ) ) ) ;
//   std::sort( m_cb_vect.begin() , m_cb_vect.end() , PairSort() ) ;
// }

template < class T >
void LArConditionsVsCalib<T>::setPdata(CB_Id calibBoard, const T_vector & payload_v) {
  //  const unsigned & N = nChannelsBoard ;
  unsigned N = LArConditionsVsCalibDB<T>::nChannelsBoard ;
  MsgStream log(Athena::getMessageSvc(), "LArConditionsVsCalib<>");
  if ( payload_v.size() != N ) {
    log << MSG::WARNING << "Number of provided channels is " << payload_v.size() << " != " << N << endreq ;
    return ;
  }
  typename LArConditionsVsCalib<T>::Const_CB_It it = LArConditionsVsCalibDB<T>::find( calibBoard ) ;
  if ( it == LArConditionsVsCalibDB<T>::end() ) {
    log << MSG::DEBUG << "Inserting new calib board " << calibBoard << endreq ;
    LArConditionsVsCalibDB<T>::insert (calibBoard) ;
    it = LArConditionsVsCalibDB<T>::find( calibBoard ) ;
  }
  if ( it == LArConditionsVsCalibDB<T>::end() ) {
    log << MSG::WARNING << "Could not find/allocate calib board " << calibBoard << endreq ;
    return ;
  } 
  typename CB_It::value_type& vec =
    const_cast<typename CB_It::value_type&> (*it);
  vec.second = payload_v ;
}

template < class T >
void LArConditionsVsCalib<T>::setPdata(const HWIdentifier& ChID, const T& payload) {
  MsgStream log(Athena::getMessageSvc(), "LArConditionsVsCalib<>");
  HWIdentifier calibLine = getCalibLine(ChID) ;
  if ( calibLine == 0 ) {
    log << MSG::WARNING << "Could not get calib line for channel " << ChID.getString() << endreq ;
    return ;
  }
  CB_Id    calibBoard = m_onlineHelper->calib_module_Id( calibLine ).get_identifier32().get_compact() ;
  unsigned channel    = m_onlineHelper->channel( calibLine ) ;
  typename LArConditionsVsCalib<T>::Const_CB_It it = LArConditionsVsCalibDB<T>::find( calibBoard ) ;
  if ( it == LArConditionsVsCalibDB<T>::end() ) {
    log << MSG::DEBUG << "Inserting new calib board " << calibBoard 
	<< " for channel " << ChID.getString() << endreq ;
    LArConditionsVsCalibDB<T>::insert (calibBoard) ;
    it = LArConditionsVsCalibDB<T>::find( calibBoard ) ;
  }
  if ( it == LArConditionsVsCalibDB<T>::end() ) {
    log << MSG::WARNING << "Could not find/allocate calib board " << calibBoard 
	<< " for channel " << ChID.getString() << endreq ;
    return ;
  }
  typename CB_It::value_type& vec =
    const_cast<typename CB_It::value_type&> (*it);
  ( vec.second ) [channel] = payload ;
}

template < class T >
const T& LArConditionsVsCalib<T>::get(const HWIdentifier& ChID) const {
  MsgStream log(Athena::getMessageSvc(), "LArConditionsVsCalib<>");
  log << MSG::VERBOSE << "... get(HWIdentifier): trying to get calib line HWId" << endreq ;
  HWIdentifier calibLine = getCalibLine(ChID) ;
  if ( calibLine == 0 ) {
    log << MSG::WARNING << "Could not find calib line for channel " << ChID.getString() << endreq ;
    return (empty()) ;
  }
  log << MSG::VERBOSE << "... get(HWIdentifier): trying to get calib board HWId" << endreq ;
  CB_Id    calibBoard = m_onlineHelper->calib_module_Id( calibLine ).get_identifier32().get_compact() ;
  log << MSG::VERBOSE << "... get(HWIdentifier): trying to get calib channel" << endreq ;
  unsigned channel    = m_onlineHelper->channel( calibLine ) ;
  log << MSG::VERBOSE << "... get(HWIdentifier): trying to get calib board iterator" << endreq ;
  typename LArConditionsVsCalib<T>::Const_CB_It it = LArConditionsVsCalibDB<T>::find( calibBoard ) ;
  if ( it ==LArConditionsVsCalibDB<T>::end() ) {
    log << MSG::WARNING << "Could not find calib board for channel " << ChID.getString() << endreq ;
    return (empty()) ;
  } 
  log << MSG::VERBOSE << "... get(HWIdentifier): success!" << endreq ;
  return ( (*it).second ) [channel] ;
}

template < class T >
const T& LArConditionsVsCalib<T>::get(const Identifier& CellID) const {
  HWIdentifier ChID = m_cablingSvc->createSignalChannelID(CellID) ;
  return get(ChID) ;
}


template<class T>
inline T& LArConditionsVsCalib<T>::empty() const
{
    static T result;
    return (result);
}
