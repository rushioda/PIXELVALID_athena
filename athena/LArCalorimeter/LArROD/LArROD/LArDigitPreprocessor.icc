//Dear emacs, this is -*- c++ -*-

/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/

#include "LArRawEvent/LArDigitContainer.h"
#include "TBEvent/TBLArDigitContainer.h"
#include "LArRawEvent/LArCalibDigitContainer.h"
#include "LArElecCalib/ILArDigitOscillationCorrTool.h"
#include "GaudiKernel/IToolSvc.h"
#include <algorithm>

/*---------------------------------------------------------*/
template<class DIGITCONTAINER>
LArDigitPreProcessor<DIGITCONTAINER>::LArDigitPreProcessor (const std::string& name,
                                  ISvcLocator* pSvcLocator):AthAlgorithm(name, pSvcLocator)
/*---------------------------------------------------------*/
{
  m_corrTool=NULL;
  m_outputContainer="FREE"; 
  m_NumberOfSamples=0;
  m_firstSample=-1;
  m_pickGain=false;
  m_useOscillationCorrTool=false;
  declareProperty("InputContainers",m_inputContainers);
  declareProperty("OutputContainer", m_outputContainer);
  declareProperty("NumberOfSamples",m_NumberOfSamples);
  declareProperty("FirstSample",m_firstSample);
  declareProperty("PickGain",m_pickGain);
  declareProperty("CorrectOscillations",m_useOscillationCorrTool);
  //Set limits:
  const float medGainFactor=9.8;  //LowGain*medGainFactor=medGain. Value correct??
  const float highGainFactor=9.8; //MedGain*highGainFactor=highGain Value correct??
  m_medGainLowerLimit=0x4fe;      //Comes from old LArRawChannelBuilder class
  m_medGainUpperLimit=0xe0f;      //Comes from old LArRawChannelBuilder class
  m_highGainLowerLimit=(short)(m_medGainUpperLimit*(1./highGainFactor)); 
  m_lowGainUpperLimit=(short)(m_medGainLowerLimit*medGainFactor);
}

/*---------------------------------------------------------*/
template<class DIGITCONTAINER>
LArDigitPreProcessor<DIGITCONTAINER>::~LArDigitPreProcessor()
{
}

/*---------------------------------------------------------*/
template<class DIGITCONTAINER>
StatusCode LArDigitPreProcessor<DIGITCONTAINER>::initialize()
/*---------------------------------------------------------*/
{
  MsgStream log(msgSvc(), name());
  StatusCode sc;  

  IToolSvc* toolSvc;
  IAlgTool* algtool;

  sc = service("ToolSvc", toolSvc);
  if (sc.isFailure()) {
    log << MSG::ERROR << " Tool Service not found " << endreq; 
    return StatusCode::FAILURE;
  }
  
  if ( m_useOscillationCorrTool) {
    sc = toolSvc->retrieveTool("LArDigitOscillationCorrTool",algtool);
    if (sc.isFailure()) {
      log << MSG::ERROR << "Unable to find tool LArDigitOscillationCorrTool" << endreq;
      return StatusCode::FAILURE; 
    }
    m_corrTool=dynamic_cast<ILArDigitOscillationCorrTool*>(algtool);
    if (!m_corrTool) {
      log << MSG::ERROR << "Unable to d-cast LArDigitOscillationCorrTool" << endreq;
      return StatusCode::FAILURE;
    }
  }

  return StatusCode::SUCCESS;
}

/*---------------------------------------------------------*/
template<class DIGITCONTAINER>
StatusCode LArDigitPreProcessor<DIGITCONTAINER>::execute()
/*---------------------------------------------------------*/
{
  MsgStream log(msgSvc(), name());
  StatusCode sc;
  //prepare output container;
  LArDigitContainer* outputContainer=new LArDigitContainer();
  log << MSG::DEBUG << "Making LArDigitContainer with key " << m_outputContainer << endreq;
  sc=evtStore()->record(outputContainer,m_outputContainer);
  if (sc.isFailure()) {
    log << MSG::WARNING << "Cannot record LArDigitContainer with key " << m_outputContainer
        << " to StoreGate." << endreq;
    return StatusCode::FAILURE;
  }
  
  // Loop over list of input containers
  std::vector<std::string>::const_iterator cont_it=m_inputContainers.begin();
  std::vector<std::string>::const_iterator cont_it_e=m_inputContainers.end();
  for(;cont_it!=cont_it_e;cont_it++) {
    //Retrieve input Container
    // const LArDigitContainer* inputContainer;
    const DIGITCONTAINER* inputContainer;
    sc=evtStore()->retrieve(inputContainer,*cont_it);
    if (sc.isFailure()) {
      log << MSG::WARNING << "Cannot retrieve DIGITCONTAINER with key " << *cont_it
          << " from StoreGate." << endreq;
      continue;
    }
    
    //LArDigitContainer::const_iterator it=inputContainer->begin();
    //LArDigitContainer::const_iterator it_e=inputContainer->end();
    typedef typename DIGITCONTAINER::const_iterator CONT_IT;
    CONT_IT it=inputContainer->begin();
    CONT_IT it_e=inputContainer->end();
    
    for(;it!=it_e;it++) {
      const std::vector<short>& samples=(*it)->samples();
      HWIdentifier chid((*it)->channelID());
      CaloGain::CaloGain gain=(*it)->gain();
      if (m_pickGain) {
	//ADD: Check if sample already there....
	short max=*(max_element((*it)->samples().begin(),(*it)->samples().end()));
	if (!((gain==CaloGain::LARLOWGAIN && max < m_lowGainUpperLimit) || 
	      (gain==CaloGain::LARMEDIUMGAIN && max > m_medGainLowerLimit && max < m_medGainUpperLimit) ||
              (gain==CaloGain::LARHIGHGAIN && max > m_highGainLowerLimit)))
	  continue; //Gain does not match...
      }
      if (m_NumberOfSamples && samples.size()>m_NumberOfSamples) {
	std::vector<short> newSamples;
	if (m_firstSample>0) { //fixed subset of samples
	  if (m_firstSample+m_NumberOfSamples>samples.size()) {
	    log << MSG::ERROR << "Not enough samples! Have " << samples.size() << ", can't select samples " 
                << m_firstSample << " to " << m_firstSample+m_NumberOfSamples << "." << endreq;
	    continue;
          }
	  std::vector<short>::const_iterator first=samples.begin()+m_firstSample;
	  newSamples.assign(first,first+m_NumberOfSamples);
	} else { //choose accoring to maximum sample
	  std::vector<short>::const_iterator max=max_element((*it)->samples().begin(),(*it)->samples().end());
	  std::vector<short> newSamples;
	  const int  halfNSample=m_NumberOfSamples/2;
	  if (max-samples.begin()>halfNSample) //At lower bound
	    newSamples.assign(samples.begin(),samples.begin()+m_NumberOfSamples);
	  else if (samples.end()-1-max>halfNSample) //At upper bound
	    newSamples.assign(samples.end()-m_NumberOfSamples,samples.end());
	  else //in the middle
	    newSamples.assign(max-halfNSample,max-halfNSample+m_NumberOfSamples);
	}
	LArDigit* lardigit=new LArDigit(chid,gain,newSamples);
	outputContainer->push_back(lardigit);
      } else {
	LArDigit* lardigit=new LArDigit(chid,gain,samples);
	outputContainer->push_back(lardigit);
      }
    }//End loop over single container
  }// end loop over container-list

  if ( m_useOscillationCorrTool) {
    sc=m_corrTool->calculateEventPhase(*outputContainer);
    if (sc.isFailure()) 
      log << MSG::WARNING << "LArDigitOscillationCorrTool::calculateEventPhase failed." << endreq;
    else {
      sc=m_corrTool->correctLArDigits(*outputContainer);
      if (sc.isFailure()) 
	log << MSG::WARNING << "LArDigitOscillationCorrTool::correctLArDigits failed." << endreq;
    }
  }
  
  if (outputContainer->size()) {
    log << MSG::DEBUG << "Made LArDigitContainer with key " << m_outputContainer << " and size " << outputContainer->size() << endreq;
    return StatusCode::SUCCESS;
  }
  else
    {log << MSG::ERROR << "Resulting Container is empty!" << endreq;
    return StatusCode::FAILURE;
    }
}

/*---------------------------------------------------------*/
template<class DIGITCONTAINER>
StatusCode LArDigitPreProcessor<DIGITCONTAINER>::finalize()
/*---------------------------------------------------------*/
{
  return StatusCode::SUCCESS;
}
/*---------------------------------------------------------*/
