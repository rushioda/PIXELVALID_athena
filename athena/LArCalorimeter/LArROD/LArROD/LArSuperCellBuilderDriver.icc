/*
  Copyright (C) 2002-2017 CERN for the benefit of the ATLAS collaboration
*/


template<typename T>
StatusCode
LArSuperCellBuilderDriver::retrieveStoreGate(const T*& object,
					      const std::string& key)
{
  if(!bool(m_storeGateSvc))
    if(service("StoreGateSvc",m_storeGateSvc).isFailure())
      {
        MsgStream log(msgSvc(), name());
	log << MSG::ERROR << "StoreGate service not found" << endreq;
	return StatusCode::FAILURE;
      }
  if( m_storeGateSvc->retrieve(object, key).isSuccess() )
    return StatusCode::SUCCESS;
  return StatusCode::FAILURE;
}

template<typename T>
StatusCode
LArSuperCellBuilderDriver::retrieveDetectorStore(const T*& object,
						  const std::string& key)
{
  if(!bool(m_detStore))
    if(service("DetectorStore",m_detStore).isFailure())
      {
        MsgStream log(msgSvc(), name());
	log << MSG::ERROR << "DetectorStore service not found" << endreq;
	return StatusCode::FAILURE;
      }
  if( m_detStore->retrieve(object, key).isSuccess() )
    return StatusCode::SUCCESS;
  return StatusCode::FAILURE;
}

template<typename T>
StatusCode
LArSuperCellBuilderDriver::regHandleDetectorStore(const T& object,
						  const std::string& key)
{ // retrieving DataHandle<T> 
  if(!bool(m_detStore))
    if(service("DetectorStore",m_detStore).isFailure())
      {
	MsgStream log(msgSvc(), name());
	log << MSG::ERROR << "DetectorStore service not found" << endreq;
	return StatusCode::FAILURE;
      }
  if( m_detStore->regHandle(object, key).isSuccess() )
    return StatusCode::SUCCESS;

  return StatusCode::FAILURE;
}
