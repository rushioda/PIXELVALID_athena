package LArConditionsTest

author RD Schaffer <R.D.Schaffer@cern.ch>
author Hong Ma <hma@bnl.gov>

use AtlasPolicy          AtlasPolicy-*
use GaudiInterface       GaudiInterface-*       External 
use AthenaKernel         AthenaKernel-*		Control
use AthenaBaseComps      AthenaBaseComps-*	Control
use StoreGate            StoreGate-*            Control
use LArElecCalib         LArElecCalib-*         LArCalorimeter
use LArRawConditions     LArRawConditions-*     LArCalorimeter

use LArRawUtils          LArRawUtils-*          LArCalorimeter
use LArCabling           LArCabling-*           LArCalorimeter
use LArTools             LArTools-*             LArCalorimeter
use CaloInterface        CaloInterface-*           Calorimeter
use Identifier Identifier-* DetectorDescription 
use CaloIdentifier CaloIdentifier-*  Calorimeter
use LArIdentifier  LArIdentifier-*   LArCalorimeter
use CaloDetDescr   CaloDetDescr-*    Calorimeter	


# Test infrastructure
use TestPolicy           TestPolicy-*
use MinimalRunTime       MinimalRunTime-* Control -no_auto_imports

private
use LArCOOLConditions    LArCOOLConditions-*    LArCalorimeter
end_private

# make component lib
apply_pattern component_library

# DRQ: Note that I've removed a commented out line:
#		FixLArIdMap.cxx \
# because the cmt2cmake converter treats all subsequent .cxx files as further comments
library LArConditionsTest \
        LArConditionsTest_entries.cxx \
        LArConditionsTest_load.cxx \
        TestLArConditionsTools.cxx \
        FixLArElecCalib.cxx \
        LArCondDataTest.cxx \
        LArConditionsTestAlg.cxx \
	LArFecLvTempDcsTest.cxx \
	LArCablingTest.cxx \
	LArIdMapConvert.cxx \
	LArShapeToSCShape.cxx\
        LArOFCtoOFC.cxx\
	LArFebRodMapConvert.cxx

apply_pattern declare_joboptions files="*.py"


private
use AthenaKernel   AthenaKernel-*    Control
use xAODEventInfo  xAODEventInfo-*   Event/xAOD 
use CaloDetDescr   CaloDetDescr-*    Calorimeter 
use CaloEvent      CaloEvent-*       Calorimeter 
use CaloIdentifier CaloIdentifier-*  Calorimeter
use AtlasCORAL     AtlasCORAL-*       External
use AthenaPoolUtilities AthenaPoolUtilities-* Database/AthenaPOOL	

# Setup automatic testing which runs with gmake check

# We define here a macro which can be used to run the tests only on
# optimized mode.
macro test_pattern_opt_only "athenarun_test" \
      debug        ""


# Simple test, no I/O
apply_pattern athenarun_test name="LArConditionsTest" pre_script="../test/pre_check.sh LArConditionsTest " options="LArConditionsTest/LArConditionsTest_jobOptions.py" post_script="../test/post.sh LArConditionsTest LArConditionsTe " 

# Write out no registration 
apply_pattern athenarun_test name="LArConditionsTestWriteNoReg" pre_script="../test/pre_check.sh LArConditionsTestWriteNoReg " options="LArConditionsTest/LArConditionsTestWriteNoReg_jobOptions.py" post_script="../test/post.sh LArConditionsTestWriteNoReg LArConditionsTe " 
macro_append LArConditionsTestWriteNoReg_test_dependencies " LArConditionsTest_test "

# Read back no registration 
apply_pattern athenarun_test name="LArConditionsTestReadNoReg" pre_script="../test/pre_check.sh LArConditionsTestReadNoReg " options="LArConditionsTest/LArConditionsTestReadNoReg_jobOptions.py" post_script="../test/post.sh LArConditionsTestReadNoReg LArConditionsTe " 
macro_append LArConditionsTestReadNoReg_test_dependencies " LArConditionsTestWriteNoReg_test "

# Read back and register
#apply_pattern athenarun_test name="LArConditionsTestReadAndReg" pre_script="../test/pre_check.sh LArConditionsTestReadAndReg  LARNOREG " options="LArConditionsTest/LArConditionsTestReadAndReg_jobOptions.py" post_script="../test/post.sh LArConditionsTestReadAndReg LArConditionsTe " 

# Read back 
#apply_pattern athenarun_test name="LArConditionsTestReadTwoStep" pre_script="../test/pre_check.sh LArConditionsTestReadTwoStep " options="LArConditionsTest/LArConditionsTestReadTwoStep_jobOptions.py" post_script="../test/post.sh LArConditionsTestReadTwoStep LArConditionsTe " 


# Write out without corrections
#apply_pattern athenarun_test name="LArConditionsTestWriteNoCorr" pre_script="../test/pre_check.sh LArConditionsTestWriteNoCorr LARCORR " options="LArConditionsTest/LArConditionsTestWriteNoCorr_jobOptions.py" post_script="../test/post.sh LArConditionsTestWriteNoCorr LArConditionsTe " 

# Read back without corrections
#apply_pattern athenarun_test name="LArConditionsTestReadNoCorr" pre_script="../test/pre_check.sh LArConditionsTestReadNoCorr " options="LArConditionsTest/LArConditionsTestReadNoCorr_jobOptions.py" post_script="../test/post.sh LArConditionsTestReadNoCorr LArConditionsTe " 

# Write out  corrections
#apply_pattern athenarun_test name="LArConditionsTestWriteCorr" pre_script="../test/pre_check.sh LArConditionsTestWriteCorr " options="LArConditionsTest/LArConditionsTestWriteCorr_jobOptions.py" post_script="../test/post.sh LArConditionsTestWriteCorr LArConditionsTe " 

# Read back 
#apply_pattern athenarun_test name="LArConditionsTestReadCorr" pre_script="../test/pre_check.sh LArConditionsTestReadCorr " options="LArConditionsTest/LArConditionsTestReadCorr_jobOptions.py" post_script="../test/post.sh LArConditionsTestReadCorr LArConditionsTe " 

# Write in single step
#apply_pattern athenarun_test name="LArConditionsTestWriteOneStep" pre_script="../test/pre_check.sh LArConditionsTestWriteOneStep LARTEST " options="LArConditionsTest/LArConditionsTestWrite_jobOptions.py" post_script="../test/post.sh LArConditionsTestWriteOneStep LArConditionsTe " 

# Read back 
#apply_pattern athenarun_test name="LArConditionsTestReadOneStep" pre_script="../test/pre_check.sh LArConditionsTestReadOneStep " options="LArConditionsTest/LArConditionsTestRead_jobOptions.py" post_script="../test/post.sh LArConditionsTestReadOneStep LArConditionsTe " 

#Application to dump IOV ranges and tags from the Lisbon DB 
#use ICondDB              ICondDB-00-*              External
#use CondDBMySQL          CondDBMySQL-00-*          External -no_auto_imports
#application -import=CondDBMySQL LisIOVList LisIOVList.cxx
